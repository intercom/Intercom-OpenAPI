---
openapi: 3.0.1
info:
  title: Intercom API
  version: Unstable
  description: The intercom API reference.
  contact:
    name: Intercom Developer Hub
    url: https://developers.intercom.com
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
paths:
  "/me":
    get:
      summary: Identify an admin
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Admins
      operationId: identifyAdmin
      description: "\nYou can view the currently authorised admin along with the embedded
        app object (a \"workspace\" in legacy terminology).\n\n> \U0001F6A7 Single
        Sign On\n>\n> If you are building a custom \"Log in with Intercom\" flow for
        your site, and you call the `/me` endpoint to identify the logged-in user,
        you should not accept any sign-ins from users with unverified email addresses
        as it poses a potential impersonation security risk.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266214'
                    email: admin1@email.com
                    name: Ciaran1 Lee
                    email_verified: true
                    app:
                      type: app
                      id_code: this_is_an_id1_that_should_be_at_least_40
                      name: MyApp 1
                      created_at: 1715085003
                      secure: false
                      identity_verification: false
                      timezone: America/Los_Angeles
                      region: US
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/assets/default-avatars/admins/128.png
                    has_inbox_seat: true
              schema:
                "$ref": "#/components/schemas/admin_with_app"
  "/admins/{id}/away":
    put:
      summary: Set an admin to away
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given admin
        schema:
          type: integer
      tags:
      - Admins
      operationId: setAwayAdmin
      description: You can set an Admin as away for the Inbox.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266215'
                    name: Ciaran2 Lee
                    email: admin2@email.com
                    away_mode_enabled: true
                    away_mode_reassign: true
                    has_inbox_seat: true
                    team_ids: []
              schema:
                "$ref": "#/components/schemas/admin"
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: 65af0057-41f5-46ec-9a53-4014d67b0874
                    errors:
                    - code: admin_not_found
                      message: Admin for admin_id not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e73aebf7-bca2-4d25-ac62-0c07b361aa02
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - away_mode_enabled
              - away_mode_reassign
              properties:
                away_mode_enabled:
                  type: boolean
                  description: Set to "true" to change the status of the admin to
                    away.
                  example: true
                  default: true
                away_mode_reassign:
                  type: boolean
                  description: Set to "true" to assign any new conversation replies
                    to your default inbox.
                  example: false
                  default: false
            examples:
              successful_response:
                summary: Successful response
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              admin_not_found:
                summary: Admin not found
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              unauthorized:
                summary: Unauthorized
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
  "/admins/activity_logs":
    get:
      summary: List all activity logs
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: created_at_after
        in: query
        required: true
        description: The start date that you request data for. It must be formatted
          as a UNIX timestamp.
        example: '1677253093'
        schema:
          type: string
      - name: created_at_before
        in: query
        required: false
        description: The end date that you request data for. It must be formatted
          as a UNIX timestamp.
        example: '1677861493'
        schema:
          type: string
      tags:
      - Admins
      operationId: listActivityLogs
      description: You can get a log of activities by all admins in an app.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: activity_log.list
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 20
                      total_pages: 1
                    activity_logs:
                    - id: 3bfaa4b3-2894-4e28-95d2-789a82f30efd
                      performed_by:
                        type: admin
                        id: '991266219'
                        email: admin5@email.com
                        ip: 127.0.0.1
                      metadata:
                        message:
                          id: 123
                          title: Initial message title
                        before: Initial message title
                        after: Eventual message title
                      created_at: 1715085008
                      activity_type: message_state_change
                      activity_description: Ciaran5 Lee changed your Initial message
                        title message from Initial message title to Eventual message
                        title.
                    - id: a315e5a7-b0d7-4904-a4bf-ea1bc02b079b
                      performed_by:
                        type: admin
                        id: '991266219'
                        email: admin5@email.com
                        ip: 127.0.0.1
                      metadata:
                        before: before
                        after: after
                      created_at: 1715085008
                      activity_type: app_name_change
                      activity_description: Ciaran5 Lee changed your app name from
                        before to after.
              schema:
                "$ref": "#/components/schemas/activity_log_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1f683674-5618-421e-8208-c07cfb4cc333
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/admins":
    get:
      summary: List all admins
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Admins
      operationId: listAdmins
      description: You can fetch a list of admins for a given workspace.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin.list
                    admins:
                    - type: admin
                      email: admin7@email.com
                      id: '991266221'
                      name: Ciaran7 Lee
                      away_mode_enabled: false
                      away_mode_reassign: false
                      has_inbox_seat: true
                      team_ids: []
              schema:
                "$ref": "#/components/schemas/admin_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8284f16f-25c7-4d9c-a27f-6415d083f23c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/admins/{id}":
    get:
      summary: Retrieve an admin
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given admin
        example: 123
        schema:
          type: integer
      tags:
      - Admins
      operationId: retrieveAdmin
      description: You can retrieve the details of a single admin.
      responses:
        '200':
          description: Admin found
          content:
            application/json:
              examples:
                Admin found:
                  value:
                    type: admin
                    id: '991266223'
                    name: Ciaran9 Lee
                    email: admin9@email.com
                    away_mode_enabled: false
                    away_mode_reassign: false
                    has_inbox_seat: true
                    team_ids: []
              schema:
                "$ref": "#/components/schemas/admin"
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: c9db183c-8106-4502-9b5c-70a7a9d9cdbe
                    errors:
                    - code: admin_not_found
                      message: Admin not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7d5cf231-3241-4c73-85ec-cea715343d2f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/ai/content_import_sources":
    get:
      summary: List content import sources
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: listContentImportSources
      description: You can retrieve a list of all content import sources for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    data:
                    - id: 1
                      type: content_import_source
                      last_synced_at: 1715085011
                      status: active
                      url: https://support.example.com/us/1
                      sync_behavior: automatic
                      created_at: 1715085011
                      updated_at: 1715085011
                    - id: 2
                      type: content_import_source
                      last_synced_at: 1715085011
                      status: active
                      url: https://support.example.com/us/2
                      sync_behavior: automatic
                      created_at: 1715085011
                      updated_at: 1715085011
                    - id: 3
                      type: content_import_source
                      last_synced_at: 1715085011
                      status: active
                      url: https://support.example.com/us/3
                      sync_behavior: automatic
                      created_at: 1715085011
                      updated_at: 1715085011
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 3
                    type: list
              schema:
                "$ref": "#/components/schemas/content_import_sources_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f9a81823-14cf-443f-aa2c-5ab6dcb52d72
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a content import source
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: createContentImportSource
      description: You can create a new content import source by sending a POST request
        to this endpoint.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 4
                    type: content_import_source
                    last_synced_at: 1715085012
                    status: active
                    url: https://www.example.com
                    sync_behavior: api
                    created_at: 1715085012
                    updated_at: 1715085012
              schema:
                "$ref": "#/components/schemas/content_import_source"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 940a42ce-9ecc-49da-bd33-54a1f8c5cc04
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_content_import_source_request"
            examples:
              successful:
                summary: successful
                value:
                  sync_behavior: api
                  url: https://www.example.com
  "/ai/content_import_sources/{id}":
    parameters:
    - name: id
      in: path
      description: The unique identifier for the content import source which is given
        by Intercom.
      required: true
      schema:
        type: string
    delete:
      summary: Delete a content import source
      operationId: deleteContentImportSource
      description: You can delete a content import source by making a DELETE request
        this endpoint. This will also delete all external pages that were imported
        from this source.
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      responses:
        '204':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 103d8ef8-a173-4898-9e50-680fa18d3fb6
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    get:
      summary: Retrieve a content import source
      operationId: getContentImportSource
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 6
                    type: content_import_source
                    last_synced_at: 1715085014
                    status: active
                    url: https://support.example.com/us/5
                    sync_behavior: api
                    created_at: 1715085014
                    updated_at: 1715085014
              schema:
                "$ref": "#/components/schemas/content_import_source"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b37e32cf-4ee5-4906-b7e2-8261d6d518e7
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a content import source
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: updateContentImportSource
      description: You can update an existing content import source.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 7
                    type: content_import_source
                    last_synced_at: 1715085015
                    status: active
                    url: https://www.example.com
                    sync_behavior: api
                    created_at: 1715085015
                    updated_at: 1715085015
              schema:
                "$ref": "#/components/schemas/content_import_source"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6cc0314c-7077-4754-bc7e-b54ad1d8c694
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_content_import_source_request"
            examples:
              successful:
                summary: successful
                value:
                  sync_behavior: api
                  url: https://www.example.com
  "/ai/external_pages":
    get:
      summary: List external pages
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: listExternalPages
      description: You can retrieve a list of all external pages for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    data:
                    - id: '3'
                      type: external_page
                      title: My External Content
                      html: "<h1>Hello world</h1><p>This is external content</p>"
                      url: https://support.example.com/us/3
                      fin_availability: true
                      locale: en
                      source_id: 10
                      external_id: '3'
                      created_at: 1715085016
                      updated_at: 1715085016
                      last_ingested_at: 1715085016
                    - id: '2'
                      type: external_page
                      title: My External Content
                      html: "<h1>Hello world</h1><p>This is external content</p>"
                      url: https://support.example.com/us/2
                      fin_availability: true
                      locale: en
                      source_id: 9
                      external_id: '2'
                      created_at: 1715085016
                      updated_at: 1715085016
                      last_ingested_at: 1715085016
                    - id: '1'
                      type: external_page
                      title: My External Content
                      html: "<h1>Hello world</h1><p>This is external content</p>"
                      url: https://support.example.com/us/1
                      fin_availability: true
                      locale: en
                      source_id: 8
                      external_id: '1'
                      created_at: 1715085016
                      updated_at: 1715085016
                      last_ingested_at: 1715085016
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 3
                    type: list
              schema:
                "$ref": "#/components/schemas/external_pages_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f5ae1f70-ec7a-4946-a506-117b0b282e30
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create an external page (or update an external page by external ID)
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: createExternalPage
      description: You can create a new external page by sending a POST request to
        this endpoint. If an external page already exists with the specified source_id
        and external_id, it will be updated instead.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '5'
                    type: external_page
                    title: Test
                    html: "<html><body><h1>Test</h1></body></html>"
                    url: https://www.example.com
                    fin_availability: true
                    locale: en
                    source_id: 12
                    external_id: abc1234
                    created_at: 1715085018
                    updated_at: 1715085018
                    last_ingested_at: 1715085018
              schema:
                "$ref": "#/components/schemas/external_page"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9eef0825-b422-40c8-8a1f-08f95c62398c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_external_page_request"
            examples:
              successful:
                summary: successful
                value:
                  external_id: abc1234
                  html: "<html><body><h1>Test</h1></body></html>"
                  locale: en
                  source_id: 12
                  title: Test
                  url: https://www.example.com
  "/ai/external_pages/{id}":
    parameters:
    - name: id
      in: path
      description: The unique identifier for the external page which is given by Intercom.
      required: true
      schema:
        type: string
    delete:
      summary: Delete an external page
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: deleteExternalPage
      description: Sending a DELETE request for an external page will remove it from
        the content library UI and from being used for AI answers.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '6'
                    type: external_page
                    title: My External Content
                    html: "<h1>Hello world</h1><p>This is external content</p>"
                    url: https://support.example.com/us/5
                    fin_availability: true
                    locale: en
                    source_id: 13
                    external_id: '4'
                    created_at: 1715085019
                    updated_at: 1715085019
                    last_ingested_at: 1715085019
              schema:
                "$ref": "#/components/schemas/external_page"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e5a64907-c6fc-497c-8125-3576ecc24179
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    get:
      summary: Retrieve an external page
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: getExternalPage
      description: You can retrieve an external page.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '7'
                    type: external_page
                    title: My External Content
                    html: "<h1>Hello world</h1><p>This is external content</p>"
                    url: https://support.example.com/us/6
                    fin_availability: true
                    locale: en
                    source_id: 14
                    external_id: '5'
                    created_at: 1715085020
                    updated_at: 1715085020
                    last_ingested_at: 1715085020
              schema:
                "$ref": "#/components/schemas/external_page"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: caa46c45-5989-4a74-85d2-f2e83dbdd92e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update an external page
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - AI Content
      operationId: updateExternalPage
      description: You can update an existing external page (if it was created via
        the API).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '8'
                    type: external_page
                    title: Test
                    html: "<html><body><h1>Test</h1></body></html>"
                    url: https://www.example.com
                    fin_availability: true
                    locale: en
                    source_id: 15
                    external_id: '5678'
                    created_at: 1715085021
                    updated_at: 1715085021
                    last_ingested_at: 1715085021
              schema:
                "$ref": "#/components/schemas/external_page"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fa57cebb-b7aa-49a3-ab98-7c8c429e6c38
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_external_page_request"
            examples:
              successful:
                summary: successful
                value:
                  external_id: '5678'
                  html: "<html><body><h1>Test</h1></body></html>"
                  locale: en
                  source_id: 15
                  title: Test
                  url: https://www.example.com
  "/articles":
    get:
      summary: List all articles
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Articles
      operationId: listArticles
      description: "You can fetch a list of all articles by making a GET request to
        `https://api.intercom.io/articles`.\n\n> \U0001F4D8 How are the articles sorted
        and ordered?\n>\n> Articles will be returned in descending order on the `updated_at`
        attribute. This means if you need to iterate through results then we'll show
        the most recently updated articles first.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      type: pages
                      page: 1
                      per_page: 25
                      total_pages: 1
                    total_count: 1
                    data:
                    - id: '1'
                      type: article
                      workspace_id: this_is_an_id64_that_should_be_at_least_4
                      parent_id: 1
                      parent_type: collection
                      parent_ids: []
                      title: This is the article title
                      description: ''
                      body: ''
                      author_id: 991266247
                      state: published
                      created_at: 1715085021
                      updated_at: 1715085021
                      url: http://help-center.test/myapp-64/en/articles/1-this-is-the-article-title
              schema:
                "$ref": "#/components/schemas/article_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 307da16a-baf4-4f3c-bb0b-0ac7e32493e0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Articles
      operationId: createArticle
      description: You can create a new article by making a POST request to `https://api.intercom.io/articles`.
      responses:
        '200':
          description: article created
          content:
            application/json:
              examples:
                article created:
                  value:
                    id: '4'
                    type: article
                    workspace_id: this_is_an_id68_that_should_be_at_least_4
                    parent_id: 3
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Thanks for everything
                    description: Description of the Article
                    body: <p class="no-margin">Body of the Article</p>
                    author_id: 991266252
                    state: published
                    created_at: 1715085023
                    updated_at: 1715085023
                    url: http://help-center.test/myapp-68/en/articles/4-thanks-for-everything
              schema:
                "$ref": "#/components/schemas/article"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 440d6a0f-26f6-436e-ac56-ff2d4d2e1b06
                    errors:
                    - code: parameter_not_found
                      message: author_id must be in the main body or default locale
                        translated_content object
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: bb282e5a-47fa-46f8-ad6b-46893b19400b
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_article_request"
            examples:
              article_created:
                summary: article created
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  author_id: 991266252
                  state: published
                  parent_id: 3
                  parent_type: collection
                  translated_content:
                    fr:
                      title: Merci pour tout
                      description: Description de l'article
                      body: Corps de l'article
                      author_id: 991266252
                      state: published
              bad_request:
                summary: Bad Request
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  state: published
  "/articles/{id}":
    get:
      summary: Retrieve an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: retrieveArticle
      description: You can fetch the details of a single article by making a GET request
        to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: Article found
          content:
            application/json:
              examples:
                Article found:
                  value:
                    id: '7'
                    type: article
                    workspace_id: this_is_an_id74_that_should_be_at_least_4
                    parent_id: 6
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: This is the article title
                    description: ''
                    body: ''
                    author_id: 991266257
                    state: published
                    created_at: 1715085025
                    updated_at: 1715085025
                    url: http://help-center.test/myapp-74/en/articles/7-this-is-the-article-title
              schema:
                "$ref": "#/components/schemas/article"
        '404':
          description: Article not found
          content:
            application/json:
              examples:
                Article not found:
                  value:
                    type: error.list
                    request_id: 96e06c0d-add0-4a1e-b70d-875c9aba90d0
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a125eba7-5e63-49b2-83c6-ef438312ddbd
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: updateArticle
      description: You can update the details of a single article by making a PUT
        request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '10'
                    type: article
                    workspace_id: this_is_an_id80_that_should_be_at_least_4
                    parent_id: 9
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Christmas is here!
                    description: ''
                    body: <p class="no-margin">New gifts in store for the jolly season</p>
                    author_id: 991266263
                    state: published
                    created_at: 1715085028
                    updated_at: 1715085029
                    url: http://help-center.test/myapp-80/en/articles/10-christmas-is-here
              schema:
                "$ref": "#/components/schemas/article"
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: 90f972ce-619f-4268-9bbd-a221c1a3d027
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e24ea931-0ad5-491a-8deb-d23d2ddcdc06
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_article_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
              article_not_found:
                summary: Article Not Found
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
    delete:
      summary: Delete an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: deleteArticle
      description: You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '13'
                    object: article
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_article_object"
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: 2bcd9d58-da1c-424e-affd-81c80bb543d7
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1e1b6a2a-f5f3-49b1-a23f-ce7851b32823
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/articles/search":
    get:
      summary: Search for articles
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: phrase
        in: query
        required: false
        description: The phrase within your articles to search for.
        example: Getting started
        schema:
          type: string
      - name: state
        in: query
        required: false
        description: The state of the Articles returned. One of `published`, `draft`
          or `all`.
        example: published
        schema:
          type: string
      - name: help_center_id
        in: query
        required: false
        description: The ID of the Help Center to search in.
        example: 123
        schema:
          type: integer
      - name: highlight
        in: query
        required: false
        description: Return a highlighted version of the matching content within your
          articles. Refer to the response schema for more details.
        example: false
        schema:
          type: boolean
      tags:
      - Articles
      operationId: searchArticles
      description: You can search for articles by making a GET request to `https://api.intercom.io/articles/search`.
      responses:
        '200':
          description: Search successful
          content:
            application/json:
              examples:
                Search successful:
                  value:
                    type: list
                    total_count: 1
                    data:
                      articles:
                      - id: '17'
                        type: article
                        workspace_id: this_is_an_id92_that_should_be_at_least_4
                        parent_id:
                        parent_type:
                        parent_ids: []
                        title: Title 1
                        description: ''
                        body: ''
                        author_id: 991266276
                        state: draft
                        created_at: 1715085033
                        updated_at: 1715085033
                        url:
                      highlights: []
                    pages:
                      type: pages
                      page: 1
                      total_pages: 1
                      per_page: 10
              schema:
                "$ref": "#/components/schemas/article_search_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6bf76a37-5562-4493-a07d-0c18e4e5f64d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/help_center/collections":
    get:
      summary: List all collections
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: listAllCollections
      description: |
        You can fetch a list of all collections by making a GET request to `https://api.intercom.io/help_center/collections`.

        Collections will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated collections first.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - id: '17'
                      workspace_id: this_is_an_id96_that_should_be_at_least_4
                      name: English collection title
                      url: http://help-center.test/myapp-96/collection-17
                      order: 17
                      created_at: 1715085034
                      updated_at: 1715085034
                      description: english collection description
                      icon: bookmark
                      parent_id:
                      help_center_id: 17
                    - id: '18'
                      workspace_id: this_is_an_id96_that_should_be_at_least_4
                      name: English section title
                      url: http://help-center.test/myapp-96/section-1
                      order: 1
                      created_at: 1715085034
                      updated_at: 1715085034
                      description:
                      icon: bookmark
                      parent_id: '17'
                      help_center_id:
                    total_count: 2
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
              schema:
                "$ref": "#/components/schemas/collection_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 986089d8-791b-4cb2-9e76-f4e3bca1a9ed
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: createCollection
      description: You can create a new collection by making a POST request to `https://api.intercom.io/help_center/collections.`
      responses:
        '200':
          description: collection created
          content:
            application/json:
              examples:
                collection created:
                  value:
                    id: '23'
                    workspace_id: this_is_an_id100_that_should_be_at_least_
                    name: Thanks for everything
                    url: http://help-center.test/myapp-100/
                    order: 1
                    created_at: 1715085035
                    updated_at: 1715085035
                    description: ''
                    icon: book-bookmark
                    parent_id:
                    help_center_id: 19
              schema:
                "$ref": "#/components/schemas/collection"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 3229b97d-67ef-4339-a845-4591d36ca27d
                    errors:
                    - code: parameter_not_found
                      message: Name is a required parameter.
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 559ca789-0339-47d2-a502-d3822b703386
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_collection_request"
            examples:
              collection_created:
                summary: collection created
                value:
                  name: Thanks for everything
              bad_request:
                summary: Bad Request
                value:
                  description: Missing required parameter
  "/help_center/collections/{id}":
    get:
      summary: Retrieve a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: retrieveCollection
      description: You can fetch the details of a single collection by making a GET
        request to `https://api.intercom.io/help_center/collections/<id>`.
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              examples:
                Collection found:
                  value:
                    id: '28'
                    workspace_id: this_is_an_id106_that_should_be_at_least_
                    name: English collection title
                    url: http://help-center.test/myapp-106/collection-22
                    order: 22
                    created_at: 1715085036
                    updated_at: 1715085036
                    description: english collection description
                    icon: bookmark
                    parent_id:
                    help_center_id: 22
              schema:
                "$ref": "#/components/schemas/collection"
        '404':
          description: Collection not found
          content:
            application/json:
              examples:
                Collection not found:
                  value:
                    type: error.list
                    request_id: 5f947289-0092-4560-a0ed-9968dbb8948e
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fe9156ce-7adc-4fc3-8e67-3bf7c4ce313e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: updateCollection
      description: You can update the details of a single collection by making a PUT
        request to `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '34'
                    workspace_id: this_is_an_id112_that_should_be_at_least_
                    name: Update collection name
                    url: http://help-center.test/myapp-112/collection-25
                    order: 25
                    created_at: 1715085038
                    updated_at: 1715085038
                    description: english collection description
                    icon: folder
                    parent_id:
                    help_center_id: 25
              schema:
                "$ref": "#/components/schemas/collection"
        '404':
          description: Collection Not Found
          content:
            application/json:
              examples:
                Collection Not Found:
                  value:
                    type: error.list
                    request_id: 9c601aaf-4935-4abc-90be-212454fe19de
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1f4f2e11-e365-4124-aee2-1de8a5e112c1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_collection_request"
            examples:
              successful:
                summary: successful
                value:
                  name: Update collection name
              collection_not_found:
                summary: Collection Not Found
                value:
                  name: Update collection name
    delete:
      summary: Delete a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: deleteCollection
      description: You can delete a single collection by making a DELETE request to
        `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '40'
                    object: collection
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_collection_object"
        '404':
          description: collection Not Found
          content:
            application/json:
              examples:
                collection Not Found:
                  value:
                    type: error.list
                    request_id: 7457b974-75ca-4c63-9d61-895205b55fe5
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b8a979a3-aeba-4577-8223-f1d6de647160
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/help_center/help_centers/{id}":
    get:
      summary: Retrieve a Help Center
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: retrieveHelpCenter
      description: You can fetch the details of a single Help Center by making a GET
        request to `https://api.intercom.io/help_center/help_center/<id>`.
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              examples:
                Collection found:
                  value:
                    id: '31'
                    workspace_id: this_is_an_id124_that_should_be_at_least_
                    created_at: 1715085041
                    updated_at: 1715085041
                    identifier: help-center-1
                    website_turned_on: false
                    display_name: Intercom Help Center
              schema:
                "$ref": "#/components/schemas/help_center"
        '404':
          description: Collection not found
          content:
            application/json:
              examples:
                Collection not found:
                  value:
                    type: error.list
                    request_id: c7241c48-e0d3-4a1f-9b62-afd044cf3fd0
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2edd0192-4095-446e-b9aa-446d953e0f79
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/help_center/help_centers":
    get:
      summary: List all Help Centers
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: listHelpCenters
      description: You can list all Help Centers by making a GET request to `https://api.intercom.io/help_center/help_centers`.
      responses:
        '200':
          description: Help Centers found
          content:
            application/json:
              examples:
                Help Centers found:
                  value:
                    type: list
                    data: []
              schema:
                "$ref": "#/components/schemas/help_center_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 72b330f1-5ca8-4784-ba4e-5008d4f7fbe2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies":
    post:
      summary: Create or Update a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Companies
      operationId: createOrUpdateCompany
      description: |
        You can create or update a company.

        Companies will be only visible in Intercom when there is at least one associated user.

        Companies are looked up via `company_id` in a `POST` request, if not found via `company_id`, the new company will be created, if found, that company will be updated.

        {% admonition type="attention" name="Using `company_id`" %}
          You can set a unique `company_id` value when creating a company. However, it is not possible to update `company_id`. Be sure to set a unique value once upon creation of the company.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: company_remote_id
                    id: 663a1ef50a29ce1b24740ef5
                    app_id: this_is_an_id147_that_should_be_at_least_
                    name: my company
                    remote_created_at: 1374138000
                    created_at: 1715085045
                    updated_at: 1715085045
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes:
                      creation_source: api
              schema:
                "$ref": "#/components/schemas/company"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id:
                    errors:
                    - code: bad_request
                      message: bad 'test' parameter
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f71c6b67-62e0-4b15-905c-eea8b65abe67
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_or_update_company_request"
            examples:
              successful:
                summary: Successful
                value:
                  company_id: company_remote_id
                  name: my company
                  remote_created_at: 1374138000
              bad_request:
                summary: Bad Request
                value:
                  test: invalid
    get:
      summary: Retrieve companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: name
        in: query
        required: false
        description: The `name` of the company to filter by.
        example: my company
        schema:
          type: string
      - name: company_id
        in: query
        required: false
        description: The `company_id` of the company to filter by.
        example: '12345'
        schema:
          type: string
      - name: tag_id
        in: query
        required: false
        description: The `tag_id` of the company to filter by.
        example: '678910'
        schema:
          type: string
      - name: segment_id
        in: query
        required: false
        description: The `segment_id` of the company to filter by.
        example: '98765'
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: The page of results to fetch. Defaults to first page
        example: 1
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: How many results to display per page. Defaults to 15
        example: 15
        schema:
          type: integer
      tags:
      - Companies
      operationId: retrieveCompany
      description: |
        You can fetch a single company by passing in `company_id` or `name`.

          `https://api.intercom.io/companies?name={name}`

          `https://api.intercom.io/companies?company_id={company_id}`

        You can fetch all companies and filter by `segment_id` or `tag_id` as a query parameter.

          `https://api.intercom.io/companies?tag_id={tag_id}`

          `https://api.intercom.io/companies?segment_id={segment_id}`
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: remote_companies_scroll_2
                      id: 663a1ef70a29ce1b24740efd
                      app_id: this_is_an_id153_that_should_be_at_least_
                      name: IntercomQATest1
                      remote_created_at: 1715085047
                      created_at: 1715085047
                      updated_at: 1715085047
                      monthly_spend: 0
                      session_count: 0
                      user_count: 4
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 15
                      total_pages: 1
                    total_count: 1
              schema:
                "$ref": "#/components/schemas/company_list"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 6db29cdb-5e83-4760-bbe3-b18fe29b84b1
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 346b7f01-54c5-4149-9287-e4097d8d8908
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}":
    get:
      summary: Retrieve a company by ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: RetrieveACompanyById
      description: You can fetch a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 663a1efa0a29ce1b24740f08
                    app_id: this_is_an_id159_that_should_be_at_least_
                    name: company1
                    remote_created_at: 1715085050
                    created_at: 1715085050
                    updated_at: 1715085050
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 5dea0598-f71e-4410-ab7c-16bf061d17ad
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a45013ee-c5f9-43f2-9329-134513479353
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: UpdateCompany
      description: |
        You can update a single company using the Intercom provisioned `id`.

        {% admonition type="attention" name="Using `company_id`" %}
          When updating a company it is not possible to update `company_id`. This can only be set once upon creation of the company.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 663a1efc0a29ce1b24740f12
                    app_id: this_is_an_id165_that_should_be_at_least_
                    name: company2
                    remote_created_at: 1715085052
                    created_at: 1715085052
                    updated_at: 1715085052
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 10f297db-bec3-401e-925f-b588ead9efa5
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 161590ac-b64a-4537-acf3-40cd256663d6
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: deleteCompany
      description: You can delete a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 663a1efe0a29ce1b24740f1c
                    object: company
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_company_object"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 22e8be82-3b44-47a8-8e2a-8f55ed426881
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9f75bc72-c7a2-4578-ba9c-efa5833ac923
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}/contacts":
    get:
      summary: List attached contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: ListAttachedContacts
      description: You can fetch a list of all contacts that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/company_attached_contacts"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 2ee789ad-c9d0-41c8-b0c1-a4c9539bec86
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 36e183a2-072a-402a-bc11-6e40711b2f9d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}/segments":
    get:
      summary: List attached segments for companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: ListAttachedSegmentsForCompanies
      description: You can fetch a list of all segments that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
              schema:
                "$ref": "#/components/schemas/company_attached_segments"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 213f7731-0517-4095-952a-2e4b0e0436c1
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ac229585-b507-48f6-b47c-fb19e8c2e198
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/list":
    post:
      summary: List all companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: page
        in: query
        required: false
        description: The page of results to fetch. Defaults to first page
        example: 1
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: How many results to return per page. Defaults to 15
        example: 15
        schema:
          type: integer
      - name: order
        in: query
        required: false
        description: "`asc` or `desc`. Return the companies in ascending or descending
          order. Defaults to desc"
        example: desc
        schema:
          type: string
      tags:
      - Companies
      operationId: listAllCompanies
      description: |
        You can list companies. The company list is sorted by the `last_request_at` field and by default is ordered descending, most recently requested first.

        Note that the API does not include companies who have no associated users in list responses.

        When using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the [Scroll API](https://developers.intercom.com/reference#iterating-over-all-companies).
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: remote_companies_scroll_2
                      id: 663a1f040a29ce1b24740f38
                      app_id: this_is_an_id189_that_should_be_at_least_
                      name: IntercomQATest1
                      remote_created_at: 1715085060
                      created_at: 1715085060
                      updated_at: 1715085060
                      monthly_spend: 0
                      session_count: 0
                      user_count: 4
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 15
                      total_pages: 1
                    total_count: 1
              schema:
                "$ref": "#/components/schemas/company_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 54b942f8-a0cd-45dc-b1c3-6c245bc7ad87
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/scroll":
    get:
      summary: Scroll over all companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: scroll_param
        in: query
        required: false
        description: ''
        schema:
          type: string
      tags:
      - Companies
      operationId: scrollOverAllCompanies
      description: |2
              The `list all companies` functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.

        - Each app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.
        - If the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail
        - If the end of the scroll is reached, "companies" will be empty and the scroll parameter will expire

        {% admonition type="info" name="Scroll Parameter" %}
          You can get the first page of companies by simply sending a GET request to the scroll endpoint.
          For subsequent requests you will need to use the scroll parameter from the response.
        {% /admonition %}
        {% admonition type="danger" name="Scroll network timeouts" %}
          Since scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will see a HTTP 500 error with the following message:
          "Request failed due to an internal network error. Please restart the scroll operation."
          If this happens, you will need to restart your scroll query: It is not possible to continue from a specific point when using scroll.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: remote_companies_scroll_2
                      id: 663a1f060a29ce1b24740f3e
                      app_id: this_is_an_id193_that_should_be_at_least_
                      name: IntercomQATest1
                      remote_created_at: 1715085062
                      created_at: 1715085062
                      updated_at: 1715085062
                      monthly_spend: 0
                      session_count: 0
                      user_count: 4
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                    total_count:
                    scroll_param: 9cb96299-3921-4906-b96b-377e3cc6455a
              schema:
                "$ref": "#/components/schemas/company_scroll"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 150f8da6-60fc-424b-9b1e-1bc3d5954364
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}/companies":
    post:
      summary: Attach a Contact to a Company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the contact which is given by Intercom
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: attachContactToACompany
      description: You can attach a company to a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 663a1f070a29ce1b24740f47
                    app_id: this_is_an_id197_that_should_be_at_least_
                    name: company6
                    remote_created_at: 1715085063
                    created_at: 1715085063
                    updated_at: 1715085063
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 8e703cda-17b2-449e-9409-31bf2cfd27c4
                    errors:
                    - code: parameter_not_found
                      message: company not specified
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: d1c38467-46f9-47a2-a8e2-4f55d566d030
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 279cb9c5-dfa4-47b9-9320-61c0f5fd83ce
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the company which is given
                    by Intercom
                  example: 58a430d35458202d41b1e65b
            examples:
              successful:
                summary: Successful
                value:
                  id: 663a1f070a29ce1b24740f47
              bad_request:
                summary: Bad Request
                value:
              company_not_found:
                summary: Company Not Found
                value:
                  id: '123'
    get:
      summary: List attached companies for contact
      parameters:
      - name: id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Companies
      operationId: listCompaniesForAContact
      description: You can fetch a list of companies that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: '1'
                      id: 663a1f0d0a29ce1b24740f68
                      app_id: this_is_an_id213_that_should_be_at_least_
                      name: company12
                      remote_created_at: 1715085069
                      created_at: 1715085069
                      updated_at: 1715085069
                      last_request_at: 1714912269
                      monthly_spend: 0
                      session_count: 0
                      user_count: 1
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 1
              schema:
                "$ref": "#/components/schemas/contact_attached_companies"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: f9cb7c30-f50d-4c1d-847b-1d6192bf60fc
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e5dbea81-da52-4094-9d8f-041ccbdd63b1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/companies/{id}":
    delete:
      summary: Detach a contact from a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        required: true
        description: The unique identifier for the contact which is given by Intercom
        example: 58a430d35458202d41b1e65b
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 58a430d35458202d41b1e65b
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: detachContactFromACompany
      description: You can detach a company from a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 663a1f0a0a29ce1b24740f57
                    app_id: this_is_an_id205_that_should_be_at_least_
                    name: company8
                    remote_created_at: 1715085066
                    created_at: 1715085066
                    updated_at: 1715085067
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 461b3d4e-ef63-4229-91ce-16ae20975086
                    errors:
                    - code: company_not_found
                      message: Company Not Found
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: 274e945c-7a6b-4f76-9afe-caf7f3f01a27
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 10c54dcd-537f-4796-b4aa-97fa219e2a8e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}/notes":
    get:
      summary: List all notes
      parameters:
      - name: id
        in: path
        required: true
        description: The unique identifier of a contact.
        schema:
          type: integer
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Notes
      - Contacts
      operationId: listNotes
      description: You can fetch a list of notes that are associated to a contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                    - type: note
                      id: '3'
                      created_at: 1714480272
                      contact:
                        type: contact
                        id: 663a1f100a29ce1b24740f73
                      author:
                        type: admin
                        id: '991266336'
                        name: Ciaran122 Lee
                        email: admin122@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    - type: note
                      id: '2'
                      created_at: 1714393872
                      contact:
                        type: contact
                        id: 663a1f100a29ce1b24740f73
                      author:
                        type: admin
                        id: '991266336'
                        name: Ciaran122 Lee
                        email: admin122@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    - type: note
                      id: '1'
                      created_at: 1714393872
                      contact:
                        type: contact
                        id: 663a1f100a29ce1b24740f73
                      author:
                        type: admin
                        id: '991266336'
                        name: Ciaran122 Lee
                        email: admin122@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    total_count: 3
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 50
                      total_pages: 1
              schema:
                "$ref": "#/components/schemas/note_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: d1bcf591-9647-41cd-90b2-a8cc07316dd9
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a note
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given contact.
        example: '123'
        schema:
          type: integer
      tags:
      - Notes
      - Contacts
      operationId: createNote
      description: You can add a note to a single contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: note
                    id: '8'
                    created_at: 1715085073
                    contact:
                      type: contact
                      id: 663a1f110a29ce1b24740f75
                    author:
                      type: admin
                      id: '991266338'
                      name: Ciaran124 Lee
                      email: admin124@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: "<p>Hello</p>"
              schema:
                "$ref": "#/components/schemas/note"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: d399d642-654d-47d5-b0f2-9a3636eaa108
                    errors:
                    - code: not_found
                      message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: 39cfae35-ca25-4ea9-9994-e57996406d0f
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - body
              properties:
                body:
                  type: string
                  description: The text of the note.
                  example: New note
                contact_id:
                  type: string
                  description: The unique identifier of a given contact.
                  example: '123'
                admin_id:
                  type: string
                  description: The unique identifier of a given admin.
                  example: '123'
            examples:
              successful_response:
                summary: Successful response
                value:
                  contact_id: 663a1f110a29ce1b24740f75
                  admin_id: 991266338
                  body: Hello
              admin_not_found:
                summary: Admin not found
                value:
                  contact_id: 663a1f110a29ce1b24740f76
                  admin_id: 123
                  body: Hello
              contact_not_found:
                summary: Contact not found
                value:
                  contact_id: 123
                  admin_id: 991266340
                  body: Hello
  "/contacts/{contact_id}/segments":
    get:
      summary: List attached segments for contact
      parameters:
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Segments
      operationId: listSegmentsForAContact
      description: You can fetch a list of segments that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: segment
                      id: 663a1f120a29ce1b24740f78
                      name: segment
                      created_at: 1715085074
                      updated_at: 1715085074
                      person_type: user
              schema:
                "$ref": "#/components/schemas/contact_segments"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 24d12395-2591-4a45-94e3-e5b09663e818
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 319d1177-1be5-4578-b3f8-8ce52e53fd57
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/subscriptions":
    get:
      summary: List subscriptions for a contact
      parameters:
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Subscription Types
      operationId: listSubscriptionsForAContact
      description: |
        You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type.
        This will return a list of Subscription Type objects that the contact is associated with.

        The data property will show a combined list of:

          1.Opt-out subscription types that the user has opted-out from.
          2.Opt-in subscription types that the user has opted-in to receiving.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: subscription
                      id: '1'
                      state: live
                      consent_type: opt_out
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - email
                    - type: subscription
                      id: '3'
                      state: live
                      consent_type: opt_in
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: f2c5dd0c-741b-446d-916a-39e3c8881c2a
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ba18a4a2-a5df-4501-83ca-ddef1d9948cd
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Add subscription to a contact
      tags:
      - Subscription Types
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: attachSubscriptionTypeToContact
      description: |
        You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:

          1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.

          2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.

        This will return a subscription type model for the subscription type that was added to the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '16'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                    - name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    content_types:
                    - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type"
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: cf835ff5-fdbb-4ee4-a0ee-76a5325809fb
                    errors:
                    - code: not_found
                      message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: 3f145fc9-1243-4379-8ab2-158dbd781c51
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3ab2601c-acf4-4ede-b2d8-5ec0a9f6d046
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - consent_type
              properties:
                id:
                  type: string
                  description: The unique identifier for the subscription which is
                    given by Intercom
                  example: '37846'
                consent_type:
                  type: string
                  description: The consent_type of a subscription, opt_out or opt_in.
                  example: opt_in
            examples:
              successful:
                summary: Successful
                value:
                  id: 16
                  consent_type: opt_in
              contact_not_found:
                summary: Contact not found
                value:
                  id: 20
                  consent_type: opt_in
              resource_not_found:
                summary: Resource not found
                value:
                  id: invalid_id
                  consent_type: opt_in
  "/contacts/{contact_id}/subscriptions/{id}":
    delete:
      summary: Remove subscription from a contact
      tags:
      - Subscription Types
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The unique identifier for the subscription type which is given
          by Intercom
        example: '37846'
        required: true
        schema:
          type: string
      operationId: detachSubscriptionTypeToContact
      description: You can remove a specific subscription from a contact. This will
        return a subscription type model for the subscription type that was removed
        from the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '32'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                    - name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    content_types:
                    - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type"
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 431a4245-dd78-4df0-8a92-fcde095980ea
                    errors:
                    - code: not_found
                      message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: a7870430-2780-4008-84f4-3422ff9585f6
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2f3fddcb-d46b-47d7-b09c-647fe21722c2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/tags":
    get:
      summary: List tags attached to a contact
      tags:
      - Contacts
      - Tags
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: listTagsForAContact
      description: You can fetch a list of all tags that are attached to a specific
        contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: tag
                      id: '1'
                      name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: d9db7f03-7a61-4075-8999-040131ad5300
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f650bcf4-2095-4f10-8f66-4d6681758131
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Add tag to a contact
      tags:
      - Tags
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: attachTagToContact
      description: You can tag a specific contact. This will return a tag object for
        the tag that was added to the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '2'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 2cd296fa-1055-4bbb-af28-dbfd9240b9a2
                    errors:
                    - code: not_found
                      message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: 07b072c2-062b-462a-83cf-ab4efc85affa
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5a86f89d-95d9-48ef-a2b9-1b14955eb83b
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
            examples:
              successful:
                summary: successful
                value:
                  id: 2
              contact_not_found:
                summary: Contact not found
                value:
                  id: 3
              tag_not_found:
                summary: Tag not found
                value:
                  id: '123'
  "/contacts/{contact_id}/tags/{id}":
    delete:
      summary: Remove tag from a contact
      tags:
      - Tags
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The unique identifier for the tag which is given by Intercom
        example: '7522907'
        required: true
        schema:
          type: string
      operationId: detachTagFromContact
      description: You can remove tag from a specific contact. This will return a
        tag object for the tag that was removed from the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '5'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 555c2a43-8398-46bc-b9ed-5edf248f92c8
                    errors:
                    - code: not_found
                      message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: fb24fd8c-66eb-4a41-b915-6541d87dd15c
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 126c119f-9e4a-4899-9ccc-1b8f2f117300
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}":
    put:
      summary: Update a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: UpdateContact
      description: You can update an existing contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a1f1f0a29ce1b24740f8f
                    workspace_id: this_is_an_id279_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joebloggs@intercom.io
                    phone:
                    formatted_phone:
                    name: joe bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085087
                    updated_at: 1715085088
                    signed_up_at: 1715085087
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a1f1f0a29ce1b24740f8f/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a1f1f0a29ce1b24740f8f/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a1f1f0a29ce1b24740f8f/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f1f0a29ce1b24740f8f/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f1f0a29ce1b24740f8f/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 59f0116e-0265-4461-940a-713df3961e2d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/update_contact_request"
            examples:
              successful:
                summary: successful
                value:
                  email: joebloggs@intercom.io
                  name: joe bloggs
    get:
      summary: Get a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: ShowContact
      description: You can fetch the details of a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a1f210a29ce1b24740f90
                    workspace_id: this_is_an_id283_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085089
                    updated_at: 1715085089
                    signed_up_at: 1715085089
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a1f210a29ce1b24740f90/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a1f210a29ce1b24740f90/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a1f210a29ce1b24740f90/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f210a29ce1b24740f90/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f210a29ce1b24740f90/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e8f458b1-1af1-4399-b230-b328f97145be
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: DeleteContact
      description: You can delete a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 663a1f220a29ce1b24740f91
                    external_id: '70'
                    type: contact
                    deleted: true
              schema:
                "$ref": "#/components/schemas/contact_deleted"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 75a26b0e-9541-4717-aba6-2ebf652de43a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/merge":
    post:
      summary: Merge a lead and a user
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: MergeContact
      description: You can merge a contact with a `role` of `lead` into a contact
        with a `role` of `user`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a1f230a29ce1b24740f93
                    workspace_id: this_is_an_id291_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085091
                    updated_at: 1715085092
                    signed_up_at: 1715085091
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a1f230a29ce1b24740f93/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a1f230a29ce1b24740f93/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a1f230a29ce1b24740f93/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f230a29ce1b24740f93/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f230a29ce1b24740f93/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5bd963a5-4729-4d12-aa4c-0b94beb42a6d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/merge_contacts_request"
            examples:
              successful:
                summary: successful
                value:
                  from: 663a1f230a29ce1b24740f92
                  into: 663a1f230a29ce1b24740f93
  "/contacts/search":
    post:
      summary: Search contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: SearchContacts
      description: |
        You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.

        To search for contacts, you need to send a `POST` request to `https://api.intercom.io/contacts/search`.

        This will accept a query object in the body which will define your filters in order to search for contacts.

        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `50` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}
        ### Contact Creation Delay

        If a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified it is recommended to use webhooks and iterate to see if they match your search filters.

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiple's there can be:
        * There's a limit of max 2 nested filters
        * There's a limit of max 15 filters for each AND or OR group

        ### Searching for Timestamp Fields

        All timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.
        For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.
        If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).
        This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.

        ### Accepted Fields

        Most key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).

        | Field                              | Type                           |
        | ---------------------------------- | ------------------------------ |
        | id                                 | String                         |
        | role                               | String<br>Accepts user or lead |
        | name                               | String                         |
        | avatar                             | String                         |
        | owner_id                           | Integer                        |
        | email                              | String                         |
        | email_domain                       | String                         |
        | phone                              | String                         |
        | formatted_phone                    | String                         |
        | external_id                        | String                         |
        | created_at                         | Date (UNIX Timestamp)          |
        | signed_up_at                       | Date (UNIX Timestamp)          |
        | updated_at                         | Date (UNIX Timestamp)          |
        | last_seen_at                       | Date (UNIX Timestamp)          |
        | last_contacted_at                  | Date (UNIX Timestamp)          |
        | last_replied_at                    | Date (UNIX Timestamp)          |
        | last_email_opened_at               | Date (UNIX Timestamp)          |
        | last_email_clicked_at              | Date (UNIX Timestamp)          |
        | language_override                  | String                         |
        | browser                            | String                         |
        | browser_language                   | String                         |
        | os                                 | String                         |
        | location.country                   | String                         |
        | location.region                    | String                         |
        | location.city                      | String                         |
        | unsubscribed_from_emails           | Boolean                        |
        | marked_email_as_spam               | Boolean                        |
        | has_hard_bounced                   | Boolean                        |
        | ios_last_seen_at                   | Date (UNIX Timestamp)          |
        | ios_app_version                    | String                         |
        | ios_device                         | String                         |
        | ios_app_device                     | String                         |
        | ios_os_version                     | String                         |
        | ios_app_name                       | String                         |
        | ios_sdk_version                    | String                         |
        | android_last_seen_at               | Date (UNIX Timestamp)          |
        | android_app_version                | String                         |
        | android_device                     | String                         |
        | android_app_name                   | String                         |
        | andoid_sdk_version                 | String                         |
        | segment_id                         | String                         |
        | tag_id                             | String                         |
        | custom_attributes.{attribute_name} | String                         |

        ### Accepted Operators

        {% admonition type="attention" name="Searching based on `created_at`" %}
          You cannot use the `<=` or `>=` operators to search by `created_at`.
        {% /admonition %}

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                      | Description                                                      |
        | :------- | :------------------------------- | :--------------------------------------------------------------- |
        | =        | All                              | Equals                                                           |
        | !=       | All                              | Doesn't Equal                                                    |
        | IN       | All                              | In<br>Shortcut for `OR` queries<br>Values must be in Array       |
        | NIN      | All                              | Not In<br>Shortcut for `OR !` queries<br>Values must be in Array |
        | >        | Integer<br>Date (UNIX Timestamp) | Greater than                                                     |
        | <       | Integer<br>Date (UNIX Timestamp) | Lower than                                                       |
        | ~        | String                           | Contains                                                         |
        | !~       | String                           | Doesn't Contain                                                  |
        | ^        | String                           | Starts With                                                      |
        | $        | String                           | Ends With                                                        |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/contact_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 69050fdb-3d5c-4c9c-9d06-85d2194b38ad
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/search_request"
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                    - field: id
                      operator: "="
                      value: 663a1f250a29ce1b24740f96
                    - operator: OR
                      value:
                      - field: id
                        operator: "="
                        value: 663a1f250a29ce1b24740f96
                      - field: id
                        operator: "="
                        value: 663a1f250a29ce1b24740f96
  "/contacts":
    get:
      summary: List all contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: ListContacts
      description: |
        You can fetch a list of all contacts (ie. users or leads) in your workspace.
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `50` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 10
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/contact_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3be0f95c-8c69-42d3-a147-711027ff6371
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: CreateContact
      description: You can create a new contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a1f280a29ce1b24740f98
                    workspace_id: this_is_an_id303_that_should_be_at_least_
                    external_id:
                    role: user
                    email: joebloggs@intercom.io
                    phone:
                    formatted_phone:
                    name:
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085096
                    updated_at: 1715085096
                    signed_up_at:
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a1f280a29ce1b24740f98/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a1f280a29ce1b24740f98/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a1f280a29ce1b24740f98/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f280a29ce1b24740f98/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f280a29ce1b24740f98/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dbcb35cd-70ef-4571-bd1a-4ac43ad9e82b
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/create_contact_request"
            examples:
              successful:
                summary: successful
                value:
                  email: joebloggs@intercom.io
  "/contacts/find_by_external_id/{external_id}":
    get:
      summary: Get a contact by External ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: external_id
        in: path
        required: true
        example: cdd29344-5e0c-4ef0-ac56-f9ba2979bc27
        description: The external ID of the user that you want to retrieve
        schema:
          type: string
      tags:
      - Contacts
      operationId: ShowContactByExternalId
      description: You can fetch the details of a single contact by external ID. Note
        that this endpoint only supports users and not leads.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a1f290a29ce1b24740f99
                    workspace_id: this_is_an_id307_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085097
                    updated_at: 1715085097
                    signed_up_at: 1715085097
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a1f290a29ce1b24740f99/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a1f290a29ce1b24740f99/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a1f290a29ce1b24740f99/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f290a29ce1b24740f99/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a1f290a29ce1b24740f99/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5c42ac03-70a4-4af8-bd75-ae33661a36d9
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}/archive":
    post:
      summary: Archive contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: ArchiveContact
      description: You can archive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 663a1f2a0a29ce1b24740f9b
                    external_id: '70'
                    type: contact
                    archived: true
              schema:
                "$ref": "#/components/schemas/contact_archived"
  "/contacts/{id}/unarchive":
    post:
      summary: Unarchive contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: UnarchiveContact
      description: You can unarchive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 663a1f2b0a29ce1b24740f9c
                    external_id: '70'
                    type: contact
                    archived: false
              schema:
                "$ref": "#/components/schemas/contact_unarchived"
  "/conversations/{conversation_id}/tags":
    post:
      summary: Add tag to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        description: conversation_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Conversations
      operationId: attachTagToConversation
      description: You can tag a specific conversation. This will return a tag object
        for the tag that was added to the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '7'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Conversation not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 92102acd-566f-4156-8cbb-21de898e9c2c
                    errors:
                    - code: not_found
                      message: Conversation not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ad1f2515-67ea-4a78-84a1-23fa62eeb31f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - admin_id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '780'
            examples:
              successful:
                summary: successful
                value:
                  id: 7
                  admin_id: 991266373
              conversation_not_found:
                summary: Conversation not found
                value:
                  id: 8
                  admin_id: 991266375
  "/conversations/{conversation_id}/tags/{id}":
    delete:
      summary: Remove tag from a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        description: conversation_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id
        example: '7522907'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Conversations
      operationId: detachTagFromConversation
      description: You can remove tag from a specific conversation. This will return
        a tag object for the tag that was removed from the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '10'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 3cd7783d-cf0e-4bf6-b68d-9a049e32480e
                    errors:
                    - code: not_found
                      message: Conversation not found
                Tag not found:
                  value:
                    type: error.list
                    request_id: 61a32aa6-e7e4-4b3f-ab07-70ed505bb5ec
                    errors:
                    - code: tag_not_found
                      message: Tag not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2055abd3-e1ca-4fd0-aa55-bb178b080673
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - admin_id
              properties:
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '123'
            examples:
              successful:
                summary: successful
                value:
                  admin_id: 991266377
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991266379
              tag_not_found:
                summary: Tag not found
                value:
                  admin_id: 991266380
  "/conversations":
    get:
      summary: List all conversations
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: per_page
        in: query
        schema:
          type: integer
          default: 20
          maximum: 150
        required: false
        description: How many results per page
      - name: starting_after
        in: query
        required: false
        description: String used to get the next page of conversations.
        schema:
          type: string
      tags:
      - Conversations
      operationId: listConversations
      description: |
        You can fetch a list of all conversations.

        You can optionally request the result page size and the cursor to start after to fetch the result.
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
                    total_count: 1
                    conversations:
                    - type: conversation
                      id: '5'
                      created_at: 1715085108
                      updated_at: 1715085108
                      waiting_since:
                      snoozed_until:
                      source:
                        type: conversation
                        id: '403918065'
                        delivered_as: admin_initiated
                        subject: ''
                        body: "<p>this is the message body</p>"
                        author:
                          type: admin
                          id: '991266383'
                          name: Ciaran166 Lee
                          email: admin166@email.com
                        attachments: []
                        url:
                        redacted: false
                      contacts:
                        type: contact.list
                        contacts:
                        - type: contact
                          id: 663a1f340a29ce1b24740fa0
                          external_id: '70'
                      first_contact_reply:
                      admin_assignee_id:
                      team_assignee_id:
                      open: false
                      state: closed
                      read: false
                      tags:
                        type: tag.list
                        tags: []
                      priority: not_priority
                      sla_applied:
                      statistics:
                      conversation_rating:
                      teammates:
                      title:
                      custom_attributes: {}
                      topics: {}
                      ticket:
                      linked_objects:
                        type: list
                        data: []
                        total_count: 0
                        has_more: false
                      ai_agent:
                      ai_agent_participated: false
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ee007805-0e2f-42b1-85ec-ed18ffeaebaa
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 46c8d63d-a7dc-485d-b639-c5a3cc231276
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: createConversation
      description: |+
        You can create a conversation that has been initiated by a contact (ie. user or lead).
        The conversation can be an in-app message only.

        {% admonition type="info" name="Sending for visitors" %}
        You can also send a message from a visitor by specifying their `user_id` or `id` value in the `from` field, along with a `type` field value of `contact`.
        This visitor will be automatically converted to a contact with a lead role once the conversation is created.
        {% /admonition %}

        This will return the Message model that has been created.

      responses:
        '200':
          description: conversation created
          content:
            application/json:
              examples:
                conversation created:
                  value:
                    type: user_message
                    id: '403918075'
                    created_at: 1715085128
                    body: Hello there
                    message_type: inapp
                    conversation_id: '33'
              schema:
                "$ref": "#/components/schemas/message"
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: f609167c-2bf6-4816-acc7-213e98b4c6ea
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 81102417-d668-45c3-bbb7-80a04a567c6d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 2e6a0a4b-7255-4619-8601-0991cfb36f52
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_conversation_request"
            examples:
              conversation_created:
                summary: conversation created
                value:
                  from:
                    type: user
                    id: 663a1f470a29ce1b24740fb8
                  body: Hello there
              contact_not_found:
                summary: Contact Not Found
                value:
                  from:
                    type: user
                    id: 123_doesnt_exist
                  body: Hello there
  "/conversations/{id}":
    get:
      summary: Retrieve a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The id of the conversation to target
        example: 123
        schema:
          type: integer
      - name: display_as
        in: query
        required: false
        description: Set to plaintext to retrieve conversation messages in plain text.
        example: plaintext
        schema:
          type: string
      tags:
      - Conversations
      operationId: retrieveConversation
      description: |2

        You can fetch the details of a single conversation.

        This will return a single Conversation model with all its conversation parts.

        {% admonition type="warning" name="Hard limit of 500 parts" %}
        The maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.
        {% /admonition %}

        For AI agent conversation metadata, please note that you need to have the agent enabled in your workspace, which is a [paid feature](https://www.intercom.com/help/en/articles/8205718-fin-resolutions#h_97f8c2e671).
      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '37'
                    created_at: 1715085133
                    updated_at: 1715085133
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918079'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266400'
                        name: Ciaran176 Lee
                        email: admin176@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f4d0a29ce1b24740fbc
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts: []
                      total_count: 0
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 77b8dd30-4722-491a-83a8-b08e282ab090
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 32fadcda-32c8-4de3-b074-000585885fdf
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 44e5dec1-c830-4f80-94b3-4ccfa5647c9f
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The id of the conversation to target
        example: 123
        schema:
          type: integer
      - name: display_as
        in: query
        required: false
        description: Set to plaintext to retrieve conversation messages in plain text.
        example: plaintext
        schema:
          type: string
      tags:
      - Conversations
      operationId: updateConversation
      description: |2+

        You can update an existing conversation.

        {% admonition type="info" name="Replying and other actions" %}
        If you want to reply to a coveration or take an action such as assign, unassign, open, close or snooze, take a look at the reply and manage endpoints.
        {% /admonition %}

      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '41'
                    created_at: 1715085138
                    updated_at: 1715085139
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918083'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266408'
                        name: Ciaran180 Lee
                        email: admin180@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f520a29ce1b24740fc0
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes:
                      issue_type: Billing
                      priority: High
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '4'
                        part_type: conversation_attribute_updated_by_admin
                        body:
                        created_at: 1715085139
                        updated_at: 1715085139
                        notified_at: 1715085139
                        assigned_to:
                        author:
                          id: '991266409'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id354_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      - type: conversation_part
                        id: '5'
                        part_type: conversation_attribute_updated_by_admin
                        body:
                        created_at: 1715085139
                        updated_at: 1715085139
                        notified_at: 1715085139
                        assigned_to:
                        author:
                          id: '991266409'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id354_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 2
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: be0b56aa-edbc-4bb9-8c9c-e8b8a6d56148
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 29fe842d-a261-4d0f-9790-d406573a7f97
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: b62ae795-8f44-4b30-aa9f-95c730f4b93f
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_conversation_request"
            examples:
              conversation_found:
                summary: conversation found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              not_found:
                summary: Not found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
    delete:
      summary: Delete a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
      tags:
      - Conversations
      operationId: deleteConversation
      description: You can delete a single conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '45'
                    object: conversation
                    deleted: true
              schema:
                "$ref": "#/components/schemas/conversation_deleted"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e37eeffc-a5e1-45a1-924c-6c158479c30e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 9d7da9e6-2bae-4da3-a413-a4564ca2bca2
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
  "/conversations/search":
    post:
      summary: Search conversations
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: searchConversations
      description: |
        You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.

        To search for conversations, you need to send a `POST` request to `https://api.intercom.io/conversations/search`.

        This will accept a query object in the body which will define your filters in order to search for conversations.
        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `20` results per page and maximum is `150`.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiple's there can be:
        - There's a limit of max 2 nested filters
        - There's a limit of max 15 filters for each AND or OR group

        ### Accepted Fields

        Most keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).

        | Field                                     | Type                                                                                                                                                   |
        | :---------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |
        | id                                        | String                                                                                                                                                 |
        | created_at                                | Date (UNIX timestamp)                                                                                                                                  |
        | updated_at                                | Date (UNIX timestamp)                                                                                                                                  |
        | source.type                               | String<br>Accepted fields are `conversation`, `email`, `facebook`, `instagram`, `phone_call`, `phone_switch`, `push`, `sms`, `twitter` and `whatsapp`. |
        | source.id                                 | String                                                                                                                                                 |
        | source.delivered_as                       | String                                                                                                                                                 |
        | source.subject                            | String                                                                                                                                                 |
        | source.body                               | String                                                                                                                                                 |
        | source.author.id                          | String                                                                                                                                                 |
        | source.author.type                        | String                                                                                                                                                 |
        | source.author.name                        | String                                                                                                                                                 |
        | source.author.email                       | String                                                                                                                                                 |
        | source.url                                | String                                                                                                                                                 |
        | contact_ids                               | String                                                                                                                                                 |
        | teammate_ids                              | String                                                                                                                                                 |
        | admin_assignee_id                         | String                                                                                                                                                 |
        | team_assignee_id                          | String                                                                                                                                                 |
        | channel_initiated                         | String                                                                                                                                                 |
        | open                                      | Boolean                                                                                                                                                |
        | read                                      | Boolean                                                                                                                                                |
        | state                                     | String                                                                                                                                                 |
        | waiting_since                             | Date (UNIX timestamp)                                                                                                                                  |
        | snoozed_until                             | Date (UNIX timestamp)                                                                                                                                  |
        | tag_ids                                   | String                                                                                                                                                 |
        | priority                                  | String                                                                                                                                                 |
        | statistics.time_to_assignment             | Integer                                                                                                                                                |
        | statistics.time_to_admin_reply            | Integer                                                                                                                                                |
        | statistics.time_to_first_close            | Integer                                                                                                                                                |
        | statistics.time_to_last_close             | Integer                                                                                                                                                |
        | statistics.median_time_to_reply           | Integer                                                                                                                                                |
        | statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_assignment_at            | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_close_at                 | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_assignment_at             | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_close_at                  | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_closed_by_id              | String                                                                                                                                                 |
        | statistics.count_reopens                  | Integer                                                                                                                                                |
        | statistics.count_assignments              | Integer                                                                                                                                                |
        | statistics.count_conversation_parts       | Integer                                                                                                                                                |
        | conversation_rating.requested_at          | Date (UNIX timestamp)                                                                                                                                  |
        | conversation_rating.replied_at            | Date (UNIX timestamp)                                                                                                                                  |
        | conversation_rating.score                 | Integer                                                                                                                                                |
        | conversation_rating.remark                | String                                                                                                                                                 |
        | conversation_rating.contact_id            | String                                                                                                                                                 |
        | conversation_rating.admin_d               | String                                                                                                                                                 |
        | ai_agent_participated                     | Boolean                                                                                                                                                |
        | ai_agent.resolution_state                 | String                                                                                                                                                 |
        | ai_agent.last_answer_type                 | String                                                                                                                                                 |
        | ai_agent.rating                           | Integer                                                                                                                                                |
        | ai_agent.rating_remark                    | String                                                                                                                                                 |
        | ai_agent.source_type                      | String                                                                                                                                                 |
        | ai_agent.source_title                     | String                                                                                                                                                 |

        ### Accepted Operators

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                    | Description                                                  |
        | :------- | :----------------------------- | :----------------------------------------------------------- |
        | =        | All                            | Equals                                                       |
        | !=       | All                            | Doesn't Equal                                                |
        | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
        | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
        | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
        | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
        | ~        | String                         | Contains                                                     |
        | !~       | String                         | Doesn't Contain                                              |
        | ^        | String                         | Starts With                                                  |
        | $        | String                         | Ends With                                                    |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
                    total_count: 1
                    conversations:
                    - type: conversation
                      id: '48'
                      created_at: 1715085149
                      updated_at: 1715085149
                      waiting_since:
                      snoozed_until:
                      source:
                        type: conversation
                        id: '403918090'
                        delivered_as: admin_initiated
                        subject: ''
                        body: "<p>this is the message body</p>"
                        author:
                          type: admin
                          id: '991266438'
                          name: Ciaran203 Lee
                          email: admin203@email.com
                        attachments: []
                        url:
                        redacted: false
                      contacts:
                        type: contact.list
                        contacts:
                        - type: contact
                          id: 663a1f5d0a29ce1b24740fc7
                          external_id: '70'
                      first_contact_reply:
                      admin_assignee_id:
                      team_assignee_id:
                      open: false
                      state: closed
                      read: false
                      tags:
                        type: tag.list
                        tags: []
                      priority: not_priority
                      sla_applied:
                      statistics:
                      conversation_rating:
                      teammates:
                      title:
                      custom_attributes: {}
                      topics: {}
                      ticket:
                      linked_objects:
                        type: list
                        data: []
                        total_count: 0
                        has_more: false
                      ai_agent:
                      ai_agent_participated: false
              schema:
                "$ref": "#/components/schemas/conversation_list"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/search_request"
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                    - field: id
                      operator: "="
                      value: '48'
                    - operator: OR
                      value:
                      - field: id
                        operator: "="
                        value: '48'
                      - field: id
                        operator: "="
                        value: '48'
  "/conversations/{id}/reply":
    post:
      summary: Reply to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The Intercom provisioned identifier for the conversation or the
          string "last" to reply to the last part of the conversation
        example: 123 or "last"
        schema:
          type: string
      tags:
      - Conversations
      operationId: replyConversation
      description: You can reply to a conversation with a message from an admin or
        on behalf of a contact, or with a note for admins.
      responses:
        '200':
          description: User last conversation reply
          content:
            application/json:
              examples:
                User reply:
                  value:
                    type: conversation
                    id: '57'
                    created_at: 1715085155
                    updated_at: 1715085155
                    waiting_since: 1715085155
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918093'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266441'
                        name: Ciaran205 Lee
                        email: admin205@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f620a29ce1b24740fcf
                        external_id: '70'
                    first_contact_reply:
                      created_at: 1715085155
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '7'
                        part_type: open
                        body: "<p>Thanks again :)</p>"
                        created_at: 1715085155
                        updated_at: 1715085155
                        notified_at: 1715085155
                        assigned_to:
                        author:
                          id: 663a1f620a29ce1b24740fcf
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                Admin note reply:
                  value:
                    type: conversation
                    id: '58'
                    created_at: 1715085157
                    updated_at: 1715085157
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918094'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266443'
                        name: Ciaran206 Lee
                        email: admin206@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f650a29ce1b24740fd0
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '8'
                        part_type: note
                        body: |-
                          <h2>An Unordered HTML List</h2>
                          <ul>
                          <li>Coffee</li>
                          <li>Tea</li>
                          <li>Milk</li>
                          </ul>
                          <h2>An Ordered HTML List</h2>
                          <ol>
                          <li>Coffee</li>
                          <li>Tea</li>
                          <li>Milk</li>
                          </ol>
                        created_at: 1715085157
                        updated_at: 1715085157
                        notified_at: 1715085157
                        assigned_to:
                        author:
                          id: '991266443'
                          type: admin
                          name: Ciaran206 Lee
                          email: admin206@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                Admin quick_reply reply:
                  value:
                    type: conversation
                    id: '59'
                    created_at: 1715085159
                    updated_at: 1715085159
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918095'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266445'
                        name: Ciaran207 Lee
                        email: admin207@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f660a29ce1b24740fd1
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '9'
                        part_type: quick_reply
                        body:
                        created_at: 1715085159
                        updated_at: 1715085159
                        notified_at: 1715085159
                        assigned_to:
                        author:
                          id: '991266445'
                          type: admin
                          name: Ciaran207 Lee
                          email: admin207@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                User last conversation reply:
                  value:
                    type: conversation
                    id: '60'
                    created_at: 1715085161
                    updated_at: 1715085161
                    waiting_since: 1715085161
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918096'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266447'
                        name: Ciaran208 Lee
                        email: admin208@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f680a29ce1b24740fd2
                        external_id: '70'
                    first_contact_reply:
                      created_at: 1715085161
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '10'
                        part_type: open
                        body: "<p>Thanks again :)</p>"
                        created_at: 1715085161
                        updated_at: 1715085161
                        notified_at: 1715085161
                        assigned_to:
                        author:
                          id: 663a1f680a29ce1b24740fd2
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 7cccf718-0950-4680-b7e3-96d22b05402b
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: d0662cac-e1db-42a7-946b-739dfba646cd
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 6bd84450-86ef-4415-b4bc-043304f341ec
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/reply_conversation_request"
            examples:
              user_reply:
                summary: User reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 663a1f620a29ce1b24740fcf
                  body: Thanks again :)
              admin_note_reply:
                summary: Admin note reply
                value:
                  message_type: note
                  type: admin
                  admin_id: 991266443
                  body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>
                    \  <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>
                    \ <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>
                    \  </body> </html>"
              admin_quick_reply_reply:
                summary: Admin quick_reply reply
                value:
                  message_type: quick_reply
                  type: admin
                  admin_id: 991266445
                  reply_options:
                  - text: 'Yes'
                    uuid: 1ca3a3a3-ff4b-47a2-a36a-540734fdb0b0
                  - text: 'No'
                    uuid: 03ff50a9-e553-4b8c-9db1-1274e0155eae
              user_last_conversation_reply:
                summary: User last conversation reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 663a1f680a29ce1b24740fd2
                  body: Thanks again :)
              not_found:
                summary: Not found
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 663a1f6a0a29ce1b24740fd3
                  body: Thanks again :)
  "/conversations/{id}/parts":
    post:
      summary: Manage a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: manageConversation
      description: |
        For managing conversations you can:
        - Close a conversation
        - Snooze a conversation to reopen on a future date
        - Open a conversation which is `snoozed` or `closed`
        - Assign a conversation to an admin and/or team.
      responses:
        '200':
          description: Assign a conversation
          content:
            application/json:
              examples:
                Close a conversation:
                  value:
                    type: conversation
                    id: '64'
                    created_at: 1715085166
                    updated_at: 1715085167
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918100'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266455'
                        name: Ciaran212 Lee
                        email: admin212@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f6e0a29ce1b24740fd6
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '11'
                        part_type: close
                        body: "<p>Goodbye :)</p>"
                        created_at: 1715085167
                        updated_at: 1715085167
                        notified_at: 1715085167
                        assigned_to:
                        author:
                          id: '991266455'
                          type: admin
                          name: Ciaran212 Lee
                          email: admin212@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                Snooze a conversation:
                  value:
                    type: conversation
                    id: '65'
                    created_at: 1715085168
                    updated_at: 1715085169
                    waiting_since:
                    snoozed_until: 1715088769
                    source:
                      type: conversation
                      id: '403918101'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266457'
                        name: Ciaran213 Lee
                        email: admin213@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f700a29ce1b24740fd7
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: snoozed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '12'
                        part_type: snoozed
                        body:
                        created_at: 1715085169
                        updated_at: 1715085169
                        notified_at: 1715085169
                        assigned_to:
                        author:
                          id: '991266457'
                          type: admin
                          name: Ciaran213 Lee
                          email: admin213@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                Open a conversation:
                  value:
                    type: conversation
                    id: '70'
                    created_at: 1715085167
                    updated_at: 1715085175
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918102'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266459'
                        name: Ciaran214 Lee
                        email: admin214@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f6f0a29ce1b24740fdc
                        external_id: '74'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title: ''
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '14'
                        part_type: open
                        body:
                        created_at: 1715085175
                        updated_at: 1715085175
                        notified_at: 1715085175
                        assigned_to:
                        author:
                          id: '991266459'
                          type: admin
                          name: Ciaran214 Lee
                          email: admin214@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
                Assign a conversation:
                  value:
                    type: conversation
                    id: '75'
                    created_at: 1715085177
                    updated_at: 1715085177
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918105'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266462'
                        name: Ciaran216 Lee
                        email: admin216@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f780a29ce1b24740fe0
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id: 991266462
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '15'
                        part_type: assign_and_reopen
                        body:
                        created_at: 1715085177
                        updated_at: 1715085177
                        notified_at: 1715085177
                        assigned_to:
                          type: admin
                          id: '991266462'
                        author:
                          id: '991266462'
                          type: admin
                          name: Ciaran216 Lee
                          email: admin216@email.com
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 6313ea94-fb77-4f47-a210-91f4aff32429
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 07fe334e-0f53-47b2-9680-0a9bd644cd2c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 88c635ec-4135-4b41-80dd-7b0accd02bc1
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/close_conversation_request"
              - "$ref": "#/components/schemas/snooze_conversation_request"
              - "$ref": "#/components/schemas/open_conversation_request"
              - "$ref": "#/components/schemas/assign_conversation_request"
            examples:
              close_a_conversation:
                summary: Close a conversation
                value:
                  message_type: close
                  type: admin
                  admin_id: 991266455
                  body: Goodbye :)
              snooze_a_conversation:
                summary: Snooze a conversation
                value:
                  message_type: snoozed
                  admin_id: 991266457
                  snoozed_until: 1715088769
              open_a_conversation:
                summary: Open a conversation
                value:
                  message_type: open
                  admin_id: 991266459
              assign_a_conversation:
                summary: Assign a conversation
                value:
                  message_type: assignment
                  type: admin
                  admin_id: 991266462
                  assignee_id: 991266462
              not_found:
                summary: Not found
                value:
                  message_type: close
                  type: admin
                  admin_id: 991266464
                  body: Goodbye :)
  "/conversations/{id}/run_assignment_rules":
    post:
      summary: Run Assignment Rules on a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: autoAssignConversation
      description: |
        You can let a conversation be automatically assigned following assignment rules.
        {% admonition type="attention" name="When using workflows" %}
        It is not possible to use this endpoint with Workflows.
        {% /admonition %}
      responses:
        '200':
          description: Assign a conversation using assignment rules
          content:
            application/json:
              examples:
                Assign a conversation using assignment rules:
                  value:
                    type: conversation
                    id: '79'
                    created_at: 1715085182
                    updated_at: 1715085183
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918109'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266470'
                        name: Ciaran220 Lee
                        email: admin220@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1f7e0a29ce1b24740fe4
                        external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '16'
                        part_type: default_assignment
                        body:
                        created_at: 1715085183
                        updated_at: 1715085183
                        notified_at: 1715085183
                        assigned_to:
                          type: nobody_admin
                          id:
                        author:
                          id: '991266471'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id400_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id:
                        redacted: false
                        metadata: {}
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 0dc9c805-dcee-4d4b-9163-a7b9582494a8
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f75877ec-6560-4689-a334-bcc0e68c2e12
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 0d2f6e19-4dba-4895-8746-8bc1299375fa
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
  "/conversations/{id}/customers":
    post:
      summary: Attach a contact to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: attachContactToConversation
      description: |+
        You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.

        {% admonition type="attention" name="Contacts without an email" %}
        If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
        {% /admonition %}

      responses:
        '200':
          description: Attach a contact to a conversation
          content:
            application/json:
              examples:
                Attach a contact to a conversation:
                  value:
                    customers:
                    - type: user
                      id: 663a1f840a29ce1b24740fe8
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 57f7dd44-612d-4b14-aaff-4fb85baa6e17
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 99613090-6ee5-4a58-b3a0-6e570819c7b8
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 5cb1a6eb-879a-4124-8eb6-eff3c30ca495
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attach_contact_to_conversation_request"
            examples:
              attach_a_contact_to_a_conversation:
                summary: Attach a contact to a conversation
                value:
                  admin_id: 991266478
                  customer:
                    intercom_user_id: 663a1f840a29ce1b24740fe8
              not_found:
                summary: Not found
                value:
                  admin_id: 991266480
                  customer:
                    intercom_user_id: 663a1f850a29ce1b24740fe9
  "/conversations/{conversation_id}/customers/{contact_id}":
    delete:
      summary: Detach a contact from a group conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      - name: contact_id
        in: path
        required: true
        description: The identifier for the contact as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: detachContactFromConversation
      description: |+
        You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.

        {% admonition type="attention" name="Contacts without an email" %}
        If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
        {% /admonition %}

      responses:
        '200':
          description: Detach a contact from a group conversation
          content:
            application/json:
              examples:
                Detach a contact from a group conversation:
                  value:
                    customers:
                    - type: user
                      id: 663a1f8e0a29ce1b24740ff4
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 21339052-62a4-4a97-a286-1191dd0910a1
                    errors:
                    - code: not_found
                      message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: 85e8163f-e152-476e-ac83-e1d46ffaf555
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Last customer
          content:
            application/json:
              examples:
                Last customer:
                  value:
                    type: error.list
                    request_id: f247e7d9-feca-4c81-b3e3-18465ba1daaa
                    errors:
                    - code: parameter_invalid
                      message: Removing the last customer is not allowed
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 52a5f548-5f50-487a-ba1a-822bf7eebf86
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: a156ec06-31b0-4ab1-9f20-d2be4c557d16
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/detach_contact_from_conversation_request"
            examples:
              detach_a_contact_from_a_group_conversation:
                summary: Detach a contact from a group conversation
                value:
                  admin_id: 991266486
                  customer:
                    intercom_user_id: 663a1f880a29ce1b24740fec
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991266489
                  customer:
                    intercom_user_id: 663a1f8f0a29ce1b24740ff5
              contact_not_found:
                summary: Contact not found
                value:
                  admin_id: 991266492
                  customer:
                    intercom_user_id: 663a1f950a29ce1b24740ffd
              last_customer:
                summary: Last customer
                value:
                  admin_id: 991266495
                  customer:
                    intercom_user_id: 663a1f9c0a29ce1b24741005
  "/conversations/redact":
    post:
      summary: Redact a conversation part
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: redactConversation
      description: |+
        You can redact a conversation part or the source message of a conversation (as seen in the source object).

        {% admonition type="info" name="Redacting parts and messages" %}
        If you are redacting a conversation part, it must have a `body`. If you are redacting a source message, it must have been created by a contact. We will return a `conversation_part_not_redactable` error if these criteria are not met.
        {% /admonition %}

      responses:
        '200':
          description: Redact a conversation part
          content:
            application/json:
              examples:
                Redact a conversation part:
                  value:
                    type: conversation
                    id: '141'
                    created_at: 1715085231
                    updated_at: 1715085232
                    waiting_since: 1715085231
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918135'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266504'
                        name: Ciaran240 Lee
                        email: admin240@email.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1faf0a29ce1b2474101d
                        external_id: '70'
                    first_contact_reply:
                      created_at: 1715085231
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '24'
                        part_type: open
                        body: "<p><i>This message was deleted</i></p>"
                        created_at: 1715085231
                        updated_at: 1715085232
                        notified_at: 1715085231
                        assigned_to:
                        author:
                          id: 663a1faf0a29ce1b2474101d
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id:
                        redacted: true
                        metadata: {}
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 15b0a750-8eaa-4948-a1a6-e3771ed6a3b7
                    errors:
                    - code: conversation_part_or_message_not_found
                      message: Conversation part or message not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7f74b094-fc4c-4880-ad4c-66cf9f5ab570
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/redact_conversation_request"
            examples:
              redact_a_conversation_part:
                summary: Redact a conversation part
                value:
                  type: conversation_part
                  conversation_id: 141
                  conversation_part_id: 24
              not_found:
                summary: Not found
                value:
                  type: conversation_part
                  conversation_id: really_123_doesnt_exist
                  conversation_part_id: really_123_doesnt_exist
  "/conversations/{id}/convert":
    post:
      summary: Convert a conversation to a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The id of the conversation to target
        example: 123
        schema:
          type: integer
      tags:
      - Conversations
      description: You can convert a conversation to a ticket.
      operationId: convertConversationToTicket
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: ticket
                    id: '144'
                    ticket_id: '1'
                    ticket_attributes: {}
                    ticket_state: submitted
                    ticket_state_internal_label: Submitted
                    ticket_state_external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '1'
                      name: my-ticket-type-1
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id440_that_should_be_at_least_
                      archived: false
                      created_at: 1715085238
                      updated_at: 1715085238
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data: []
                      category: Customer
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a1fb40a29ce1b24741020
                        external_id: '70'
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1715085236
                    updated_at: 1715085239
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                      - type: ticket_part
                        id: '26'
                        part_type: comment
                        body: "<p>Comment for message</p>"
                        created_at: 1715085236
                        updated_at: 1715085236
                        author:
                          id: 663a1fb40a29ce1b24741020
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '27'
                        part_type: ticket_state_updated_by_admin
                        ticket_state: submitted
                        previous_ticket_state: submitted
                        created_at: 1715085239
                        updated_at: 1715085239
                        author:
                          id: '991266514'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id440_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      total_count: 2
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Customer
                    is_shared: true
              schema:
                "$ref": "#/components/schemas/ticket"
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value:
                    type: error.list
                    request_id: 862717ff-10a8-40e3-9090-acfe3450f6cc
                    errors:
                    - code: parameter_invalid
                      message: Ticket type is not a customer ticket type
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/convert_conversation_to_ticket_request"
            examples:
              successful:
                summary: successful
                value:
                  ticket_type_id: '1'
              bad_request:
                summary: Bad request
                value:
                  ticket_type_id: '2'
  "/custom_object_instances/{custom_object_type_identifier}":
    parameters:
    - name: custom_object_type_identifier
      in: path
      description: The unique identifier of the custom object type that defines the
        structure of the custom object instance.
      example: Order
      required: true
      schema:
        type: string
    post:
      summary: Create or Update a Custom Object Instance
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Custom Object Instances
      description: Create or update a custom object instance
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '1'
                    type: object_type_identifier_1
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at: 1392036272
                    external_updated_at: 1392036272
                    created_at: 1715085243
                    updated_at: 1715085243
              schema:
                "$ref": "#/components/schemas/custom_object_instance"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 896f52a4-2f75-4a44-bffc-4aed33e7d108
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_or_update_custom_object_instance_request"
            examples:
              successful:
                summary: successful
                value:
                  external_id: '123'
                  external_created_at: 1392036272
                  external_updated_at: 1392036272
    get:
      summary: Get Custom Object Instance by External ID
      parameters:
      - name: external_id
        in: query
        style: form
        required: true
        schema:
          type: object
          oneOf:
          - description: The Intercom defined id representing the custom object instance.
            title: Find by id
            properties:
              external_id:
                type: string
            required:
            - external_id
            additionalProperties: false
          - description: The unique identifier for the instance in the external system
              it originated from.
            title: Find by external_id
            properties:
              external_id:
                type: string
            required:
            - external_id
            additionalProperties: false
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Custom Object Instances
      description: Fetch a Custom Object Instance by external_id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '3'
                    type: object_type_identifier_4
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at:
                    external_updated_at:
                    created_at: 1715085244
                    updated_at: 1715085244
              schema:
                "$ref": "#/components/schemas/custom_object_instance"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b681f8d8-d435-49de-83ab-d68134f5b577
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/custom_object_instances/{custom_object_type_identifier}/{id}":
    parameters:
    - name: custom_object_type_identifier
      in: path
      description: The unique identifier of the custom object type that defines the
        structure of the custom object instance.
      example: Order
      required: true
      schema:
        type: string
    get:
      summary: Get Custom Object Instance by ID
      parameters:
      - name: id
        in: path
        description: The id or external_id of the custom object instance
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Custom Object Instances
      description: Fetch a Custom Object Instance by id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '4'
                    type: object_type_identifier_6
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at:
                    external_updated_at:
                    created_at: 1715085245
                    updated_at: 1715085245
              schema:
                "$ref": "#/components/schemas/custom_object_instance"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f96b8380-5878-4bdc-a14f-9ee2c2ae6949
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a Custom Object Instance
      parameters:
      - name: id
        in: path
        description: The Intercom defined id of the custom object instance
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Custom Object Instances
      description: Delete a single Custom Object instance using the Intercom defined
        id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '5'
                    object: object_type_identifier_8
                    deleted: true
              schema:
                "$ref": "#/components/schemas/custom_object_instance_deleted"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dfe2a31b-34e6-4cc2-8acb-59a7e512ddf0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/data_attributes":
    get:
      summary: List all data attributes
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: model
        in: query
        required: false
        description: Specify the data attribute model to return.
        schema:
          type: string
          enum:
          - contact
          - company
          - conversation
        example: company
      - name: include_archived
        in: query
        required: false
        description: Include archived attributes in the list. By default we return
          only non archived data attributes.
        example: false
        schema:
          type: boolean
      tags:
      - Data Attributes
      operationId: lisDataAttributes
      description: You can fetch a list of all data attributes belonging to a workspace
        for contacts, companies or conversations.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                    - type: data_attribute
                      name: name
                      full_name: name
                      label: Company name
                      description: The name of a company
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: company_id
                      full_name: company_id
                      label: Company ID
                      description: A number identifying a company
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: last_request_at
                      full_name: last_request_at
                      label: Company last seen
                      description: The last day anyone from a company visited your
                        site or app
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: remote_created_at
                      full_name: remote_created_at
                      label: Company created at
                      description: The day a company was added to Intercom
                      data_type: date
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: user_count
                      full_name: user_count
                      label: People
                      description: The number of people in a company
                      data_type: integer
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: session_count
                      full_name: session_count
                      label: Company web sessions
                      description: All visits from anyone in a company to your product's
                        site or app
                      data_type: integer
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: name
                      full_name: plan.name
                      label: Plan
                      description: A specific plan or level within your product that
                        companies have signed up to
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: monthly_spend
                      full_name: monthly_spend
                      label: Monthly Spend
                      description: The monthly revenue you receive from a company
                      data_type: float
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: size
                      full_name: size
                      label: Company size
                      description: The number of people employed in this company,
                        expressed as a single number
                      data_type: integer
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: industry
                      full_name: industry
                      label: Company industry
                      description: The category or domain this company belongs to
                        e.g. 'ecommerce' or 'SaaS'
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: website
                      full_name: website
                      label: Company website
                      description: The web address for the company's primary marketing
                        site
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - id: 2
                      type: data_attribute
                      name: The One Ring
                      full_name: custom_attributes.The One Ring
                      label: The One Ring
                      description: One ring to rule them all, one ring to find them,
                        One ring to bring them all and in the darkness bind them.
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      messenger_writable: true
                      custom: true
                      archived: false
                      admin_id: '991266531'
                      created_at: 1715085247
                      updated_at: 1715085247
                      model: company
                    - type: data_attribute
                      name: id
                      full_name: id
                      label: ID
                      description: The Intercom defined id representing the company
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: created_at
                      full_name: created_at
                      label: Created at
                      description: The time the company was added to Intercom
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: updated_at
                      full_name: updated_at
                      label: Updated at
                      description: The last time the company was updated
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: id
                      full_name: plan.id
                      label: Plan ID
                      description: The Intercom defined id representing the plan
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: app_id
                      full_name: app_id
                      label: App ID
                      description: The Intercom defined id representing the app
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      messenger_writable: true
                      custom: false
                      archived: false
                      model: company
              schema:
                "$ref": "#/components/schemas/data_attribute_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6c9fb107-972f-4df7-942e-9a82dc6a9972
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a data attribute
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Attributes
      operationId: createDataAttribute
      description: You can create a data attributes for a `contact` or a `company`.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 5
                    type: data_attribute
                    name: Mithril Shirt
                    full_name: custom_attributes.Mithril Shirt
                    label: Mithril Shirt
                    data_type: string
                    api_writable: true
                    ui_writable: false
                    messenger_writable: false
                    custom: true
                    archived: false
                    admin_id: '991266533'
                    created_at: 1715085248
                    updated_at: 1715085248
                    model: company
              schema:
                "$ref": "#/components/schemas/data_attribute"
        '400':
          description: Too few options for list
          content:
            application/json:
              examples:
                Same name already exists:
                  value:
                    type: error.list
                    request_id: b5ff2523-718a-4ae2-a279-4bfabee76b37
                    errors:
                    - code: parameter_invalid
                      message: You already have 'The One Ring' in your company data.
                        To save this as new people data, use a different name.
                Invalid name:
                  value:
                    type: error.list
                    request_id: e26707f8-59e4-4c93-be72-04ef44cf2ed6
                    errors:
                    - code: parameter_invalid
                      message: Your name for this attribute must only contain alphanumeric
                        characters, currency symbols, and hyphens
                Attribute already exists:
                  value:
                    type: error.list
                    request_id: a9b967f7-2dab-4541-8abc-043da041e5b1
                    errors:
                    - code: parameter_invalid
                      message: You already have 'The One Ring' in your company data.
                        To save this as new company data, use a different name.
                Invalid Data Type:
                  value:
                    type: error.list
                    request_id: 8ac84342-c383-4e96-97fd-2039b087cb9e
                    errors:
                    - code: parameter_invalid
                      message: Data Type isn't an option
                Too few options for list:
                  value:
                    type: error.list
                    request_id: f02fea8b-1f21-49bb-9e42-86454c62e3f4
                    errors:
                    - code: parameter_invalid
                      message: The Data Attribute model field must be either contact
                        or company
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ff15201e-e100-41e5-9645-00d7424acd8c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_attribute_request"
            examples:
              successful:
                summary: Successful
                value:
                  name: Mithril Shirt
                  model: company
                  data_type: string
              same_name_already_exists:
                summary: Same name already exists
                value:
                  name: The One Ring
                  model: contact
                  data_type: integer
              invalid_name:
                summary: Invalid name
                value:
                  name: "!nv@l!d n@me"
                  model: company
                  data_type: string
              attribute_already_exists:
                summary: Attribute already exists
                value:
                  name: The One Ring
                  model: company
                  data_type: string
              invalid_data_type:
                summary: Invalid Data Type
                value:
                  name: The Second Ring
                  model: company
                  data_type: mithril
              too_few_options_for_list:
                summary: Too few options for list
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  archived: false
  "/data_attributes/{id}":
    put:
      summary: Update a data attribute
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The data attribute id
        example: 1
        schema:
          type: integer
      tags:
      - Data Attributes
      operationId: updateDataAttribute
      description: "\nYou can update a data attribute.\n\n> \U0001F6A7 Updating the
        data type is not possible\n>\n> It is currently a dangerous action to execute
        changing a data attribute's type via the API. You will need to update the
        type via the UI instead.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 12
                    type: data_attribute
                    name: The One Ring
                    full_name: custom_attributes.The One Ring
                    label: The One Ring
                    description: Just a plain old ring
                    data_type: string
                    options:
                    - 1-10
                    - 11-20
                    api_writable: true
                    ui_writable: false
                    messenger_writable: true
                    custom: true
                    archived: false
                    admin_id: '991266540'
                    created_at: 1715085251
                    updated_at: 1715085251
                    model: company
              schema:
                "$ref": "#/components/schemas/data_attribute"
        '400':
          description: Too few options in list
          content:
            application/json:
              examples:
                Too few options in list:
                  value:
                    type: error.list
                    request_id: bbaafd88-0d4b-4526-bda7-320a2c9e00e0
                    errors:
                    - code: parameter_invalid
                      message: Options isn't an array
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Attribute Not Found
          content:
            application/json:
              examples:
                Attribute Not Found:
                  value:
                    type: error.list
                    request_id: f4feb0f1-289c-4794-a5d1-713b44a68c61
                    errors:
                    - code: field_not_found
                      message: We couldn't find that data attribute to update
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Has Dependant Object
          content:
            application/json:
              examples:
                Has Dependant Object:
                  value:
                    type: error.list
                    request_id: 69f80701-08fb-4c1b-b83f-efac00ea7cc6
                    errors:
                    - code: data_invalid
                      message: The Data Attribute you are trying to archive has a
                        dependant object
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e25467e1-bbfb-4e54-94f3-e53755f856db
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_data_attribute_request"
            examples:
              successful:
                summary: Successful
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  - value: 11-20
                  archived: false
              too_few_options_in_list:
                summary: Too few options in list
                value:
                  description: Too few options
                  options:
                    value: 1-10
                  archived: false
              attribute_not_found:
                summary: Attribute Not Found
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  - value: 11-20
                  archived: false
              has_dependant_object:
                summary: Has Dependant Object
                value:
                  description: Trying to archieve
                  archived: true
  "/events":
    post:
      summary: Submit a data event
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Events
      operationId: createDataEvent
      description: |2+

        You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a `Content-Type` of `application/json`.

        When using the JavaScript API, [adding the code to your app](http://docs.intercom.io/configuring-Intercom/tracking-user-events-in-your-app) makes the Events API available. Once added, you can submit an event using the `trackEvent` method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.

        With the Ruby client you pass a hash describing the event to `Intercom::Event.create`, or call the `track_user` method directly on the current user object (e.g. `user.track_event`).

        **NB: For the JSON object types, please note that we do not currently support nested JSON structure.**

        | Type            | Description                                                                                                                                                                                                     | Example                                                                           |
        | :-------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------- |
        | String          | The value is a JSON String                                                                                                                                                                                      | `"source":"desktop"`                                                              |
        | Number          | The value is a JSON Number                                                                                                                                                                                      | `"load": 3.67`                                                                    |
        | Date            | The key ends with the String `_date` and the value is a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time), assumed to be in the [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone. | `"contact_date": 1392036272`                                                      |
        | Link            | The value is a HTTP or HTTPS URI.                                                                                                                                                                               | `"article": "https://example.org/ab1de.html"`                                     |
        | Rich Link       | The value is a JSON object that contains `url` and `value` keys.                                                                                                                                                | `"article": {"url": "https://example.org/ab1de.html", "value":"the dude abides"}` |
        | Monetary Amount | The value is a JSON object that contains `amount` and `currency` keys. The `amount` key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.          | `"price": {"amount": 34999, "currency": "eur"}`                                   |

        **Lead Events**

        When submitting events for Leads, you will need to specify the Lead's `id`.

        **Metadata behaviour**

        - We currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.
        - It is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.
        - There might be up to 24 hrs delay when you send a new metadata for an existing event.

        **Event de-duplication**

        The API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is **strongly recommended** to send a second granularity Unix timestamp in the `created_at` field.

        Duplicated events are responded to using the normal `202 Accepted` code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.

        ### HTTP API Responses

        - Successful responses to submitted events return `202 Accepted` with an empty body.
        - Unauthorised access will be rejected with a `401 Unauthorized` or `403 Forbidden` response code.
        - Events sent about users that cannot be found will return a `404 Not Found`.
        - Event lists containing duplicate events will have those duplicates ignored.
        - Server errors will return a `500` response code and may contain an error message in the body.

      responses:
        '202':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6c96c91d-7b55-454c-9185-3664fb2c2a56
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_event_request"
    get:
      summary: List all data events
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - in: query
        name: filter
        required: true
        style: form
        explode: true
        schema:
          type: object
          oneOf:
          - title: user_id query parameter
            properties:
              user_id:
                type: string
            required:
            - user_id
            additionalProperties: false
          - title: intercom_user_id query parameter
            properties:
              intercom_user_id:
                type: string
            required:
            - intercom_user_id
            additionalProperties: false
          - title: email query parameter
            properties:
              email:
                type: string
            required:
            - email
            additionalProperties: false
      - name: type
        in: query
        required: true
        description: The value must be user
        schema:
          type: string
      - name: summary
        in: query
        required: false
        description: summary flag
        schema:
          type: boolean
      tags:
      - Data Events
      operationId: lisDataEvents
      description: "\n> \U0001F6A7\n>\n> Please note that you can only 'list' events
        that are less than 90 days old. Event counts and summaries will still include
        your events older than 90 days but you cannot 'list' these events individually
        if they are older than 90 days\n\nThe events belonging to a customer can be
        listed by sending a GET request to `https://api.intercom.io/events` with a
        user or lead identifier along with a `type` parameter. The identifier parameter
        can be one of `user_id`, `email` or `intercom_user_id`. The `type` parameter
        value must be `user`.\n\n- `https://api.intercom.io/events?type=user&user_id={user_id}`\n-
        `https://api.intercom.io/events?type=user&email={email}`\n- `https://api.intercom.io/events?type=user&intercom_user_id={id}`
        (this call can be used to list leads)\n\nThe `email` parameter value should
        be [url encoded](http://en.wikipedia.org/wiki/Percent-encoding) when sending.\n\nYou
        can optionally define the result page size as well with the `per_page` parameter.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: event.summary
                    events: []
                    pages:
                      next: http://api.intercom.test/events?next page
                    email: user26@email.com
                    intercom_user_id: 663a1fc70a29ce1b24741026
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
              schema:
                "$ref": "#/components/schemas/data_event_summary"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ae895c40-71e0-4fb2-8a76-9f5dadbcf7ed
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/events/summaries":
    post:
      summary: Create event summaries
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Events
      operationId: dataEventSummaries
      description: "Create event summaries for a user. Event summaries are used to
        track the number of times an event has occurred, the first time it occurred
        and the last time it occurred.\n\n"
      responses:
        '200':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 51297f0b-1ab3-4615-bf2f-78a4985a8f38
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_event_summaries_request"
  "/export/content/data":
    post:
      summary: Create content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Export
      operationId: createDataExport
      description: "To create your export job, you need to send a `POST` request to
        the export endpoint `https://api.intercom.io/export/content/data`.\n\nThe
        only parameters you need to provide are the range of dates that you want exported.\n\n>\U0001F6A7
        Limit of one active job\n>\n> You can only have one active job per workspace.
        You will receive a HTTP status code of 429 with the message Exceeded rate
        limit of 1 pending message data export jobs if you attempt to create a second
        concurrent job.\n\n>❗️ Updated_at not included\n>\n> It should be noted that
        the timeframe only includes messages sent during the time period and not messages
        that were only updated during this period. For example, if a message was updated
        yesterday but sent two days ago, you would need to set the created_at_after
        date before the message was sent to include that in your retrieval job.\n\n>\U0001F4D8
        Date ranges are inclusive\n>\n> Requesting data for 2018-06-01 until 2018-06-30
        will get all data for those days including those specified - e.g. 2018-06-01
        00:00:00 until 2018-06-30 23:59:99.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: n6cv747rgzg0h30r
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_exports_request"
            examples:
              successful:
                summary: successful
                value:
                  created_at_after: 1715067257
                  created_at_before: 1715085257
  "/export/content/data/{job_identifier}":
    get:
      summary: Show content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: getDataExport
      description: "You can view the status of your job by sending a `GET` request
        to the URL\n`https://api.intercom.io/export/content/data/{job_identifier}`
        - the `{job_identifier}` is the value returned in the response when you first
        created the export job. More on it can be seen in the Export Job Model.\n\n>
        \U0001F6A7 Jobs expire after two days\n> All jobs that have completed processing
        (and are thus available to download from the provided URL) will have an expiry
        limit of two days from when the export ob completed. After this, the data
        will no longer be available.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: k7gsf16grhg7r9nb
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
  "/export/cancel/{job_identifier}":
    post:
      summary: Cancel content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: cancelDataExport
      description: You can cancel your job
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: be8gm4tgyvnqzwfj
                    status: canceled
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
  "/download/content/data/{job_identifier}":
    get:
      summary: Download content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: downloadDataExport
      description: "When a job has a status of complete, and thus a filled download_url,
        you can download your data by hitting that provided URL, formatted like so:
        https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message
        data will be streamed continuously back down to you in a gzipped CSV format.\n\n>
        \U0001F4D8 Octet header required\n>\n> You will have to specify the header
        Accept: `application/octet-stream` when hitting this endpoint.\n"
      responses:
        '200':
          description: successful
  "/messages":
    post:
      summary: Create a message
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Messages
      operationId: createMessage
      description: "You can create a message that has been initiated by an admin.
        The conversation can be either an in-app message or an email.\n\n> \U0001F6A7
        Sending for visitors\n>\n> There can be a short delay between when a contact
        is created and when a contact becomes available to be messaged through the
        API. A 404 Not Found error will be returned in this case.\n\nThis will return
        the Message model that has been created.\n\n> \U0001F6A7 Retrieving Associated
        Conversations\n>\n> As this is a message, there will be no conversation present
        until the contact responds. Once they do, you will have to search for a contact's
        conversations with the id of the message.\n"
      responses:
        '200':
          description: admin message created
          content:
            application/json:
              examples:
                user message created:
                  value:
                    type: user_message
                    id: '403918140'
                    created_at: 1715085260
                    body: heyy
                    message_type: inapp
                    conversation_id: '146'
                lead message created:
                  value:
                    type: user_message
                    id: '403918141'
                    created_at: 1715085261
                    body: heyy
                    message_type: inapp
                    conversation_id: '147'
                admin message created:
                  value:
                    type: admin_message
                    id: '5'
                    created_at: 1715085262
                    subject: heyy
                    body: heyy
                    message_type: inapp
                    owner:
                      type: admin
                      id: '991266563'
                      name: Ciaran292 Lee
                      email: admin292@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
              schema:
                "$ref": "#/components/schemas/message"
        '400':
          description: No body supplied for email message
          content:
            application/json:
              examples:
                No body supplied for message:
                  value:
                    type: error.list
                    request_id: 15d090e0-99ca-4794-b9d8-9f576fefc44f
                    errors:
                    - code: parameter_invalid
                      message: Body is required
                No body supplied for email message:
                  value:
                    type: error.list
                    request_id: c1acfd1e-68ee-4934-ae62-b8fb0b3f4305
                    errors:
                    - code: parameter_invalid
                      message: Body is required
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: No subject supplied for email message
          content:
            application/json:
              examples:
                No subject supplied for email message:
                  value:
                    type: error.list
                    request_id: 39342b5c-1d09-47ac-8a13-f470dadd8fe6
                    errors:
                    - code: parameter_not_found
                      message: No subject supplied for email message
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 27e9171b-fa8a-4957-91fc-6b30aa3fff20
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 7fb903b5-3b44-4df7-8f4a-fcb330b70d1a
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_message_request"
            examples:
              user_message_created:
                summary: user message created
                value:
                  from:
                    type: user
                    id: 663a1fcb0a29ce1b2474102b
                  body: heyy
                  referer: https://twitter.com/bob
              lead_message_created:
                summary: lead message created
                value:
                  from:
                    type: lead
                    id: 663a1fcd0a29ce1b2474102c
                  body: heyy
                  referer: https://twitter.com/bob
              admin_message_created:
                summary: admin message created
                value:
                  from:
                    type: admin
                    id: '991266563'
                  to:
                    type: user
                    id: 663a1fce0a29ce1b2474102d
                  message_type: conversation
                  body: heyy
              no_body_supplied_for_message:
                summary: No body supplied for message
                value:
                  from:
                    type: admin
                    id: '991266565'
                  to:
                    type: user
                    id: 663a1fcf0a29ce1b2474102e
                  message_type: inapp
                  body:
                  subject: heyy
              no_subject_supplied_for_email_message:
                summary: No subject supplied for email message
                value:
                  from:
                    type: admin
                    id: '991266566'
                  to:
                    type: user
                    user_id: '70'
                  message_type: email
                  body: hey there
              no_body_supplied_for_email_message:
                summary: No body supplied for email message
                value:
                  from:
                    type: admin
                    id: '991266567'
                  to:
                    type: user
                    id: 663a1fd00a29ce1b24741030
                  message_type: email
                  body:
                  subject: heyy
  "/news/news_items":
    get:
      summary: List all news items
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: listNewsItems
      description: You can fetch a list of all news items
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                    - id: '1'
                      type: news-item
                      workspace_id: this_is_an_id530_that_should_be_at_least_
                      title: We have news
                      body: "<p>Hello there,</p>"
                      sender_id: 991266572
                      state: draft
                      labels: []
                      cover_image_url:
                      reactions:
                      -
                      -
                      -
                      -
                      deliver_silently: false
                      created_at: 1715085265
                      updated_at: 1715085265
                      newsfeed_assignments: []
                    - id: '2'
                      type: news-item
                      workspace_id: this_is_an_id530_that_should_be_at_least_
                      title: We have news
                      body: "<p>Hello there,</p>"
                      sender_id: 991266574
                      state: draft
                      labels: []
                      cover_image_url:
                      reactions:
                      -
                      -
                      -
                      -
                      deliver_silently: false
                      created_at: 1715085265
                      updated_at: 1715085265
                      newsfeed_assignments: []
                    total_count: 2
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 49991968-c10b-404c-8712-bb3dd9990a1a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: createNewsItem
      description: You can create a news item
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '5'
                    type: news-item
                    workspace_id: this_is_an_id534_that_should_be_at_least_
                    title: Halloween is here!
                    body: "<p>New costumes in store for this spooky season</p>"
                    sender_id: 991266581
                    state: live
                    labels:
                    - New
                    - Product
                    - Update
                    cover_image_url:
                    reactions:
                    - "\U0001F606"
                    - "\U0001F605"
                    deliver_silently: true
                    created_at: 1715085267
                    updated_at: 1715085267
                    newsfeed_assignments:
                    - newsfeed_id: 3
                      published_at: 1664638214
              schema:
                "$ref": "#/components/schemas/news_item"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 27913689-27c8-4fe6-820a-a66b27fa3497
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/news_item_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Halloween is here!
                  body: "<p>New costumes in store for this spooky season</p>"
                  labels:
                  - Product
                  - Update
                  - New
                  sender_id: 991266581
                  deliver_silently: true
                  reactions:
                  - "\U0001F606"
                  - "\U0001F605"
                  state: live
                  newsfeed_assignments:
                  - newsfeed_id: 3
                    published_at: 1664638214
  "/news/news_items/{id}":
    get:
      summary: Retrieve a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: retrieveNewsItem
      description: You can fetch the details of a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '6'
                    type: news-item
                    workspace_id: this_is_an_id538_that_should_be_at_least_
                    title: We have news
                    body: "<p>Hello there,</p>"
                    sender_id: 991266584
                    state: live
                    labels: []
                    cover_image_url:
                    reactions:
                    -
                    -
                    -
                    -
                    deliver_silently: false
                    created_at: 1715085268
                    updated_at: 1715085268
                    newsfeed_assignments:
                    - newsfeed_id: 5
                      published_at: 1715085269
              schema:
                "$ref": "#/components/schemas/news_item"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: ef752f6a-bca8-4705-8f65-567f0a6f1352
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 10f1f5de-046e-4d57-ab52-1b472d2b52a0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: updateNewsItem
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '9'
                    type: news-item
                    workspace_id: this_is_an_id544_that_should_be_at_least_
                    title: Christmas is here!
                    body: "<p>New gifts in store for the jolly season</p>"
                    sender_id: 991266592
                    state: live
                    labels: []
                    cover_image_url:
                    reactions:
                    - "\U0001F61D"
                    - "\U0001F602"
                    deliver_silently: false
                    created_at: 1715085270
                    updated_at: 1715085271
                    newsfeed_assignments: []
              schema:
                "$ref": "#/components/schemas/news_item"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: 111a6ae3-e3ee-40e6-9b2f-c05ec0bdfcd1
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4c9d4d86-3daa-4e42-8727-7b3d0a5db4e8
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/news_item_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
                  sender_id: 991266592
                  reactions:
                  - "\U0001F61D"
                  - "\U0001F602"
              news_item_not_found:
                summary: News Item Not Found
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
                  sender_id: 991266595
                  reactions:
                  - "\U0001F61D"
                  - "\U0001F602"
    delete:
      summary: Delete a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: deleteNewsItem
      description: You can delete a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '12'
                    object: news-item
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_object"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: 0b5bf9fb-f07c-48ea-8079-a8a28bc4323c
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 36c69dd2-761d-4bf7-ac4e-252435da6f4f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds/{id}/items":
    get:
      summary: List all live newsfeed items
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news feed item which is given by
          Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - News
      operationId: listLiveNewsfeedItems
      description: You can fetch a list of all news items that are live on a given
        newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 20
                      total_pages: 0
                      type: pages
                    data: []
                    total_count: 0
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5f18fdf9-3565-4822-a8ec-9740606d0409
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds":
    get:
      summary: List all newsfeeds
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: listNewsfeeds
      description: You can fetch a list of all newsfeeds
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                    - id: '18'
                      type: newsfeed
                      name: Visitor Feed
                      created_at: 1715085275
                      updated_at: 1715085275
                    - id: '19'
                      type: newsfeed
                      name: Visitor Feed
                      created_at: 1715085275
                      updated_at: 1715085275
                    total_count: 2
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3a154927-12d0-4573-8d25-c3662b9c6dd5
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds/{id}":
    get:
      summary: Retrieve a newsfeed
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news feed item which is given by
          Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - News
      operationId: retrieveNewsfeed
      description: You can fetch the details of a single newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '22'
                    type: newsfeed
                    name: Visitor Feed
                    created_at: 1715085276
                    updated_at: 1715085276
              schema:
                "$ref": "#/components/schemas/newsfeed"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 706f216f-e974-4b1f-8ee2-6950b29b04c2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/notes/{id}":
    get:
      summary: Retrieve a note
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given note
        example: 1
        schema:
          type: integer
      tags:
      - Notes
      operationId: retrieveNote
      description: You can fetch the details of a single note.
      responses:
        '200':
          description: Note found
          content:
            application/json:
              examples:
                Note found:
                  value:
                    type: note
                    id: '11'
                    created_at: 1714394077
                    contact:
                      type: contact
                      id: 663a1fdd0a29ce1b24741033
                    author:
                      type: admin
                      id: '991266611'
                      name: Ciaran339 Lee
                      email: admin339@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: "<p>This is a note.</p>"
              schema:
                "$ref": "#/components/schemas/note"
        '404':
          description: Note not found
          content:
            application/json:
              examples:
                Note not found:
                  value:
                    type: error.list
                    request_id: b1414f37-8ab4-4032-800d-7aba3ffc735c
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: d6045d4c-495d-4d59-8107-05c17f6310a0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/segments":
    get:
      summary: List all segments
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: include_count
        in: query
        required: false
        description: It includes the count of contacts that belong to each segment.
        example: true
        schema:
          type: boolean
      tags:
      - Segments
      operationId: listSegments
      description: You can fetch a list of all segments.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment.list
                    segments:
                    - type: segment
                      id: 663a1fde0a29ce1b24741036
                      name: John segment
                      created_at: 1715085278
                      updated_at: 1715085278
                      person_type: user
                    - type: segment
                      id: 663a1fde0a29ce1b24741037
                      name: Jane segment
                      created_at: 1715085278
                      updated_at: 1715085278
                      person_type: user
              schema:
                "$ref": "#/components/schemas/segment_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4ad49670-c95e-4cd4-81be-1f73b509de19
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/segments/{id}":
    get:
      summary: Retrieve a segment
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identified of a given segment.
        example: '123'
        schema:
          type: string
      tags:
      - Segments
      operationId: retrieveSegment
      description: You can fetch the details of a single segment.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment
                    id: 663a1fdf0a29ce1b2474103a
                    name: John segment
                    created_at: 1715085279
                    updated_at: 1715085279
                    person_type: user
              schema:
                "$ref": "#/components/schemas/segment"
        '404':
          description: Segment not found
          content:
            application/json:
              examples:
                Segment not found:
                  value:
                    type: error.list
                    request_id: f47effc0-9bd0-42be-afee-d141c1d60a06
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 027765fa-8bc3-43e0-9a71-dd8ebc9ebbc2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/subscription_types":
    get:
      summary: List subscription types
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Subscription Types
      operationId: listSubscriptionTypes
      description: You can list all subscription types. A list of subscription type
        objects will be returned.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: subscription
                      id: '45'
                      state: live
                      consent_type: opt_out
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - email
              schema:
                "$ref": "#/components/schemas/subscription_type_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0e65082b-bc75-4d6a-9d0c-b3741e8cb5c9
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/phone_call_redirects":
    post:
      summary: Create a phone Switch
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Switch
      operationId: createPhoneSwitch
      description: |
        You can use the API to deflect phone calls to the Intercom Messenger.
        Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.

        If custom attributes are specified, they will be added to the user or lead's custom data attributes.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    url: http://via.intercom.io/msgr/7f6cf654-c516-447d-8bba-34b18813b2ea
                    type: phone_call_redirect
              schema:
                "$ref": "#/components/schemas/phone_switch"
        '400':
          description: bad request - invalid number
          content:
            application/json:
              examples:
                bad request - exception sending sms:
                  value:
                    error_key: sms_failed
                    message: SMS was not sent due to an unknown error
                bad request - invalid number:
                  value:
                    error_key: invalid_phone_number
                    message: Invalid phone number
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                unprocessable entity:
                  value:
                    error_key: some_error
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f4a8c0b2-fb76-4d8c-b4a8-c074895e471c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_phone_switch_request"
            examples:
              successful:
                summary: successful
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_exception_sending_sms:
                summary: bad request - exception sending sms
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_invalid_number:
                summary: bad request - invalid number
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              unprocessable_entity:
                summary: unprocessable entity
                value:
                  phone: "+40241100100"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
  "/tags":
    get:
      summary: List all tags
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tags
      operationId: listTags
      description: "You can fetch a list of all tags for a given workspace.\n\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: tag
                      id: '23'
                      name: Manual tag 1
              schema:
                "$ref": "#/components/schemas/tag_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3be62dab-3528-4421-bc6f-c84161ce8b97
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create or update a tag, Tag or untag companies, Tag contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tags
      operationId: createTag
      description: |
        You can use this endpoint to perform the following operations:

          **1. Create a new tag:** You can create a new tag by passing in the tag name as specified in "Create or Update Tag Request Payload" described below.

          **2. Update an existing tag:** You can update an existing tag by passing the id of the tag as specified in "Create or Update Tag Request Payload" described below.

          **3. Tag Companies:** You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in "Tag Company Request Payload" described below. Also, if the tag doesn't exist then a new one will be created automatically.

          **4. Untag Companies:** You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in "Untag Company Request Payload" described below.

          **5. Tag Multiple Users:** You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in "Tag Users Request Payload" described below.

        Each operation will return a tag object.
      responses:
        '200':
          description: Action successful
          content:
            application/json:
              examples:
                Action successful:
                  value:
                    type: tag
                    id: '26'
                    name: test
              schema:
                "$ref": "#/components/schemas/tag"
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                Invalid parameters:
                  value:
                    type: error.list
                    request_id: 6d702932-75c6-4980-9be3-19dcec93821d
                    errors:
                    - code: parameter_invalid
                      message: invalid tag parameters
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: User  not found
          content:
            application/json:
              examples:
                Company not found:
                  value:
                    type: error.list
                    request_id: 23a42a9a-3a02-46c9-9333-a90a4368dc96
                    errors:
                    - code: company_not_found
                      message: Company Not Found
                User  not found:
                  value:
                    type: error.list
                    request_id: 30c36aef-ec8f-4fa6-929f-c66ae3bbcaab
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 43fa9e06-e41c-4b42-b425-ef9b16af9b54
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/create_or_update_tag_request"
              - "$ref": "#/components/schemas/tag_company_request"
              - "$ref": "#/components/schemas/untag_company_request"
              - "$ref": "#/components/schemas/tag_multiple_users_request"
            examples:
              action_successful:
                summary: Action successful
                value:
                  name: test
              invalid_parameters:
                summary: Invalid parameters
                value:
                  test: invalid
              company_not_found:
                summary: Company not found
                value:
                  name: test
                  companies:
                  - company_id: '123'
              user_not_found:
                summary: User  not found
                value:
                  name: test
                  users:
                  - id: '123'
  "/tags/{id}":
    get:
      summary: Find a specific tag
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: The unique identifier of a given tag
        example: '123'
        required: true
        schema:
          type: string
      tags:
      - Tags
      operationId: findTag
      description: |
        You can fetch the details of tags that are on the workspace by their id.
        This will return a tag object.
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              examples:
                Tag found:
                  value:
                    type: tag
                    id: '34'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Tag not found:
                  value:
                    type: error.list
                    request_id: 505ca720-ad17-4886-a9d4-d9622ada71db
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 07e1c43e-37b3-4386-ac36-c2c75f652bc0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete tag
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: The unique identifier of a given tag
        example: '123'
        required: true
        schema:
          type: string
      tags:
      - Tags
      operationId: deleteTag
      description: You can delete the details of tags that are on the workspace by
        passing in the id.
      responses:
        '200':
          description: Successful
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Resource not found:
                  value:
                    type: error.list
                    request_id: dbfcf818-fe2a-4d90-9c1c-3312818b98c6
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '400':
          description: Tag has dependent objects
          content:
            application/json:
              examples:
                Tag has dependent objects:
                  value:
                    type: error.list
                    request_id: b5871669-860b-4868-8ea4-8a7f1f3a1146
                    errors:
                    - code: tag_has_dependent_objects
                      message: 'Unable to delete Tag with dependent objects. Segments:
                        Seg 1.'
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 98d09a34-164c-407f-8733-f0ead3e4cea3
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/teams":
    get:
      summary: List all teams
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Teams
      operationId: listTeams
      description: This will return a list of team objects for the App.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team.list
                    teams: []
              schema:
                "$ref": "#/components/schemas/team_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 996407c4-976a-453e-8723-b7ec5e3c1efa
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/teams/{id}":
    get:
      summary: Retrieve a team
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given team.
        example: '123'
        schema:
          type: string
      tags:
      - Teams
      operationId: retrieveTeam
      description: You can fetch the details of a single team, containing an array
        of admins that belong to this team.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team
                    id: '991266649'
                    name: team 1
                    admin_ids: []
              schema:
                "$ref": "#/components/schemas/team"
        '404':
          description: Team not found
          content:
            application/json:
              examples:
                Team not found:
                  value:
                    type: error.list
                    request_id: 31e551e5-fa16-4d5a-89fd-3715a4fc00b5
                    errors:
                    - code: team_not_found
                      message: Team not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 68ff29b1-19c3-43fe-9666-94887c3c0199
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/ticket_types/{ticket_type_id}/attributes":
    post:
      summary: Create a new attribute for a ticket type
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: ticket_type_id
        in: path
        required: true
        description: The unique identifier for the ticket type which is given by Intercom.
        schema:
          type: string
      tags:
      - Ticket Type Attributes
      description: You can create a new attribute for a ticket type.
      operationId: createTicketTypeAttribute
      responses:
        '200':
          description: Ticket Type Attribute created
          content:
            application/json:
              examples:
                Ticket Type Attribute created:
                  value:
                    type: ticket_type_attribute
                    id: '22'
                    workspace_id: this_is_an_id636_that_should_be_at_least_
                    name: Attribute Title
                    description: Attribute Description
                    data_type: string
                    input_options:
                      multiline: false
                    order: 2
                    required_to_create: false
                    required_to_create_for_contacts: false
                    visible_on_create: true
                    visible_to_contacts: true
                    default: false
                    ticket_type_id: 3
                    archived: false
                    created_at: 1715085297
                    updated_at: 1715085297
              schema:
                "$ref": "#/components/schemas/ticket_type_attribute"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f558ff77-0ae8-4e81-bddf-dc6d209a53b7
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_ticket_type_attribute_request"
            examples:
              ticket_type_attribute_created:
                summary: Ticket Type Attribute created
                value:
                  name: Attribute Title
                  description: Attribute Description
                  data_type: string
                  required_to_create: false
  "/ticket_types/{ticket_type_id}/attributes/{id}":
    put:
      summary: Update an existing attribute for a ticket type
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: ticket_type_id
        in: path
        required: true
        description: The unique identifier for the ticket type which is given by Intercom.
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The unique identifier for the ticket type attribute which is
          given by Intercom.
        schema:
          type: string
      tags:
      - Ticket Type Attributes
      description: You can update an existing attribute for a ticket type.
      operationId: updateTicketTypeAttribute
      responses:
        '200':
          description: Ticket Type Attribute updated
          content:
            application/json:
              examples:
                Ticket Type Attribute updated:
                  value:
                    type: ticket_type_attribute
                    id: '27'
                    workspace_id: this_is_an_id640_that_should_be_at_least_
                    name: name
                    description: New Attribute Description
                    data_type: string
                    order: 0
                    required_to_create: false
                    required_to_create_for_contacts: false
                    visible_on_create: false
                    visible_to_contacts: false
                    default: false
                    ticket_type_id: 5
                    archived: false
                    created_at: 1715085298
                    updated_at: 1715085299
              schema:
                "$ref": "#/components/schemas/ticket_type_attribute"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ed364987-4352-4b85-b162-0c43dc547f75
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_ticket_type_attribute_request"
            examples:
              ticket_type_attribute_updated:
                summary: Ticket Type Attribute updated
                value:
                  description: New Attribute Description
  "/ticket_types":
    get:
      summary: List all ticket types
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Ticket Types
      operationId: listTicketTypes
      description: You can get a list of all ticket types for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: ticket_type
                      id: '7'
                      name: Bug Report
                      description: Bug Report Template
                      icon: "\U0001F39F️"
                      workspace_id: this_is_an_id644_that_should_be_at_least_
                      archived: false
                      created_at: 1715085299
                      updated_at: 1715085299
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                        - type: ticket_type_attribute
                          id: '30'
                          workspace_id: this_is_an_id644_that_should_be_at_least_
                          name: _default_title_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: false
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 7
                          archived: false
                          created_at: 1715085299
                          updated_at: 1715085299
                        - type: ticket_type_attribute
                          id: '32'
                          workspace_id: this_is_an_id644_that_should_be_at_least_
                          name: name
                          description: description
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: false
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 7
                          archived: false
                          created_at: 1715085299
                          updated_at: 1715085299
                        - type: ticket_type_attribute
                          id: '31'
                          workspace_id: this_is_an_id644_that_should_be_at_least_
                          name: _default_description_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: true
                          order: 1
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 7
                          archived: false
                          created_at: 1715085299
                          updated_at: 1715085299
                      category: Customer
              schema:
                "$ref": "#/components/schemas/ticket_type_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0a9b1d40-513a-4377-939b-1868e96d8bbb
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a ticket type
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Ticket Types
      operationId: createTicketType
      description: "You can create a new ticket type.\n> \U0001F4D8 Creating ticket
        types.\n>\n> Every ticket type will be created with two default attributes:
        _default_title_ and _default_description_.\n> For the `icon` propery, use
        an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)\n"
      responses:
        '200':
          description: Ticket type created
          content:
            application/json:
              examples:
                Ticket type created:
                  value:
                    type: ticket_type
                    id: '10'
                    name: Customer Issue
                    description: Customer Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id648_that_should_be_at_least_
                    archived: false
                    created_at: 1715085301
                    updated_at: 1715085301
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                      - type: ticket_type_attribute
                        id: '39'
                        workspace_id: this_is_an_id648_that_should_be_at_least_
                        name: _default_title_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: false
                        order: 0
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 10
                        archived: false
                        created_at: 1715085301
                        updated_at: 1715085301
                      - type: ticket_type_attribute
                        id: '40'
                        workspace_id: this_is_an_id648_that_should_be_at_least_
                        name: _default_description_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: true
                        order: 1
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 10
                        archived: false
                        created_at: 1715085301
                        updated_at: 1715085301
                    category: Customer
              schema:
                "$ref": "#/components/schemas/ticket_type"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1ef8460b-0bfa-43c5-a7d9-40e9161d833a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_ticket_type_request"
            examples:
              ticket_type_created:
                summary: Ticket type created
                value:
                  name: Customer Issue
                  description: Customer Report Template
                  icon: "\U0001F39F️"
                  category: Customer
  "/ticket_types/{id}":
    get:
      summary: Retrieve a ticket type
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the ticket type which is given by Intercom.
        schema:
          type: string
      tags:
      - Ticket Types
      operationId: getTicketType
      description: You can fetch the details of a single ticket type.
      responses:
        '200':
          description: Ticket type found
          content:
            application/json:
              examples:
                Ticket type found:
                  value:
                    type: ticket_type
                    id: '12'
                    name: Bug Report
                    description: Bug Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id652_that_should_be_at_least_
                    archived: false
                    created_at: 1715085302
                    updated_at: 1715085302
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                      - type: ticket_type_attribute
                        id: '44'
                        workspace_id: this_is_an_id652_that_should_be_at_least_
                        name: _default_title_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: false
                        order: 0
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 12
                        archived: false
                        created_at: 1715085302
                        updated_at: 1715085302
                      - type: ticket_type_attribute
                        id: '46'
                        workspace_id: this_is_an_id652_that_should_be_at_least_
                        name: name
                        description: description
                        data_type: string
                        input_options:
                        order: 0
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: false
                        visible_to_contacts: false
                        default: false
                        ticket_type_id: 12
                        archived: false
                        created_at: 1715085302
                        updated_at: 1715085302
                      - type: ticket_type_attribute
                        id: '45'
                        workspace_id: this_is_an_id652_that_should_be_at_least_
                        name: _default_description_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: true
                        order: 1
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 12
                        archived: false
                        created_at: 1715085302
                        updated_at: 1715085302
                    category: Customer
              schema:
                "$ref": "#/components/schemas/ticket_type"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0d01767d-b7f4-4ee9-9912-cbd52ad6e1ee
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a ticket type
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the ticket type which is given by Intercom.
        schema:
          type: string
      tags:
      - Ticket Types
      operationId: updateTicketType
      description: "\nYou can update a ticket type.\n\n> \U0001F4D8 Updating a ticket
        type.\n>\n> For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)\n"
      responses:
        '200':
          description: Ticket type updated
          content:
            application/json:
              examples:
                Ticket type updated:
                  value:
                    type: ticket_type
                    id: '14'
                    name: Bug Report 2
                    description: Bug Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id656_that_should_be_at_least_
                    archived: false
                    created_at: 1715085303
                    updated_at: 1715085303
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                      - type: ticket_type_attribute
                        id: '50'
                        workspace_id: this_is_an_id656_that_should_be_at_least_
                        name: _default_title_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: false
                        order: 0
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 14
                        archived: false
                        created_at: 1715085303
                        updated_at: 1715085303
                      - type: ticket_type_attribute
                        id: '52'
                        workspace_id: this_is_an_id656_that_should_be_at_least_
                        name: name
                        description: description
                        data_type: string
                        input_options:
                        order: 0
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: false
                        visible_to_contacts: false
                        default: false
                        ticket_type_id: 14
                        archived: false
                        created_at: 1715085303
                        updated_at: 1715085303
                      - type: ticket_type_attribute
                        id: '51'
                        workspace_id: this_is_an_id656_that_should_be_at_least_
                        name: _default_description_
                        description: ''
                        data_type: string
                        input_options:
                          multiline: true
                        order: 1
                        required_to_create: false
                        required_to_create_for_contacts: false
                        visible_on_create: true
                        visible_to_contacts: true
                        default: true
                        ticket_type_id: 14
                        archived: false
                        created_at: 1715085303
                        updated_at: 1715085303
                    category: Customer
              schema:
                "$ref": "#/components/schemas/ticket_type"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6cf4abc9-7045-4265-acc5-a0b96ec6b649
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_ticket_type_request"
            examples:
              ticket_type_updated:
                summary: Ticket type updated
                value:
                  name: Bug Report 2
  "/tickets/{id}/reply":
    post:
      summary: Reply to a ticket
      operationId: replyTicket
      description: You can reply to a ticket with a message from an admin or on behalf
        of a contact, or with a note for admins.
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        schema:
          title: Ticket ID
          type: string
          description: The id of the ticket to target.
          example: '123'
      tags:
      - Tickets
      responses:
        '200':
          description: Admin quick_reply reply
          content:
            application/json:
              examples:
                User reply:
                  value:
                    type: ticket_part
                    id: '30'
                    part_type: comment
                    body: "<p>Thanks again :)</p>"
                    created_at: 1715085306
                    updated_at: 1715085306
                    author:
                      id: 663a1ffa0a29ce1b2474105d
                      type: user
                      name:
                      email: user30@email.com
                    attachments: []
                    redacted: false
                Admin note reply:
                  value:
                    type: ticket_part
                    id: '32'
                    part_type: note
                    body: |-
                      <h2>An Unordered HTML List</h2>
                      <ul>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                      </ul>
                      <h2>An Ordered HTML List</h2>
                      <ol>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                      </ol>
                    created_at: 1715085308
                    updated_at: 1715085308
                    author:
                      id: '991266676'
                      type: admin
                      name: Ciaran398 Lee
                      email: admin398@email.com
                    attachments: []
                    redacted: false
                Admin quick_reply reply:
                  value:
                    type: ticket_part
                    id: '34'
                    part_type: quick_reply
                    created_at: 1715085311
                    updated_at: 1715085311
                    author:
                      id: '991266681'
                      type: admin
                      name: Ciaran402 Lee
                      email: admin402@email.com
                    attachments: []
                    redacted: false
              schema:
                "$ref": "#/components/schemas/ticket_reply"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 56f50a37-b65b-4008-b6e1-a4c557f276bc
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 303c7e00-ac1c-4649-a18c-ce628ce9ba29
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_ticket_reply_with_comment_request"
            examples:
              user_reply:
                summary: User reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 663a1ffa0a29ce1b2474105d
                  body: Thanks again :)
              admin_note_reply:
                summary: Admin note reply
                value:
                  message_type: note
                  type: admin
                  admin_id: 991266676
                  body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>
                    \  <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>
                    \ <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>
                    \  </body> </html>"
              admin_quick_reply_reply:
                summary: Admin quick_reply reply
                value:
                  message_type: quick_reply
                  type: admin
                  admin_id: 991266681
                  reply_options:
                  - text: 'Yes'
                    uuid: ea309878-d0ca-4c26-806a-fce6c8a54ed9
                  - text: 'No'
                    uuid: 11d3f7ff-4dcd-4995-830e-fd906e0921f5
              not_found:
                summary: Not found
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 663a20000a29ce1b24741060
                  body: Thanks again :)
  "/tickets/{ticket_id}/tags":
    post:
      summary: Add tag to a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: ticket_id
        in: path
        description: ticket_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Tickets
      operationId: attachTagToTicket
      description: You can tag a specific ticket. This will return a tag object for
        the tag that was added to the ticket.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '42'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Ticket not found
          content:
            application/json:
              examples:
                Ticket not found:
                  value:
                    type: error.list
                    request_id: 0e458273-635b-4288-b04e-c89368e84861
                    errors:
                    - code: ticket_not_found
                      message: Ticket not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3ab07fcb-5c14-4d1c-b19b-46bfe3b92637
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - admin_id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '780'
            examples:
              successful:
                summary: successful
                value:
                  id: 42
                  admin_id: 991266691
              ticket_not_found:
                summary: Ticket not found
                value:
                  id: 43
                  admin_id: 991266694
  "/tickets/{ticket_id}/tags/{id}":
    delete:
      summary: Remove tag from a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: ticket_id
        in: path
        description: ticket_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The unique identifier for the tag which is given by Intercom
        example: '7522907'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Tickets
      operationId: detachTagFromTicket
      description: You can remove tag from a specific ticket. This will return a tag
        object for the tag that was removed from the ticket.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '45'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Ticket not found:
                  value:
                    type: error.list
                    request_id: 8913a771-6f0f-41f4-9366-137449b8bdc5
                    errors:
                    - code: ticket_not_found
                      message: Ticket not found
                Tag not found:
                  value:
                    type: error.list
                    request_id: fd928a95-9697-4256-ac88-265bc8754b57
                    errors:
                    - code: tag_not_found
                      message: Tag not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4544fbf1-b621-47ea-b7ca-d416950da2ec
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - admin_id
              properties:
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '123'
            examples:
              successful:
                summary: successful
                value:
                  admin_id: 991266700
              ticket_not_found:
                summary: Ticket not found
                value:
                  admin_id: 991266703
              tag_not_found:
                summary: Tag not found
                value:
                  admin_id: 991266706
  "/tickets":
    post:
      summary: Create a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tickets
      description: You can create a new ticket.
      operationId: createTicket
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: ticket
                    id: '159'
                    ticket_id: '12'
                    ticket_attributes:
                      title: example
                      description: there is a problem
                    ticket_state: submitted
                    ticket_state_internal_label: Submitted
                    ticket_state_external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '28'
                      name: my-ticket-type-15
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id684_that_should_be_at_least_
                      archived: false
                      created_at: 1715085326
                      updated_at: 1715085326
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                        - type: ticket_type_attribute
                          id: '64'
                          workspace_id: this_is_an_id684_that_should_be_at_least_
                          name: title
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 28
                          archived: false
                          created_at: 1715085327
                          updated_at: 1715085327
                        - type: ticket_type_attribute
                          id: '65'
                          workspace_id: this_is_an_id684_that_should_be_at_least_
                          name: description
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 28
                          archived: false
                          created_at: 1715085327
                          updated_at: 1715085327
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a200f0a29ce1b24741068
                        external_id: '70'
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1715085327
                    updated_at: 1715085328
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                      - type: ticket_part
                        id: '35'
                        part_type: ticket_state_updated_by_admin
                        ticket_state: submitted
                        previous_ticket_state: submitted
                        created_at: 1715085328
                        updated_at: 1715085328
                        author:
                          id: '991266718'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id684_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      total_count: 1
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                "$ref": "#/components/schemas/ticket"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5f80f364-95ae-4986-bd64-ea99015addca
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_ticket_request"
            examples:
              successful_response:
                summary: Successful response
                value:
                  ticket_type_id: 28
                  contacts:
                  - id: 663a200f0a29ce1b24741068
                  ticket_attributes:
                    title: example
                    description: there is a problem
  "/tickets/{id}":
    put:
      summary: Update a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the ticket which is given by Intercom
        schema:
          type: string
      tags:
      - Tickets
      operationId: updateTicket
      description: You can update a ticket.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: ticket
                    id: '160'
                    ticket_id: '13'
                    ticket_attributes:
                      title: example
                      description: there is a problem
                    ticket_state: in_progress
                    ticket_state_internal_label: In progress
                    ticket_state_external_label: In progress
                    ticket_type:
                      type: ticket_type
                      id: '30'
                      name: my-ticket-type-17
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id688_that_should_be_at_least_
                      archived: false
                      created_at: 1715085329
                      updated_at: 1715085329
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                        - type: ticket_type_attribute
                          id: '69'
                          workspace_id: this_is_an_id688_that_should_be_at_least_
                          name: title
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 30
                          archived: false
                          created_at: 1715085329
                          updated_at: 1715085329
                        - type: ticket_type_attribute
                          id: '70'
                          workspace_id: this_is_an_id688_that_should_be_at_least_
                          name: description
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 30
                          archived: false
                          created_at: 1715085329
                          updated_at: 1715085329
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a20110a29ce1b24741069
                        external_id: a1e14aef-cdf4-4997-9594-d7838a2254b4
                    admin_assignee_id: '991266732'
                    team_assignee_id: '0'
                    created_at: 1715085329
                    updated_at: 1715085332
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                      - type: ticket_part
                        id: '36'
                        part_type: ticket_state_updated_by_admin
                        ticket_state: submitted
                        previous_ticket_state: submitted
                        created_at: 1715085330
                        updated_at: 1715085330
                        author:
                          id: '991266730'
                          type: admin
                          name: Ciaran442 Lee
                          email: admin442@email.com
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '37'
                        part_type: ticket_attribute_updated_by_admin
                        created_at: 1715085331
                        updated_at: 1715085331
                        author:
                          id: '991266731'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id688_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '38'
                        part_type: ticket_attribute_updated_by_admin
                        created_at: 1715085331
                        updated_at: 1715085331
                        author:
                          id: '991266731'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id688_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '39'
                        part_type: ticket_state_updated_by_admin
                        ticket_state: in_progress
                        previous_ticket_state: submitted
                        created_at: 1715085331
                        updated_at: 1715085331
                        author:
                          id: '991266731'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id688_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '40'
                        part_type: assignment
                        created_at: 1715085332
                        updated_at: 1715085332
                        assigned_to:
                          type: admin
                          id: '991266732'
                        author:
                          id: '991266730'
                          type: admin
                          name: Ciaran442 Lee
                          email: admin442@email.com
                        attachments: []
                        redacted: false
                      - type: ticket_part
                        id: '41'
                        part_type: snoozed
                        created_at: 1715085332
                        updated_at: 1715085332
                        author:
                          id: '991266731'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id688_that_should_be_at_least_@intercom.io
                        attachments: []
                        redacted: false
                      total_count: 6
                    open: true
                    snoozed_until: 1715184000
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                "$ref": "#/components/schemas/ticket"
        '404':
          description: Assignee not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: 6bcffa6c-a392-48b4-b273-9e1b1c405415
                    errors:
                    - code: assignee_not_found
                      message: Assignee not found
                Assignee not found:
                  value:
                    type: error.list
                    request_id: 2970f7ef-416c-42ca-bbe0-4e9c45029e3a
                    errors:
                    - code: assignee_not_found
                      message: Assignee not found
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f125c040-8941-4b2b-a4dc-e7e105c8990c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_ticket_request"
            examples:
              successful_response:
                summary: Successful response
                value:
                  ticket_attributes:
                    title: example
                    description: there is a problem
                  state: in_progress
                  assignment:
                    admin_id: '991266730'
                    assignee_id: '991266732'
                  open: true
                  snoozed_until: 1673609604
              admin_not_found:
                summary: Admin not found
                value:
                  ticket_attributes:
                    title: example
                    description: there is a problem
                  state: in_progress
                  assignment:
                    admin_id: '123'
                    assignee_id: '991266740'
              assignee_not_found:
                summary: Assignee not found
                value:
                  ticket_attributes:
                    title: example
                    description: there is a problem
                  state: in_progress
                  assignment:
                    admin_id: '991266746'
                    assignee_id: '456'
    get:
      summary: Retrieve a ticket
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the ticket which is given by Intercom.
        schema:
          type: string
      tags:
      - Tickets
      operationId: getTicket
      description: You can fetch the details of a single ticket.
      responses:
        '200':
          description: Ticket found
          content:
            application/json:
              examples:
                Ticket found:
                  value:
                    type: ticket
                    id: '163'
                    ticket_id: '16'
                    ticket_attributes:
                      title: attribute_value
                      description:
                    ticket_state: submitted
                    ticket_state_internal_label: Submitted
                    ticket_state_external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '34'
                      name: my-ticket-type-21
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id696_that_should_be_at_least_
                      archived: false
                      created_at: 1715085338
                      updated_at: 1715085338
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                        - type: ticket_type_attribute
                          id: '80'
                          workspace_id: this_is_an_id696_that_should_be_at_least_
                          name: title
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 34
                          archived: false
                          created_at: 1715085338
                          updated_at: 1715085338
                        - type: ticket_type_attribute
                          id: '81'
                          workspace_id: this_is_an_id696_that_should_be_at_least_
                          name: description
                          description: ola
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: true
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 34
                          archived: false
                          created_at: 1715085338
                          updated_at: 1715085338
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 663a201a0a29ce1b2474106c
                        external_id: 2b878fa7-11ce-45a8-ae22-079e13f8b43f
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1715085338
                    updated_at: 1715085339
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                      - type: ticket_part
                        id: '44'
                        part_type: ticket_state_updated_by_admin
                        ticket_state: submitted
                        previous_ticket_state: submitted
                        created_at: 1715085339
                        updated_at: 1715085339
                        author:
                          id: '991266759'
                          type: admin
                          name: Ciaran468 Lee
                          email: admin468@email.com
                        attachments: []
                        redacted: false
                      total_count: 1
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                "$ref": "#/components/schemas/ticket"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e7d2ef74-d265-497a-9f7d-13f2eeda98eb
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/tickets/search":
    post:
      summary: Search tickets
      operationId: searchTickets
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tickets
      description: |
        You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.

        To search for tickets, you send a `POST` request to `https://api.intercom.io/tickets/search`.

        This will accept a query object in the body which will define your filters.
        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiples there can be:
        - There's a limit of max 2 nested filters
        - There's a limit of max 15 filters for each AND or OR group

        ### Accepted Fields

        Most keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foobar"`).

        | Field                                     | Type                                                                                     |
        | :---------------------------------------- | :--------------------------------------------------------------------------------------- |
        | id                                        | String                                                                                   |
        | created_at                                | Date (UNIX timestamp)                                                                    |
        | updated_at                                | Date (UNIX timestamp)                                                                    |
        | title                                     | String                                                                                   |
        | description                               | String                                                                                   |
        | category                                  | String                                                                                   |
        | ticket_type_id                            | String                                                                                   |
        | contact_ids                               | String                                                                                   |
        | teammate_ids                              | String                                                                                   |
        | admin_assignee_id                         | String                                                                                   |
        | team_assignee_id                          | String                                                                                   |
        | open                                      | Boolean                                                                                  |
        | state                                     | String                                                                                   |
        | snoozed_until                             | Date (UNIX timestamp)                                                                    |
        | ticket_attribute.{id}                     | String or Boolean or Date (UNIX timestamp) or Float or Integer                           |

        ### Accepted Operators

        {% admonition type="info" name="Searching based on `created_at`" %}
          You may use the `<=` or `>=` operators to search by `created_at`.
        {% /admonition %}

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                    | Description                                                  |
        | :------- | :----------------------------- | :----------------------------------------------------------- |
        | =        | All                            | Equals                                                       |
        | !=       | All                            | Doesn't Equal                                                |
        | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
        | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
        | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
        | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
        | ~        | String                         | Contains                                                     |
        | !~       | String                         | Doesn't Contain                                              |
        | ^        | String                         | Starts With                                                  |
        | $        | String                         | Ends With                                                    |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: ticket.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
                    total_count: 1
                    tickets:
                    - type: ticket
                      id: '164'
                      ticket_id: '17'
                      ticket_attributes:
                        title: attribute_value
                        description:
                      ticket_state: submitted
                      ticket_state_internal_label: Submitted
                      ticket_state_external_label: Submitted
                      ticket_type:
                        type: ticket_type
                        id: '36'
                        name: my-ticket-type-23
                        description: my ticket type description is awesome.
                        icon: "\U0001F981"
                        workspace_id: this_is_an_id700_that_should_be_at_least_
                        archived: false
                        created_at: 1715085341
                        updated_at: 1715085341
                        is_internal: false
                        ticket_type_attributes:
                          type: list
                          data:
                          - type: ticket_type_attribute
                            id: '85'
                            workspace_id: this_is_an_id700_that_should_be_at_least_
                            name: title
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 36
                            archived: false
                            created_at: 1715085341
                            updated_at: 1715085341
                          - type: ticket_type_attribute
                            id: '86'
                            workspace_id: this_is_an_id700_that_should_be_at_least_
                            name: description
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 36
                            archived: false
                            created_at: 1715085341
                            updated_at: 1715085341
                        category: Back-office
                      contacts:
                        type: contact.list
                        contacts:
                        - type: contact
                          id: 663a201d0a29ce1b2474106d
                          external_id: 0ef4ab36-a333-4dcf-b677-9c407a038365
                      admin_assignee_id: '0'
                      team_assignee_id: '0'
                      created_at: 1715085342
                      updated_at: 1715085342
                      ticket_parts:
                        type: ticket_part.list
                        ticket_parts:
                        - type: ticket_part
                          id: '45'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: submitted
                          previous_ticket_state: submitted
                          created_at: 1715085342
                          updated_at: 1715085342
                          author:
                            id: '991266772'
                            type: admin
                            name: Ciaran480 Lee
                            email: admin480@email.com
                          attachments: []
                          redacted: false
                        total_count: 1
                      open: true
                      linked_objects:
                        type: list
                        data: []
                        total_count: 0
                        has_more: false
                      category: Back-office
                      is_shared: false
              schema:
                "$ref": "#/components/schemas/ticket_list"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/search_request"
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                    - field: id
                      operator: "="
                      value: '164'
                    - operator: OR
                      value:
                      - field: id
                        operator: "="
                        value: '164'
                      - field: id
                        operator: "="
                        value: '164'
  "/visitors":
    put:
      summary: Update a visitor
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Visitors
      operationId: updateVisitor
      description: |
        Sending a PUT request to `/visitors` will result in an update of an existing Visitor.

        **Option 1.** You can update a visitor by passing in the `user_id` of the visitor in the Request body.

        **Option 2.** You can update a visitor by passing in the `id` of the visitor in the Request body.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 663a20200a29ce1b24741070
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone:
                    name: Gareth Bale
                    pseudonym: Lime Helicopter
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/app/pseudonym_avatars_2019/lime-helicopter.png
                    app_id: this_is_an_id704_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at:
                    created_at: 1715085344
                    remote_created_at: 1715085344
                    signed_up_at: 1715085344
                    updated_at: 1715085344
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id:
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer:
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    do_not_track:
              schema:
                "$ref": "#/components/schemas/visitor"
        '404':
          description: visitor Not Found
          content:
            application/json:
              examples:
                visitor Not Found:
                  value:
                    type: error.list
                    request_id: 31288b89-e042-44c0-89b5-173c0957420c
                    errors:
                    - code: not_found
                      message: Visitor Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: db051386-8152-4786-8889-cb2656e4137d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_visitor_request"
            examples:
              successful:
                summary: successful
                value:
                  id: 663a20200a29ce1b24741070
                  name: Gareth Bale
              visitor_not_found:
                summary: visitor Not Found
                value:
                  user_id: fail
                  name: Christian Fail
    get:
      summary: Retrieve a visitor with User ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: user_id
        in: query
        description: The user_id of the Visitor you want to retrieve.
        required: true
        schema:
          type: string
      tags:
      - Visitors
      operationId: retrieveVisitorWithUserId
      description: You can fetch the details of a single visitor.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 663a20210a29ce1b24741076
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone:
                    name:
                    pseudonym:
                    avatar:
                      type: avatar
                      image_url:
                    app_id: this_is_an_id710_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at:
                    created_at: 1715085346
                    remote_created_at: 1715085345
                    signed_up_at: 1715085345
                    updated_at: 1715085346
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id:
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer:
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    do_not_track:
              schema:
                "$ref": "#/components/schemas/visitor"
        '404':
          description: Visitor not found
          content:
            application/json:
              examples:
                Visitor not found:
                  value:
                    type: error.list
                    request_id: 03e39464-147a-41f2-a5c0-5f36b38b2d98
                    errors:
                    - code: not_found
                      message: Visitor Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: d212ef5c-23db-4aba-8a6a-f2c2c90adb0c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/visitors/convert":
    post:
      summary: Convert a visitor
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Visitors
      operationId: convertVisitor
      description: "You can merge a Visitor to a Contact of role type `lead` or `user`.\n\n>
        \U0001F4D8 What happens upon a visitor being converted?\n>\n> If the User
        exists, then the Visitor will be merged into it, the Visitor deleted and the
        User returned. If the User does not exist, the Visitor will be converted to
        a User, with the User identifiers replacing it's Visitor identifiers.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 663a20240a29ce1b2474107d
                    workspace_id: this_is_an_id716_that_should_be_at_least_
                    external_id:
                    role: user
                    email: foo@bar.com
                    phone:
                    formatted_phone:
                    name:
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1715085348
                    updated_at: 1715085348
                    signed_up_at: 1715085347
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/663a20240a29ce1b2474107d/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/663a20240a29ce1b2474107d/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/663a20240a29ce1b2474107d/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a20240a29ce1b2474107d/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/663a20240a29ce1b2474107d/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e2df13d8-7420-4545-9b9f-2ea4802f9483
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/convert_visitor_request"
            examples:
              successful:
                summary: successful
                value:
                  visitor:
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                  user:
                    email: foo@bar.com
                  type: user
components:
  schemas:
    activity_log:
      title: Activity Log
      type: object
      description: Activities performed by admins.
      nullable: true
      properties:
        id:
          type: string
          description: The id representing the activity.
          example: '6'
        performed_by:
          type: object
          description: An object representing the admin who performed the activity.
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `admin`.
              example: admin
            id:
              type: string
              description: The id representing the admin.
              example: '1295'
            email:
              type: string
              description: The email of the admin.
              example: john@example.com
            ip:
              type: string
              description: The IP address of the admin.
              example: 198.51.100.255
        metadata:
          type: object
        created_at:
          type: integer
          format: date-time
          description: The time the activity was created.
          example: 1671028894
        activity_type:
          type: string
          enum:
          - admin_assignment_limit_change
          - admin_away_mode_change
          - admin_deletion
          - admin_deprovisioned
          - admin_impersonation_end
          - admin_impersonation_start
          - admin_invite_change
          - admin_invite_creation
          - admin_invite_deletion
          - admin_login_failure
          - admin_login_success
          - admin_logout
          - admin_password_reset_request
          - admin_password_reset_success
          - admin_permission_change
          - admin_provisioned
          - admin_two_factor_auth_change
          - admin_unauthorized_sign_in_method
          - app_admin_join
          - app_authentication_method_change
          - app_data_deletion
          - app_data_export
          - app_google_sso_domain_change
          - app_identity_verification_change
          - app_name_change
          - app_outbound_address_change
          - app_package_installation
          - app_package_token_regeneration
          - app_package_uninstallation
          - app_team_creation
          - app_team_deletion
          - app_team_membership_modification
          - app_timezone_change
          - app_webhook_creation
          - app_webhook_deletion
          - articles_in_messenger_enabled_change
          - bulk_delete
          - bulk_export
          - campaign_deletion
          - campaign_state_change
          - conversation_part_deletion
          - conversation_topic_change
          - conversation_topic_creation
          - conversation_topic_deletion
          - help_center_settings_change
          - inbound_conversations_change
          - inbox_access_change
          - message_deletion
          - message_state_change
          - messenger_look_and_feel_change
          - messenger_search_required_change
          - messenger_spaces_change
          - office_hours_change
          - role_change
          - role_creation
          - role_deletion
          - ruleset_activation_title_preview
          - ruleset_creation
          - ruleset_deletion
          - search_browse_enabled_change
          - search_browse_required_change
          - seat_change
          - seat_revoke
          - security_settings_change
          - temporary_expectation_change
          - upfront_email_collection_change
          - welcome_message_change
          example: app_name_change
        activity_description:
          type: string
          description: A sentence or two describing the activity.
          example: Admin updated the app's name to "My App".
    activity_log_list:
      title: Paginated Response
      type: object
      description: A paginated list of activity logs.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `activity_log.list`.
          example: activity_log.list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        activity_logs:
          type: array
          description: An array of activity logs
          items:
            "$ref": "#/components/schemas/activity_log"
    addressable_list:
      title: Addressable List
      type: object
      nullable: false
      description: A list used to access other resources from a parent model.
      properties:
        type:
          type: string
          format: uri
          description: The addressable object type
          example: note
        id:
          type: string
          description: The id of the addressable object
          example: '123'
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/notes"
    admin:
      title: Admin
      type: object
      x-tags:
      - Admins
      description: Admins are teammate accounts that have access to a workspace.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Hoban Washburne
        email:
          type: string
          description: The email of the admin.
          example: wash@serenity.io
        job_title:
          type: string
          description: The job title of the admin.
          example: Philosopher
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This object represents the avatar associated with the admin.
          example:
          - 814865
          items:
            type: integer
        avatar:
          type: string
          format: uri
          nullable: true
          description: Image for the associated team or teammate
          example: https://picsum.photos/200/300
        team_priority_level:
          "$ref": "#/components/schemas/team_priority_level"
    admin_list:
      title: Admins
      type: object
      description: A list of admins associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin.list`.
          example: admin.list
        admins:
          type: array
          description: A list of admins associated with a given workspace.
          items:
            "$ref": "#/components/schemas/admin"
    admin_priority_level:
      title: Admin Priority Level
      type: object
      nullable: true
      description: Admin priority levels for the team
      properties:
        primary_admin_ids:
          type: array
          description: The primary admin ids for the team
          nullable: true
          example:
          - 493881
          items:
            type: integer
        secondary_admin_ids:
          type: array
          description: The secondary admin ids for the team
          nullable: true
          example:
          - 814865
          items:
            type: integer
    admin_reply_conversation_request:
      title: Admin Reply
      type: object
      description: Payload of the request to reply on behalf of an admin
      properties:
        message_type:
          type: string
          enum:
          - comment
          - note
          - quick_reply
          example: comment
        type:
          type: string
          enum:
          - admin
          example: admin
        body:
          type: string
          description: The text body of the reply. Notes accept some HTML formatting.
            Must be present for comment and note message types.
          example: Hello there!
        admin_id:
          type: string
          description: The id of the admin who is authoring the comment.
          example: '3156780'
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        reply_options:
          title: Quick Reply Options
          type: array
          description: The quick reply options to display. Must be present for quick_reply
            message types.
          items:
            title: Quick Reply Option
            type: object
            properties:
              text:
                type: string
                description: The text to display in this quick reply option.
              uuid:
                type: string
                format: uuid
                description: A unique identifier for this quick reply option. This
                  value will be available within the metadata of the comment conversation
                  part that is created when a user clicks on this reply option.
            required:
            - text
            - uuid
        attachment_urls:
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
        attachment_files:
          type: array
          description: A list of files that will be added as attachments. You can
            include up to 10 files
          items:
            "$ref": "#/components/schemas/conversation_attachment_files"
          maxItems: 10
      required:
      - message_type
      - type
      - admin_id
    admin_reply_ticket_request:
      title: Admin Reply on ticket
      type: object
      description: Payload of the request to reply on behalf of an admin
      properties:
        message_type:
          type: string
          enum:
          - comment
          - note
          - quick_reply
          example: comment
        type:
          type: string
          enum:
          - admin
          example: admin
        body:
          type: string
          description: The text body of the reply. Notes accept some HTML formatting.
            Must be present for comment and note message types.
          example: Hello there!
        admin_id:
          type: string
          description: The id of the admin who is authoring the comment.
          example: '3156780'
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        reply_options:
          title: Quick Reply Options
          type: array
          description: The quick reply options to display. Must be present for quick_reply
            message types.
          items:
            title: Quick Reply Option
            type: object
            properties:
              text:
                type: string
                description: The text to display in this quick reply option.
              uuid:
                type: string
                format: uuid
                description: A unique identifier for this quick reply option. This
                  value will be available within the metadata of the comment ticket
                  part that is created when a user clicks on this reply option.
            required:
            - text
            - uuid
        attachment_urls:
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
      required:
      - message_type
      - type
      - admin_id
    admin_with_app:
      title: Admin
      type: object
      description: Admins are the teammate accounts that have access to a workspace
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Hoban Washburne
        email:
          type: string
          description: The email of the admin.
          example: wash@serenity.io
        job_title:
          type: string
          description: The job title of the admin.
          example: Philosopher
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This is a list of ids of the teams that this admin is part
            of.
          example:
          - 814865
          items:
            type: integer
        avatar:
          type: object
          description: This object represents the avatar associated with the admin.
          properties:
            type:
              type: string
              description: This is a string that identifies the type of the object.
                It will always have the value `avatar`.
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the admin.
              example: https://example.com/avatar.png
        email_verified:
          type: boolean
          description: Identifies if this admin's email is verified.
          nullable: true
          example: true
        app:
          "$ref": "#/components/schemas/app"
          nullable: true
          description: App that the admin belongs to.
    ai_agent:
      title: AI Agent
      type: object
      x-tags:
      - Ai Agent
      description: Data related to AI Agent involvement in the conversation.
      properties:
        source_type:
          type: string
          description: The type of the source that triggered AI Agent involvement
            in the conversation.
          enum:
          - essentials_plan_setup
          - profile
          - workflow
          - workflow_preview
          - fin_preview
          example: workflow
        source_title:
          type: string
          description: The title of the source that triggered AI Agent involvement
            in the conversation. If this is `essentials_plan_setup` then it will return
            null.
          example: My AI Workflow
          nullable: true
        last_answer_type:
          type: string
          description: The type of the last answer delviered by AI Agent. If no answer
            was delivered then this will return null
          enum:
          -
          - ai_answer
          - custom_answer
          example: ai_answer
        resolution_state:
          type: string
          description: The resolution state of AI Agent. If no AI or custom answer
            has been delivered then this will return `abandoned`.
          enum:
          - assumed_resolution
          - confirmed_resolution
          - routed_to_team
          - abandoned
          example: assumed_resolution
        rating:
          type: integer
          description: The customer satisfaction rating given to AI Agent, from 1-5.
          example: 4
        rating_remark:
          type: string
          description: The customer satisfaction rating remark given to AI Agent.
          example: Very helpful!
        content_sources:
          "$ref": "#/components/schemas/content_sources_list"
    app:
      title: App
      type: object
      description: App is a workspace on Intercom
      nullable: true
      properties:
        type:
          type: string
          description: ''
          default: app
          example: app
        id_code:
          type: string
          description: The id of the app.
          example: xyz789
        name:
          type: string
          description: The name of the app.
          example: ACME
        region:
          type: string
          description: The Intercom region the app is located in.
          example: US
        timezone:
          type: string
          description: The timezone of the region where the app is located.
          example: America/Los_Angeles
        created_at:
          type: integer
          description: When the app was created.
          example: 1671465577
        identity_verification:
          type: boolean
          description: Whether or not the app uses identity verification.
          example: false
    article:
      title: Article
      type: object
      x-tags:
      - Articles
      description: The Articles API is a central place to gather all information and
        take actions on your articles. Articles can live within collections and sections,
        or alternatively they can stand alone.
      properties:
        statistics:
          nullable: true
          "$ref": "#/components/schemas/article_statistics"
      allOf:
      - "$ref": "#/components/schemas/article_list_item"
    article_content:
      title: Article Content
      type: object
      description: The Content of an Article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_content` .
          enum:
          -
          - article_content
          example: article_content
          nullable: true
        title:
          type: string
          description: The title of the article.
          example: How to create a new article
        description:
          type: string
          description: The description of the article.
          example: This article will show you how to create a new article.
        body:
          type: string
          description: The body of the article.
          example: This is the body of the article.
        author_id:
          type: integer
          description: The ID of the author of the article.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft` .
          enum:
          - published
          - draft
          example: draft
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created (seconds).
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated (seconds).
          example: 1663597260
        url:
          type: string
          description: The URL of the article.
          example: http://intercom.test/help/en/articles/3-default-language
    article_list:
      title: Articles
      type: object
      description: This will return a list of articles for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of articles.
          example: 1
        data:
          type: array
          description: An array of Article objects
          items:
            "$ref": "#/components/schemas/article_list_item"
    article_list_item:
      title: Articles
      type: object
      x-tags:
      - Articles
      description: The data returned about your articles when you list them.
      properties:
        type:
          type: string
          description: The type of object - `article`.
          enum:
          - article
          default: article
          example: article
        id:
          type: string
          description: The unique identifier for the article which is given by Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the article belongs to.
          example: hfi1bx4l
        title:
          type: string
          description: The title of the article. For multilingual articles, this will
            be the title of the default language's content.
          example: Default language title
        description:
          type: string
          nullable: true
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Default language description
        body:
          type: string
          nullable: true
          description: The body of the article in HTML. For multilingual articles,
            this will be the body of the default language's content.
          example: Default language body in html
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft`. For multilingual
            articles, this will be the state of the default language's content.
          enum:
          - published
          - draft
          default: draft
          example: published
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created. For multilingual articles,
            this will be the timestamp of creation of the default language's content
            in seconds.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated. For multilingual
            articles, this will be the timestamp of last update of the default language's
            content in seconds.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the article. For multilingual articles, this will
            be the URL of the default language's content.
          example: http://intercom.test/help/en/articles/3-default-language
        parent_id:
          type: integer
          nullable: true
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '125685'
        parent_ids:
          type: array
          description: The ids of the article's parent collections or sections. An
            article without this field stands alone.
          items:
            type: integer
          example:
          - 18
          - 19
        parent_type:
          type: string
          nullable: true
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/article_translated_content"
    article_search_highlights:
      title: Article Search Highlights
      type: object
      x-tags:
      - Articles
      description: The highlighted results of an Article search. In the examples provided
        my search query is always "my query".
      properties:
        article_id:
          type: string
          description: The ID of the corresponding article.
          example: '123'
        highlighted_title:
          type: array
          description: An Article title highlighted.
          items:
            type: object
            description: A highlighted article title.
            properties:
              type:
                type: string
                description: The type of text - `highlight` or `plain`.
                enum:
                - highlight
                - plain
                example: 'The highlight is '
              text:
                type: string
                description: The text of the title.
                example: my query
        highlighted_summary:
          type: array
          description: An Article description and body text highlighted.
          items:
            type: array
            description: An array containing the highlighted summary text split into
              chunks of plain and highlighted text.
            items:
              type: object
              description: An instance of highlighted summary text.
              properties:
                type:
                  type: string
                  description: The type of text - `highlight` or `plain`.
                  enum:
                  - highlight
                  - plain
                  example: 'How to highlight '
                text:
                  type: string
                  description: The text of the title.
                  example: my query
    article_search_response:
      title: Article Search Response
      type: object
      x-tags:
      - Articles
      description: The results of an Article search
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        total_count:
          type: integer
          description: The total number of Articles matching the search query
          example: 5
        data:
          type: object
          description: An object containing the results of the search.
          properties:
            articles:
              type: array
              description: An array of Article objects
              items:
                "$ref": "#/components/schemas/article"
            highlights:
              type: array
              description: A corresponding array of highlighted Article content
              items:
                "$ref": "#/components/schemas/article_search_highlights"
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    article_statistics:
      title: Article Statistics
      type: object
      description: The statistics of an article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_statistics`.
          enum:
          - article_statistics
          default: article_statistics
          example: article_statistics
        views:
          type: integer
          description: The number of total views the article has received.
          example: 10
        conversions:
          type: integer
          description: The number of conversations started from the article.
          example: 0
        reactions:
          type: integer
          description: The number of total reactions the article has received.
          example: 10
        happy_reaction_percentage:
          type: number
          format: float
          description: The percentage of happy reactions the article has received
            against other types of reaction.
          example: 40.0
        neutral_reaction_percentage:
          type: number
          format: float
          description: The percentage of neutral reactions the article has received
            against other types of reaction.
          example: 40.0
        sad_reaction_percentage:
          type: number
          format: float
          description: The percentage of sad reactions the article has received against
            other types of reaction.
          example: 20.0
    article_translated_content:
      title: Article Translated Content
      type: object
      description: The Translated Content of an Article. The keys are the locale codes
        and the values are the translated content of the article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - article_translated_content.
          enum:
          -
          - article_translated_content
          example: article_translated_content
          nullable: true
        ar:
          description: The content of the article in Arabic
          "$ref": "#/components/schemas/article_content"
        bg:
          description: The content of the article in Bulgarian
          "$ref": "#/components/schemas/article_content"
        bs:
          description: The content of the article in Bosnian
          "$ref": "#/components/schemas/article_content"
        ca:
          description: The content of the article in Catalan
          "$ref": "#/components/schemas/article_content"
        cs:
          description: The content of the article in Czech
          "$ref": "#/components/schemas/article_content"
        da:
          description: The content of the article in Danish
          "$ref": "#/components/schemas/article_content"
        de:
          description: The content of the article in German
          "$ref": "#/components/schemas/article_content"
        el:
          description: The content of the article in Greek
          "$ref": "#/components/schemas/article_content"
        en:
          description: The content of the article in English
          "$ref": "#/components/schemas/article_content"
        es:
          description: The content of the article in Spanish
          "$ref": "#/components/schemas/article_content"
        et:
          description: The content of the article in Estonian
          "$ref": "#/components/schemas/article_content"
        fi:
          description: The content of the article in Finnish
          "$ref": "#/components/schemas/article_content"
        fr:
          description: The content of the article in French
          "$ref": "#/components/schemas/article_content"
        he:
          description: The content of the article in Hebrew
          "$ref": "#/components/schemas/article_content"
        hr:
          description: The content of the article in Croatian
          "$ref": "#/components/schemas/article_content"
        hu:
          description: The content of the article in Hungarian
          "$ref": "#/components/schemas/article_content"
        id:
          description: The content of the article in Indonesian
          "$ref": "#/components/schemas/article_content"
        it:
          description: The content of the article in Italian
          "$ref": "#/components/schemas/article_content"
        ja:
          description: The content of the article in Japanese
          "$ref": "#/components/schemas/article_content"
        ko:
          description: The content of the article in Korean
          "$ref": "#/components/schemas/article_content"
        lt:
          description: The content of the article in Lithuanian
          "$ref": "#/components/schemas/article_content"
        lv:
          description: The content of the article in Latvian
          "$ref": "#/components/schemas/article_content"
        mn:
          description: The content of the article in Mongolian
          "$ref": "#/components/schemas/article_content"
        nb:
          description: The content of the article in Norwegian
          "$ref": "#/components/schemas/article_content"
        nl:
          description: The content of the article in Dutch
          "$ref": "#/components/schemas/article_content"
        pl:
          description: The content of the article in Polish
          "$ref": "#/components/schemas/article_content"
        pt:
          description: The content of the article in Portuguese (Portugal)
          "$ref": "#/components/schemas/article_content"
        ro:
          description: The content of the article in Romanian
          "$ref": "#/components/schemas/article_content"
        ru:
          description: The content of the article in Russian
          "$ref": "#/components/schemas/article_content"
        sl:
          description: The content of the article in Slovenian
          "$ref": "#/components/schemas/article_content"
        sr:
          description: The content of the article in Serbian
          "$ref": "#/components/schemas/article_content"
        sv:
          description: The content of the article in Swedish
          "$ref": "#/components/schemas/article_content"
        tr:
          description: The content of the article in Turkish
          "$ref": "#/components/schemas/article_content"
        vi:
          description: The content of the article in Vietnamese
          "$ref": "#/components/schemas/article_content"
        pt-BR:
          description: The content of the article in Portuguese (Brazil)
          "$ref": "#/components/schemas/article_content"
        zh-CN:
          description: The content of the article in Chinese (China)
          "$ref": "#/components/schemas/article_content"
        zh-TW:
          description: The content of the article in Chinese (Taiwan)
          "$ref": "#/components/schemas/article_content"
    assign_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        message_type:
          type: string
          enum:
          - assignment
          example: assignment
        type:
          type: string
          enum:
          - admin
          - team
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        assignee_id:
          type: string
          description: The `id` of the `admin` or `team` which will be assigned the
            conversation. A conversation can be assigned both an admin and a team.\nSet
            `0` if you want this assign to no admin or team (ie. Unassigned).
          example: '4324241'
        body:
          type: string
          description: Optionally you can send a response in the conversation when
            it is assigned.
          example: Let me pass you over to one of my colleagues.
      required:
      - message_type
      - type
      - admin_id
      - assignee_id
    attach_contact_to_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is adding the new participant.
          example: '12345'
        customer:
          type: object
          oneOf:
          - title: Intercom User ID
            properties:
              intercom_user_id:
                type: string
                description: The identifier for the contact as given by Intercom.
                example: 6329bd9ffe4e2e91dac76188
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - intercom_user_id
          - title: User ID
            properties:
              user_id:
                type: string
                description: The external_id you have defined for the contact who
                  is being added as a participant.
                example: 6329bd9ffe4e2e91dac76188
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - user_id
          - title: Email
            properties:
              email:
                type: string
                description: The email you have defined for the contact who is being
                  added as a participant.
                example: winstonsmith@truth.org
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - email
    close_conversation_request:
      title: Close Conversation Request
      type: object
      description: Payload of the request to close a conversation
      properties:
        message_type:
          type: string
          enum:
          - close
          example: close
        type:
          type: string
          enum:
          - admin
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        body:
          type: string
          description: Optionally you can leave a message in the conversation to provide
            additional context to the user and other teammates.
          example: " This conversation is now closed!"
      required:
      - message_type
      - type
      - admin_id
    collection:
      title: Collection
      type: object
      x-tags:
      - Help Center
      description: Collections are top level containers for Articles within the Help
        Center.
      properties:
        id:
          type: string
          description: The unique identifier for the collection which is given by
            Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the collection belongs to.
          example: hfi1bx4l
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: Default language name
        description:
          type: string
          nullable: true
          description: The description of the collection. For multilingual help centers,
            this will be the description of the collection for the default language.
          example: Default language description
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created (seconds). For multilingual
            articles, this will be the timestamp of creation of the default language's
            content.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated (seconds). For multilingual
            articles, this will be the timestamp of last update of the default language's
            content.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the collection. For multilingual help centers, this
            will be the URL of the collection for the default language.
          example: http://intercom.test/help/collection/name
        icon:
          type: string
          nullable: true
          description: The icon of the collection.
          example: book-bookmark
        order:
          type: integer
          description: The order of the section in relation to others sections within
            a collection. Values go from `0` upwards. `0` is the default if there's
            no order.
          example: '1'
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it is the first
            level collection.
          example: '6871118'
        help_center_id:
          type: integer
          nullable: true
          description: The id of the help center the collection is in.
          example: '123'
    collection_list:
      title: Collections
      type: object
      description: This will return a list of Collections for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of collections.
          example: 1
        data:
          type: array
          description: An array of collection objects
          items:
            "$ref": "#/components/schemas/collection"
    company:
      title: Company
      type: object
      x-tags:
      - Companies
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      properties:
        type:
          type: string
          description: Value is `company`
          enum:
          - company
          example: company
        id:
          type: string
          description: The Intercom defined id representing the company.
          example: 531ee472cce572a6ec000006
        name:
          type: string
          description: The name of the company.
          example: Blue Sun
        app_id:
          type: string
          description: The Intercom defined code of the workspace the company is associated
            to.
          example: ecahpwf5
        plan:
          type: object
          properties:
            type:
              type: string
              description: Value is always "plan"
              example: plan
            id:
              type: string
              description: The id of the plan
              example: '269315'
            name:
              type: string
              description: The name of the plan
              example: Pro
        company_id:
          type: string
          description: The company id you have defined for the company.
          example: '6'
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1663597223
        created_at:
          type: integer
          description: The time the company was added in Intercom.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the company was updated.
          example: 1663597223
        last_request_at:
          type: integer
          description: The time the company last recorded making a request.
          example: 1663597223
        size:
          type: integer
          description: The number of employees in the company.
          example: 100
        website:
          type: string
          description: The URL for the company website.
          example: https://www.intercom.com
        industry:
          type: string
          description: The industry that the company operates in.
          example: Software
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business.
          example: 100
        session_count:
          type: integer
          description: How many sessions the company has recorded.
          example: 100
        user_count:
          type: integer
          description: The number of users in the company.
          example: 100
        custom_attributes:
          type: object
          description: The custom attributes you have set on the company.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        tags:
          type: object
          description: The list of tags associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - tag.list
            tags:
              type: array
              items:
                items:
                  "$ref": "#/components/schemas/tag"
        segments:
          type: object
          description: The list of segments associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - segment.list
            segments:
              type: array
              items:
                "$ref": "#/components/schemas/segment"
    company_attached_contacts:
      title: Company Attached Contacts
      type: object
      description: A list of Contact Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          description: An array containing Contact Objects
          items:
            "$ref": "#/components/schemas/contact"
        total_count:
          type: integer
          description: The total number of contacts
          example: 100
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    company_attached_segments:
      title: Company Attached Segments
      type: object
      description: A list of Segment Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          description: An array containing Segment Objects
          items:
            "$ref": "#/components/schemas/segment"
    company_list:
      title: Companies
      type: object
      description: This will return a list of companies for the App.
      properties:
        type:
          type: string
          description: The type of object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: The total number of companies.
          example: 100
        data:
          type: array
          description: An array containing Company Objects.
          items:
            "$ref": "#/components/schemas/company"
    company_scroll:
      title: Company Scroll
      type: object
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          items:
            "$ref": "#/components/schemas/company"
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: The total number of companies
          nullable: true
          example: 100
        scroll_param:
          type: string
          description: The scroll parameter to use in the next request to fetch the
            next page of results.
          example: 25b649f7-4d33-4ef6-88f5-60e5b8244309
    contact:
      title: Contact
      type: object
      x-tags:
      - Contacts
      description: Contact are the objects that represent your leads and users in
        Intercom.
      properties:
        type:
          type: string
          description: The type of object.
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        workspace_id:
          type: string
          description: The id of the workspace which the contact belongs to.
          example: ecahpwf5
        role:
          type: string
          description: The role of the contact.
          example: user
        email:
          type: string
          description: The contact's email.
          example: joe@example.com
        email_domain:
          type: string
          description: The contact's email domain.
          example: example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone.
          example: "+1123456789"
        formatted_phone:
          type: string
          nullable: true
          description: The contacts phone number normalized to the E164 format
          example: "+1123456789"
        name:
          type: string
          nullable: true
          description: The contacts name.
          example: John Doe
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact.
          example: 123
        has_hard_bounced:
          type: boolean
          description: Whether the contact has had an email sent to them hard bounce.
          example: true
        marked_email_as_spam:
          type: boolean
          description: Whether the contact has marked an email sent to them as spam.
          example: true
        unsubscribed_from_emails:
          type: boolean
          description: Whether the contact is unsubscribed from emails.
          example: true
        created_at:
          type: integer
          format: date-time
          description: "(UNIX timestamp) The time when the contact was created."
          example: 1571672154
        updated_at:
          type: integer
          format: date-time
          description: "(UNIX timestamp) The time when the contact was last updated."
          example: 1571672154
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time specified for when a contact signed
            up."
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact was last seen (either
            where the Intercom Messenger was installed or when specified manually)."
          example: 1571672154
        last_replied_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last messaged in."
          example: 1571672154
        last_contacted_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact was last messaged."
          example: 1571672154
        last_email_opened_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last opened an
            email."
          example: 1571672154
        last_email_clicked_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last clicked a
            link in an email."
          example: 1571672154
        language_override:
          type: string
          nullable: true
          description: A preferred language setting for the contact, used by the Intercom
            Messenger even if their browser settings change.
          example: en
        browser:
          type: string
          nullable: true
          description: The name of the browser which the contact is using.
          example: Chrome
        browser_version:
          type: string
          nullable: true
          description: The version of the browser which the contact is using.
          example: 80.0.3987.132
        browser_language:
          type: string
          nullable: true
          description: The language set by the browser which the contact is using.
          example: en-US
        os:
          type: string
          nullable: true
          description: The operating system which the contact is using.
          example: Mac OS X
        android_app_name:
          type: string
          nullable: true
          description: The name of the Android app which the contact is using.
          example: Intercom
        android_app_version:
          type: string
          nullable: true
          description: The version of the Android app which the contact is using.
          example: 5.0.0
        android_device:
          type: string
          nullable: true
          description: The Android device which the contact is using.
          example: Pixel 3
        android_os_version:
          type: string
          nullable: true
          description: The version of the Android OS which the contact is using.
          example: '10'
        android_sdk_version:
          type: string
          nullable: true
          description: The version of the Android SDK which the contact is using.
          example: '28'
        android_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: "(UNIX timestamp) The time when the contact was last seen on
            an Android device."
          example: 1571672154
        ios_app_name:
          type: string
          nullable: true
          description: The name of the iOS app which the contact is using.
          example: Intercom
        ios_app_version:
          type: string
          nullable: true
          description: The version of the iOS app which the contact is using.
          example: 5.0.0
        ios_device:
          type: string
          nullable: true
          description: The iOS device which the contact is using.
          example: iPhone 11
        ios_os_version:
          type: string
          nullable: true
          description: The version of iOS which the contact is using.
          example: 13.3.1
        ios_sdk_version:
          type: string
          nullable: true
          description: The version of the iOS SDK which the contact is using.
          example: 13.3.1
        ios_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: "(UNIX timestamp) The last time the contact used the iOS app."
          example: 1571672154
        custom_attributes:
          type: object
          description: The custom attributes which are set for the contact.
        avatar:
          type: object
          nullable: true
          properties:
            type:
              type: string
              description: The type of object
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: An image URL containing the avatar of a contact.
              example: https://example.org/128Wash.jpg
        tags:
          "$ref": "#/components/schemas/contact_tags"
        notes:
          "$ref": "#/components/schemas/contact_notes"
        companies:
          "$ref": "#/components/schemas/contact_companies"
        location:
          "$ref": "#/components/schemas/contact_location"
        social_profiles:
          "$ref": "#/components/schemas/contact_social_profiles"
    contact_archived:
      title: Contact Archived
      type: object
      description: archived contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
          - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        archived:
          type: boolean
          description: Whether the contact is archived or not.
          example: true
    contact_attached_companies:
      title: Contact Attached Companies
      type: object
      description: A list of Company Objects
      properties:
        type:
          type: string
          description: The type of object
          enum:
          - list
          example: list
        companies:
          type: array
          description: An array containing Company Objects
          items:
            "$ref": "#/components/schemas/company"
        total_count:
          type: integer
          description: The total number of companies associated to this contact
          example: 100
        pages:
          "$ref": "#/components/schemas/pages_link"
    contact_companies:
      title: Contact companies
      type: object
      nullable: false
      description: An object containing companies meta data about the companies that
        a contact has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/companies"
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_deleted:
      title: Contact Deleted
      type: object
      description: deleted contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
          - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        deleted:
          type: boolean
          description: Whether the contact is deleted or not.
          example: true
    contact_list:
      title: Contact List
      type: object
      description: Contacts are your users in Intercom.
      properties:
        type:
          type: string
          description: Always list
          enum:
          - list
          example: list
        data:
          type: array
          description: The list of contact objects
          items:
            "$ref": "#/components/schemas/contact"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 100
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    contact_location:
      title: Contact Location
      type: object
      nullable: false
      description: An object containing location meta data about a Intercom contact.
      properties:
        type:
          type: string
          nullable: true
          description: Always location
          example: location
        country:
          type: string
          nullable: true
          description: The country that the contact is located in
          example: Ireland
        region:
          type: string
          nullable: true
          description: The overal region that the contact is located in
          example: Dublin
        city:
          type: string
          nullable: true
          description: The city that the contact is located in
          example: Dublin
    contact_notes:
      title: Contact notes
      type: object
      nullable: false
      description: An object containing notes meta data about the notes that a contact
        has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        data:
          type: array
          description: This object represents the notes attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/notes"
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_reference:
      title: Contact Reference
      type: object
      description: reference to contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
          - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
    contact_reply_base_request:
      title: Contact Reply Base Object
      type: object
      properties:
        message_type:
          type: string
          enum:
          - comment
        type:
          type: string
          enum:
          - user
        body:
          type: string
          description: The text body of the comment.
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        attachment_urls:
          title: Attachment URLs
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
      required:
      - message_type
      - type
      - body
    contact_reply_conversation_request:
      title: Contact Reply
      oneOf:
      - "$ref": "#/components/schemas/contact_reply_intercom_user_id_request"
      - "$ref": "#/components/schemas/contact_reply_email_request"
      - "$ref": "#/components/schemas/contact_reply_user_id_request"
    contact_reply_email_request:
      title: Email
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `email`
      properties:
        email:
          type: string
          description: The email you have defined for the user.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments.
          items:
            "$ref": "#/components/schemas/conversation_attachment_files"
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      required:
      - email
    contact_reply_intercom_user_id_request:
      title: Intercom User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `intercom_user_id`
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      properties:
        intercom_user_id:
          type: string
          description: The identifier for the contact as given by Intercom.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments.
          items:
            "$ref": "#/components/schemas/conversation_attachment_files"
      required:
      - intercom_user_id
    contact_reply_ticket_email_request:
      title: Email
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `email`
      properties:
        email:
          type: string
          description: The email you have defined for the user.
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      required:
      - email
    contact_reply_ticket_intercom_user_id_request:
      title: Intercom User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `intercom_user_id`
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      properties:
        intercom_user_id:
          type: string
          description: The identifier for the contact as given by Intercom.
      required:
      - intercom_user_id
    contact_reply_ticket_request:
      title: Contact Reply on ticket
      oneOf:
      - "$ref": "#/components/schemas/contact_reply_ticket_intercom_user_id_request"
      - "$ref": "#/components/schemas/contact_reply_ticket_user_id_request"
      - "$ref": "#/components/schemas/contact_reply_ticket_email_request"
    contact_reply_ticket_user_id_request:
      title: User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `user_id`
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      properties:
        user_id:
          type: string
          description: The external_id you have defined for the contact.
      required:
      - user_id
    contact_reply_user_id_request:
      title: User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `user_id`
      allOf:
      - "$ref": "#/components/schemas/contact_reply_base_request"
      properties:
        user_id:
          type: string
          description: The external_id you have defined for the contact.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments. You can
            include up to 10 files.
          items:
            "$ref": "#/components/schemas/conversation_attachment_files"
          maxItems: 10
      required:
      - user_id
    contact_segments:
      title: Segments
      type: object
      description: A list of segments objects attached to a specific contact.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: Segment objects associated with the contact.
          items:
            "$ref": "#/components/schemas/segment"
    contact_social_profiles:
      title: Social Profile
      type: object
      nullable: false
      description: An object containing social profiles that a contact has.
      properties:
        data:
          type: array
          description: A list of social profiles objects associated with the contact.
          items:
            "$ref": "#/components/schemas/social_profile"
    contact_subscription_types:
      title: Contact Subscription Types
      type: object
      nullable: false
      description: An object containing Subscription Types meta data about the SubscriptionTypes
        that a contact has.
      properties:
        data:
          type: array
          description: This object represents the subscriptions attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: Url to get more subscription type resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/subscriptions"
        total_count:
          type: integer
          description: Int representing the total number of subscription types attached
            to this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_tags:
      title: Contact Tags
      type: object
      nullable: true
      description: An object containing tags meta data about the tags that a contact
        has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        data:
          type: array
          description: This object represents the tags attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: url to get more tag resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/tags"
        total_count:
          type: integer
          description: Int representing the total number of tags attached to this
            contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_unarchived:
      title: Contact Unarchived
      type: object
      description: unarchived contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
          - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        archived:
          type: boolean
          description: Whether the contact is archived or not.
          example: false
    content_import_source:
      title: Content Import Source
      type: object
      x-tags:
      - AI Content
      description: An external source for External Pages that you add to your Fin
        Content Library.
      nullable: false
      properties:
        type:
          type: string
          description: Always external_page
          enum:
          - content_import_source
          default: content_import_source
          example: content_import_source
        id:
          type: integer
          description: The unique identifier for the content import source which is
            given by Intercom.
          example: 1234
        last_synced_at:
          type: integer
          format: date-time
          description: The time when the content import source was last synced.
          example: 1672928610
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`.
          enum:
          - api
          - automatic
          - manual
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
          - active
          - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the root of the external source.
          example: https://help.example.com/
        created_at:
          type: integer
          format: date-time
          description: The time when the content import source was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the content import source was last updated.
          example: 1672928610
      required:
      - id
      - type
      - url
      - sync_behavior
      - status
      - created_at
      - updated_at
      - last_synced_at
    content_import_sources_list:
      title: Content Import Sources
      type: object
      x-tags:
      - AI Content
      description: This will return a list of the content import sources for the App.
      nullable: false
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/pages_link"
        total_count:
          type: integer
          description: A count of the total number of content import sources.
          example: 1
        data:
          type: array
          description: An array of Content Import Source objects
          items:
            "$ref": "#/components/schemas/content_import_source"
    content_source:
      title: Content Source
      type: object
      x-tags:
      - AI Content Source
      description: The content source used by AI Agent in the conversation.
      properties:
        content_type:
          type: string
          description: The type of the content source.
          example: content_snippet
          enum:
          - file
          - article
          - external_content
          - content_snippet
          - workflow_connector_action
        url:
          type: string
          description: The internal URL linking to the content source for teammates.
          example: "/fin-ai-agent/content?content=content_snippet&id=3234924"
        title:
          type: string
          description: The title of the content source.
          example: My internal content snippet
        locale:
          type: string
          description: The ISO 639 language code of the content source.
          example: en
    content_sources_list:
      title: Content Source List
      nullable: false
      properties:
        type:
          type: string
          enum:
          - content_source.list
          example: content_source.list
        total_count:
          type: integer
          description: The total number of content sources used by AI Agent in the
            conversation.
          example: 1
        content_sources:
          type: array
          description: The content sources used by AI Agent in the conversation.
          items:
            "$ref": "#/components/schemas/content_source"
    conversation:
      title: Conversation
      type: object
      x-tags:
      - Conversations
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.
          example: conversation
        id:
          type: string
          description: The id representing the conversation.
          example: '1295'
        title:
          type: string
          nullable: true
          description: The title given to the conversation.
          example: Conversation Title
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation was updated.
          example: 1663597260
        waiting_since:
          type: integer
          format: date-time
          nullable: true
          description: The last time a Contact responded to an Admin. In other words,
            the time a customer started waiting for a response. Set to null if last
            reply is from an Admin.
          example: 1663597260
        snoozed_until:
          type: integer
          format: date-time
          nullable: true
          description: If set this is the time in the future when this conversation
            will be marked as open. i.e. it will be in a snoozed state until this
            time. i.e. it will be in a snoozed state until this time.
          example: 1663597260
        open:
          type: boolean
          description: Indicates whether a conversation is open (true) or closed (false).
          example: true
        state:
          type: string
          enum:
          - open
          - closed
          - snoozed
          description: Can be set to "open", "closed" or "snoozed".
          example: open
        read:
          type: boolean
          description: Indicates whether a conversation has been read.
          example: true
        priority:
          type: string
          enum:
          - priority
          - not_priority
          description: If marked as priority, it will return priority or else not_priority.
          example: priority
        admin_assignee_id:
          type: integer
          nullable: true
          description: The id of the admin assigned to the conversation. If it's not
            assigned to an admin it will return null.
          example: 0
        team_assignee_id:
          type: string
          nullable: true
          description: The id of the team assigned to the conversation. If it's not
            assigned to a team it will return null.
          example: '5017691'
        tags:
          "$ref": "#/components/schemas/tags"
        conversation_rating:
          "$ref": "#/components/schemas/conversation_rating"
        source:
          "$ref": "#/components/schemas/conversation_source"
        contacts:
          "$ref": "#/components/schemas/conversation_contacts"
        teammates:
          "$ref": "#/components/schemas/conversation_teammates"
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
        first_contact_reply:
          "$ref": "#/components/schemas/conversation_first_contact_reply"
        sla_applied:
          "$ref": "#/components/schemas/sla_applied"
        statistics:
          "$ref": "#/components/schemas/conversation_statistics"
        conversation_parts:
          "$ref": "#/components/schemas/conversation_parts"
        linked_objects:
          "$ref": "#/components/schemas/linked_object_list"
        ai_agent_participated:
          type: boolean
          description: Indicates whether the AI Agent participated in the conversation.
          example: true
        ai_agent:
          "$ref": "#/components/schemas/ai_agent"
          nullable: true
    conversation_attachment_files:
      title: Conversation attachment files
      type: object
      description: Properties of the attachment files in a conversation part
      properties:
        content_type:
          type: string
          description: The content type of the file
          example: application/json
        data:
          type: string
          description: The base64 encoded file data.
          example: ewogICJ0ZXN0IjogMQp9
        name:
          type: string
          description: The name of the file.
          example: test.json
    conversation_contacts:
      title: Contacts
      type: object
      description: The list of contacts (users or leads) involved in this conversation.
        This will only contain one customer unless more were added via the group conversation
        feature.
      properties:
        type:
          type: string
          description: ''
          enum:
          - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts (users or leads) involved in this conversation.
            This will only contain one customer unless more were added via the group
            conversation feature.
          items:
            "$ref": "#/components/schemas/contact_reference"
    conversation_deleted:
      title: Conversation Deleted
      type: object
      description: deleted conversation object
      properties:
        id:
          type: string
          description: The unique identifier for the conversation.
          example: 5ba682d23d7cf92bef87bfd4
        object:
          type: string
          description: always conversation
          enum:
          - conversation
          example: conversation
        deleted:
          type: boolean
          description: Whether the conversation is deleted or not.
          example: true
    conversation_first_contact_reply:
      title: First contact reply
      type: object
      nullable: true
      description: An object containing information on the first users message. For
        a contact initiated message this will represent the users original message.
      properties:
        created_at:
          type: integer
          format: date-time
          description: ''
          example: 1663597223
        type:
          type: string
          description: ''
          example: conversation
        url:
          type: string
          nullable: true
          description: ''
          example: https://developers.intercom.com/
    conversation_list:
      title: Conversation List
      type: object
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.list
          enum:
          - conversation.list
          example: conversation.list
        conversations:
          type: array
          description: The list of conversation objects
          items:
            "$ref": "#/components/schemas/conversation"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 12345
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    conversation_part:
      title: Conversation Part
      type: object
      description: A Conversation Part represents a message in the conversation.
      properties:
        type:
          type: string
          description: Always conversation_part
          example: conversation_part
        id:
          type: string
          description: The id representing the conversation part.
          example: '3'
        part_type:
          type: string
          description: The type of conversation part.
          example: comment
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: "<p>Okay!</p>"
        created_at:
          type: integer
          format: date-time
          description: The time the conversation part was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation part was updated.
          example: 1663597260
        notified_at:
          type: integer
          format: date-time
          description: The time the user was notified with the conversation part.
          example: 1663597260
        assigned_to:
          "$ref": "#/components/schemas/reference"
          nullable: true
          description: The id of the admin that was assigned the conversation by this
            conversation_part (null if there has been no change in assignment.)
        author:
          "$ref": "#/components/schemas/conversation_part_author"
        attachments:
          title: Conversation part attachments
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/part_attachment"
        external_id:
          type: string
          nullable: true
          description: The external id of the conversation part
          example: abcd1234
        redacted:
          type: boolean
          description: Whether or not the conversation part has been redacted.
          example: false
    conversation_part_author:
      title: Conversation part author
      type: object
      description: The object who initiated the conversation, which can be a Contact,
        Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.
        For Twitter, this will be blank.
      properties:
        type:
          type: string
          description: The type of the author
          example: admin
        id:
          type: string
          description: The id of the author
          example: '274'
        name:
          type: string
          description: The name of the author
          example: Operator
        email:
          type: string
          format: email
          description: The email of the author
          example: operator+abcd1234@intercom.io
    conversation_parts:
      title: Conversation Parts
      type: object
      description: A list of Conversation Part objects for each part message in the
        conversation. This is only returned when Retrieving a Conversation, and ignored
        when Listing all Conversations. There is a limit of 500 parts.
      properties:
        type:
          type: string
          description: ''
          enum:
          - conversation_part.list
          example: conversation_part.list
        conversation_parts:
          title: Conversation Parts
          type: array
          description: A list of Conversation Part objects for each part message in
            the conversation. This is only returned when Retrieving a Conversation,
            and ignored when Listing all Conversations. There is a limit of 500 parts.
          items:
            "$ref": "#/components/schemas/conversation_part"
        total_count:
          type: integer
          description: ''
          example: 2
    conversation_rating:
      title: Conversation Rating
      type: object
      nullable: true
      description: The Conversation Rating object which contains information on the
        rating and/or remark added by a Contact and the Admin assigned to the conversation.
      properties:
        rating:
          type: integer
          description: The rating, between 1 and 5, for the conversation.
          example: 5
        remark:
          type: string
          description: An optional field to add a remark to correspond to the number
            rating
          example: ''
        created_at:
          type: integer
          format: date-time
          description: The time the rating was requested in the conversation being
            rated.
          example: 1671028894
        contact:
          "$ref": "#/components/schemas/contact_reference"
        teammate:
          "$ref": "#/components/schemas/reference"
    conversation_source:
      title: Conversation source
      type: object
      description: The Conversation Part that originated this conversation, which
        can be Contact, Admin, Campaign, Automated or Operator initiated.
      properties:
        type:
          type: string
          description: This includes conversation, email, facebook, instagram, phone_call,
            phone_switch, push, sms, twitter and whatsapp.
          example: conversation
        id:
          type: string
          description: The id representing the message.
          example: '3'
        delivered_as:
          type: string
          description: The conversation's initiation type. Possible values are customer_initiated,
            campaigns_initiated (legacy campaigns), operator_initiated (Custom bot),
            automated (Series and other outbounds with dynamic audience message) and
            admin_initiated (fixed audience message, ticket initiated by an admin,
            group email).
          example: operator_initiated
        subject:
          type: string
          description: Optional. The message subject. For Twitter, this will show
            a generic message regarding why the subject is obscured.
          example: ''
        body:
          type: string
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: "<p>Hey there!</p>"
        author:
          "$ref": "#/components/schemas/conversation_part_author"
        attachments:
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/part_attachment"
        url:
          type: string
          nullable: true
          description: The URL where the conversation was started. For Twitter, Email,
            and Bots, this will be blank.
          example:
        redacted:
          type: boolean
          description: Whether or not the source message has been redacted. Only applicable
            for contact initiated messages.
          example: false
    conversation_statistics:
      title: Conversation statistics
      type: object
      nullable: true
      description: A Statistics object containing all information required for reporting,
        with timestamps and calculated metrics.
      properties:
        type:
          type: string
          description: ''
          example: conversation_statistics
        time_to_assignment:
          type: integer
          description: Duration until last assignment before first admin reply. In
            seconds.
          example: 2310
        time_to_admin_reply:
          type: integer
          description: Duration until first admin reply. Subtracts out of business
            hours. In seconds.
          example: 2310
        time_to_first_close:
          type: integer
          description: Duration until conversation was closed first time. Subtracts
            out of business hours. In seconds.
          example: 2310
        time_to_last_close:
          type: integer
          description: Duration until conversation was closed last time. Subtracts
            out of business hours. In seconds.
          example: 2310
        median_time_to_reply:
          type: integer
          description: Median based on all admin replies after a contact reply. Subtracts
            out of business hours. In seconds.
          example: 2310
        first_contact_reply_at:
          type: integer
          format: date-time
          description: Time of first text conversation part from a contact.
          example: 1663597233
        first_assignment_at:
          type: integer
          format: date-time
          description: Time of first assignment after first_contact_reply_at.
          example: 1663597233
        first_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply after first_contact_reply_at.
          example: 1663597233
        first_close_at:
          type: integer
          format: date-time
          description: Time of first close after first_contact_reply_at.
          example: 1663597233
        last_assignment_at:
          type: integer
          format: date-time
          description: Time of last assignment after first_contact_reply_at.
          example: 1663597233
        last_assignment_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply since most recent assignment.
          example: 1663597233
        last_contact_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from a contact.
          example: 1663597233
        last_admin_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from an admin.
          example: 1663597233
        last_close_at:
          type: integer
          format: date-time
          description: Time of the last conversation close.
          example: 1663597233
        last_closed_by_id:
          type: string
          description: The last admin who closed the conversation. Returns a reference
            to an Admin object.
          example: c3po
        count_reopens:
          type: integer
          description: Number of reopens after first_contact_reply_at.
          example: 1
        count_assignments:
          type: integer
          description: Number of assignments after first_contact_reply_at.
          example: 1
        count_conversation_parts:
          type: integer
          description: Total number of conversation parts.
          example: 1
    conversation_teammates:
      title: Conversation teammates
      type: object
      nullable: true
      description: The list of teammates who participated in the conversation (wrote
        at least one conversation part).
      properties:
        type:
          type: string
          description: The type of the object - `admin.list`.
          example: admin.list
        teammates:
          type: array
          description: The list of teammates who participated in the conversation
            (wrote at least one conversation part).
          items:
            "$ref": "#/components/schemas/reference"
    convert_conversation_to_ticket_request:
      description: You can convert a Conversation to a Ticket
      type: object
      title: Convert Ticket Request Payload
      properties:
        ticket_type_id:
          type: string
          description: The ID of the type of ticket you want to convert the conversation
            to
          example: '1234'
        attributes:
          "$ref": "#/components/schemas/ticket_request_custom_attributes"
      required:
      - ticket_type_id
    convert_visitor_request:
      description: You can merge a Visitor to a Contact of role type lead or user.
      type: object
      title: Convert Visitor Request Payload
      properties:
        type:
          type: string
          description: Represents the role of the Contact model. Accepts `lead` or
            `user`.
          example: user
        user:
          type: object
          description: The unique identifiers retained after converting or merging.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom,
                which will be represented as external_id.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The contact's email, retained by default if one is present.
              example: winstonsmith@truth.org
          anyOf:
          - required:
            - id
          - required:
            - user_id
        visitor:
          type: object
          description: The unique identifiers to convert a single Visitor.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The visitor's email.
              example: winstonsmith@truth.org
          anyOf:
          - required:
            - id
          - required:
            - user_id
          - required:
            - email
      required:
      - type
      - user
      - visitor
    create_article_request:
      description: You can create an Article
      type: object
      title: Create Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: "<p>This is the body in html</p>"
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
          - published
          - draft
          example: draft
        parent_id:
          type: integer
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: 18
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          "$ref": "#/components/schemas/article_translated_content"
      required:
      - title
      - author_id
    create_collection_request:
      description: You can create a collection
      type: object
      title: Create Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it will be
            created as the first level collection.
          example: '6871118'
        help_center_id:
          type: integer
          nullable: true
          description: The id of the help center where the collection will be created.
            If `null` then it will be created in the default help center.
          example: '123'
      required:
      - name
    create_contact_request:
      description: Payload to create a contact
      type: object
      title: Create Contact Request Payload
      properties:
        role:
          type: string
          description: The role of the contact.
        external_id:
          type: string
          description: A unique identifier for the contact which is given to Intercom
        email:
          type: string
          description: The contacts email
          example: jdoe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone
          example: "+353871234567"
        name:
          type: string
          nullable: true
          description: The contacts name
          example: John Doe
        avatar:
          type: string
          nullable: true
          description: An image URL containing the avatar of a contact
          example: https://www.example.com/avatar_image.jpg
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: The time specified for when a contact signed up
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the contact was last seen (either where the Intercom
            Messenger was installed or when specified manually)
          example: 1571672154
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact
          example: 123
        unsubscribed_from_emails:
          type: boolean
          nullable: true
          description: Whether the contact is unsubscribed from emails
          example: true
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the contact
      anyOf:
      - required:
        - email
        title: Create contact with email
      - required:
        - external_id
        title: Create contact with external_id
      - required:
        - role
        title: Create contact with role
    create_content_import_source_request:
      title: Create Content Import Source Payload
      type: object
      description: You can add an Content Import Source to your Fin Content Library.
      nullable: false
      properties:
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`.
          enum:
          - api
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
          - active
          - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the content import source.
          example: https://help.example.com
      required:
      - sync_behavior
      - url
    create_conversation_request:
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      type: object
      title: Create Conversation Request Payload
      properties:
        from:
          type: object
          properties:
            type:
              type: string
              enum:
              - lead
              - user
              - contact
              description: The role associated to the contact - user or lead.
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              format: uuid
              minLength: 24
              maxLength: 24
              example: 536e564f316c83104c000020
          required:
          - type
          - id
        body:
          type: string
          description: The content of the message. HTML is not supported.
          example: Hello
      required:
      - from
      - body
    create_data_attribute_request:
      description: ''
      type: object
      title: Create Data Attribute Request
      properties:
        name:
          type: string
          description: The name of the data attribute.
          example: My Data Attribute
        model:
          type: string
          description: The model that the data attribute belongs to.
          enum:
          - contact
          - company
          example: contact
        data_type:
          type: string
          description: The type of data stored for this attribute.
          enum:
          - string
          - integer
          - float
          - boolean
          - datetime
          - date
          example: string
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
          - option1
          - option2
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
      required:
      - name
      - model
      - data_type
    create_data_event_request:
      description: ''
      type: object
      title: Create Data Event Request
      properties:
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: The unique identifier for the contact (lead or user) which
            is given by Intercom.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      anyOf:
      - title: id required
        required:
        - event_name
        - created_at
        - id
      - title: user_id required
        required:
        - event_name
        - created_at
        - user_id
      - title: email required
        required:
        - event_name
        - created_at
        - email
    create_data_event_summaries_request:
      description: You can send a list of event summaries for a user. Each event summary
        should contain the event name, the time the event occurred, and the number
        of times the event occurred. The event name should be a past tense "verb-noun"
        combination, to improve readability, for example `updated-plan`.
      type: object
      title: Create Data Event Summaries Request
      properties:
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        event_summaries:
          type: object
          description: A list of event summaries for the user. Each event summary
            should contain the event name, the time the event occurred, and the number
            of times the event occurred. The event name should be a past tense 'verb-noun'
            combination, to improve readability, for example `updated-plan`.
          properties:
            event_name:
              type: string
              description: The name of the event that occurred. A good event name
                is typically a past tense 'verb-noun' combination, to improve readability,
                for example `updated-plan`.
              example: invited-friend
            count:
              type: integer
              description: The number of times the event occurred.
              example: 1
            first:
              type: integer
              format: date-time
              description: The first time the event was sent
              example: 1671028894
            last:
              type: integer
              format: date-time
              description: The last time the event was sent
              example: 1671028894
    create_data_exports_request:
      description: Request for creating a data export
      type: object
      title: Create Data Export Request
      properties:
        created_at_after:
          type: integer
          description: The start date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
        created_at_before:
          type: integer
          description: The end date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
      required:
      - created_at_after
      - created_at_before
    create_external_page_request:
      title: Create External Page Payload
      type: object
      description: You can add an External Page to your Fin Content Library.
      nullable: false
      properties:
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: "<p>Hello world!</p>"
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        fin_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by Fin.
          default: true
          example: true
        locale:
          type: string
          description: Always en
          enum:
          - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
      required:
      - title
      - html
      - url
      - locale
      - source_id
    create_message_request:
      description: You can create a message
      type: object
      title: Create Message Request Payload
      nullable: true
      properties:
        message_type:
          type: string
          description: 'The kind of message being created. Values: `in_app` or `email`.'
          enum:
          - in_app
          - email
          example: in_app
        subject:
          type: string
          description: The title of the email.
          example: Thanks for everything
        body:
          type: string
          description: The content of the message. HTML and plaintext are supported.
          example: Hello there
        template:
          type: string
          description: The style of the outgoing message. Possible values `plain`
            or `personal`.
          example: plain
        from:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: Always `admin`.
              enum:
              - admin
              example: admin
            id:
              type: integer
              description: The identifier for the admin which is given by Intercom.
              example: 394051
          required:
          - type
          - id
        to:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: The role associated to the contact - `user` or `lead`.
              enum:
              - user
              - lead
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              example: 536e564f316c83104c000020
          required:
          - type
          - id
        created_at:
          type: integer
          description: The time the message was created. If not provided, the current
            time will be used.
          example: 1590000000
        create_conversation_without_contact_reply:
          type: boolean
          description: Whether a conversation should be opened in the inbox for the
            message without the contact replying. Defaults to false if not provided.
          default: false
          example: true
      anyOf:
      - title: 'message_type: `email`.'
        required:
        - message_type
        - subject
        - body
        - template
        - from
        - to
      - title: 'message_type: `inapp`.'
        required:
        - message_type
        - body
        - from
        - to
    create_or_update_company_request:
      type: object
      title: Create Or Update Company Request Payload
      description: You can create or update a Company
      nullable: true
      properties:
        name:
          type: string
          description: The name of the Company
          example: Intercom
        company_id:
          type: string
          description: The company id you have defined for the company. Can't be updated
          example: 625e90fc55ab113b6d92175f
        plan:
          type: string
          description: The name of the plan you have associated with the company.
          example: Enterprise
        size:
          type: integer
          description: The number of employees in this company.
          example: '100'
        website:
          type: string
          description: The URL for this company's website. Please note that the value
            specified here is not validated. Accepts any string.
          example: https://www.example.com
        industry:
          type: string
          description: The industry that this company operates in.
          example: Manufacturing
        custom_attributes:
          type: object
          description: A hash of key/value pairs containing any other data about the
            company you want Intercom to store.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1394531169
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business. Note
            that this will truncate floats. i.e. it only allow for whole integers,
            155.98 will be truncated to 155. Note that this has an upper limit of
            2**31-1 or 2147483647..
          example: 1000
    create_or_update_custom_object_instance_request:
      description: Payload to create or update a Custom Object instance
      type: object
      title: Create Or Update Custom Object Instance Request Payload
      properties:
        external_id:
          type: string
          description: A unique identifier for the Custom Object instance in the external
            system it originated from.
        external_created_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the Custom Object instance was created in the
            external system it originated from.
          example: 1571672154
        external_updated_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the Custom Object instance was last updated in
            the external system it originated from.
          example: 1571672154
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the Custom Object instance.
    create_or_update_tag_request:
      description: You can create or update an existing tag.
      type: object
      title: Create or Update Tag Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found, or
            the new name for the tag if this is an update request. Names are case
            insensitive.
          example: Independent
        id:
          type: string
          description: The id of tag to updates.
          example: '656452352'
      required:
      - name
    create_phone_switch_request:
      description: You can create an phone switch
      type: object
      title: Create Phone Switch Request Payload
      nullable: true
      properties:
        phone:
          type: string
          description: Phone number in E.164 format, that will receive the SMS to
            continue the conversation in the Messenger.
          example: "+1 1234567890"
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
      required:
      - phone
    create_ticket_reply_with_comment_request:
      title: Create Ticket Reply Request Payload
      oneOf:
      - "$ref": "#/components/schemas/contact_reply_ticket_request"
      - "$ref": "#/components/schemas/admin_reply_ticket_request"
    create_ticket_request:
      description: You can create a Ticket
      type: object
      title: Create Ticket Request Payload
      properties:
        ticket_type_id:
          type: string
          description: The ID of the type of ticket you want to create
          example: '1234'
        contacts:
          type: array
          description: The list of contacts (users or leads) affected by this ticket.
            Currently only one is allowed
          items:
            type: object
            oneOf:
            - title: ID
              properties:
                id:
                  type: string
                  description: The identifier for the contact as given by Intercom.
              required:
              - id
            - title: External ID
              properties:
                external_id:
                  type: string
                  description: The external_id you have defined for the contact who
                    is being added as a participant.
              required:
              - external_id
            - title: Email
              properties:
                email:
                  type: string
                  description: The email you have defined for the contact who is being
                    added as a participant. If a contact with this email does not
                    exist, one will be created.
              required:
              - email
          example:
          - id: '1234'
        company_id:
          type: string
          description: The ID of the company that the ticket is associated with. The
            ID that you set upon company creation.
          example: '1234'
        created_at:
          type: integer
          description: The time the ticket was created. If not provided, the current
            time will be used.
          example: 1590000000
        ticket_attributes:
          "$ref": "#/components/schemas/ticket_request_custom_attributes"
      required:
      - ticket_type_id
      - contacts
    create_ticket_type_attribute_request:
      description: You can create a Ticket Type Attribute
      type: object
      title: Create Ticket Type Attribute Request Payload
      properties:
        name:
          type: string
          description: The name of the ticket type attribute
          example: Bug Priority
        description:
          type: string
          description: The description of the attribute presented to the teammate
            or contact
          example: Priority level of the bug
        data_type:
          type: string
          description: The data type of the attribute
          enum:
          - string
          - list
          - integer
          - decimal
          - boolean
          - datetime
          - files
          example: string
        required_to_create:
          type: boolean
          description: Whether the attribute is required to be filled in when teammates
            are creating the ticket in Inbox.
          default: false
          example: false
        required_to_create_for_contacts:
          type: boolean
          description: Whether the attribute is required to be filled in when contacts
            are creating the ticket in Messenger.
          default: false
          example: false
        visible_on_create:
          type: boolean
          description: Whether the attribute is visible to teammates when creating
            a ticket in Inbox.
          default: true
          example: true
        visible_to_contacts:
          type: boolean
          description: Whether the attribute is visible to contacts when creating
            a ticket in Messenger.
          default: true
          example: true
        multiline:
          type: boolean
          description: Whether the attribute allows multiple lines of text (only applicable
            to string attributes)
          example: false
        list_items:
          type: string
          description: A comma delimited list of items for the attribute value (only
            applicable to list attributes)
          example: Low Priority,Medium Priority,High Priority
        allow_multiple_values:
          type: boolean
          description: Whether the attribute allows multiple files to be attached
            to it (only applicable to file attributes)
          example: false
      required:
      - name
      - description
      - data_type
    create_ticket_type_request:
      description: |
        The request payload for creating a ticket type.
          You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
      type: object
      title: Create Ticket Type Request Payload
      nullable: true
      properties:
        name:
          type: string
          description: The name of the ticket type.
          example: Bug
        description:
          type: string
          description: The description of the ticket type.
          example: Used for tracking bugs
        category:
          type: string
          description: Category of the Ticket Type.
          enum:
          - Customer
          - Back-office
          - Tracker
          example: Customer
        icon:
          type: string
          description: The icon of the ticket type.
          example: "\U0001F41E"
          default: "\U0001F39F️"
        is_internal:
          type: boolean
          description: Whether the tickets associated with this ticket type are intended
            for internal use only or will be shared with customers. This is currently
            a limited attribute.
          example: false
          default: false
      required:
      - name
    cursor_pages:
      title: Cursor based pages
      type: object
      description: |
        Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data.
        A "cursor" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or "pages" as needed.
      nullable: true
      properties:
        type:
          type: string
          description: the type of object `pages`.
          example: pages
          enum:
          - pages
        page:
          type: integer
          description: The current page
          example: 1
        next:
          "$ref": "#/components/schemas/starting_after_paging"
        per_page:
          type: integer
          description: Number of results per page
          example: 2
        total_pages:
          type: integer
          description: Total number of pages
          example: 13
    custom_attributes:
      title: Custom Attributes
      type: object
      description: An object containing the different custom attributes associated
        to the conversation as key-value pairs. For relationship attributes the value
        will be a list of custom object instance models.
      additionalProperties:
        anyOf:
        - type: string
        - "$ref": "#/components/schemas/custom_object_instance"
    custom_object_instance:
      title: Custom Object Instance
      type: object
      x-tags:
      - Custom Object Instances
      nullable: true
      description: A Custom Object Instance represents an instance of a custom object
        type. This allows you to create and set custom attributes to store data about
        your customers that is not already captured by Intercom. The parent object
        includes recommended default attributes and you can add your own custom attributes.
      properties:
        id:
          type: string
          description: The Intercom defined id representing the custom object instance.
          example: 5a7a19e9f59ae20001d1c1e6
        external_id:
          type: string
          description: The id you have defined for the custom object instance.
          example: 0001d1c1e65a7a19e9f59ae2
        type:
          type: string
          description: The identifier of the custom object type that defines the structure
            of the custom object instance.
          example: Order
        custom_attributes:
          type: object
          description: The custom attributes you have set on the custom object instance.
          additionalProperties:
            type: string
    custom_object_instance_deleted:
      title: Custom Object Instance Deleted
      type: object
      description: deleted custom object instance object
      properties:
        object:
          type: string
          description: The unique identifier of the Custom Object type that defines
            the structure of the Custom Object instance.
          example: Order
        id:
          type: string
          description: The Intercom defined id representing the Custom Object instance.
          example: '123'
        deleted:
          type: boolean
          description: Whether the Custom Object instance is deleted or not.
          example: true
    customer_request:
      type: object
      nullable: true
      oneOf:
      - title: Intercom User ID
        properties:
          intercom_user_id:
            type: string
            description: The identifier for the contact as given by Intercom.
            example: 6329bd9ffe4e2e91dac76188
        required:
        - intercom_user_id
      - title: User ID
        properties:
          user_id:
            type: string
            description: The external_id you have defined for the contact who is being
              added as a participant.
            example: 2e91dac761886329bd9ffe4e
        required:
        - user_id
      - title: Email
        properties:
          email:
            type: string
            description: The email you have defined for the contact who is being added
              as a participant.
            example: sam.sung@example.com
        required:
        - email
    data_attribute:
      title: Data Attribute
      type: object
      x-tags:
      - Data Attributes
      description: Data Attributes are metadata used to describe your contact, company
        and conversation models. These include standard and custom attributes. By
        using the data attributes endpoint, you can get the global list of attributes
        for your workspace, as well as create and archive custom attributes.
      properties:
        type:
          type: string
          description: Value is `data_attribute`.
          enum:
          - data_attribute
          example: data_attribute
        id:
          type: integer
          description: The unique identifier for the data attribute which is given
            by Intercom. Only available for custom attributes.
          example: 12878
        model:
          type: string
          description: Value is `contact` for user/lead attributes and `company` for
            company attributes.
          enum:
          - contact
          - company
          example: contact
        name:
          type: string
          description: Name of the attribute.
          example: paid_subscriber
        full_name:
          type: string
          description: Full name of the attribute. Should match the name unless it's
            a nested attribute. We can split full_name on `.` to access nested user
            object values.
          example: custom_attributes.paid_subscriber
        label:
          type: string
          description: Readable name of the attribute (i.e. name you see in the UI)
          example: Paid Subscriber
        description:
          type: string
          description: Readable description of the attribute.
          example: Whether the user is a paid subscriber.
        data_type:
          type: string
          description: The data type of the attribute.
          enum:
          - string
          - integer
          - float
          - boolean
          - date
          example: boolean
        options:
          type: array
          description: List of predefined options for attribute value.
          items:
            type: string
          example:
          - 'true'
          - 'false'
        api_writable:
          type: boolean
          description: Can this attribute be updated through API
          example: true
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
        ui_writable:
          type: boolean
          description: Can this attribute be updated in the UI
          example: true
        custom:
          type: boolean
          description: Set to true if this is a CDA
          example: true
        archived:
          type: boolean
          description: Is this attribute archived. (Only applicable to CDAs)
          example: false
        created_at:
          type: integer
          format: date-time
          description: The time the attribute was created as a UTC Unix timestamp
          example: 1671028894
        updated_at:
          type: integer
          format: date-time
          description: The time the attribute was last updated as a UTC Unix timestamp
          example: 1671028894
        admin_id:
          type: string
          description: Teammate who created the attribute. Only applicable to CDAs
          example: '5712945'
    data_attribute_list:
      title: Data Attribute List
      type: object
      description: A list of all data attributes belonging to a workspace for contacts,
        companies or conversations.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of data attributes
          items:
            "$ref": "#/components/schemas/data_attribute"
    data_event:
      title: Data Event
      type: object
      x-tags:
      - Data Events
      description: Data events are used to notify Intercom of changes to your data.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event
          example: event
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: Your identifier for a lead or a user.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        intercom_user_id:
          type: string
          description: The Intercom identifier for the user.
          example: 63a0979a5eeebeaf28dd56ba
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      required:
      - event_name
      - created_at
    data_event_list:
      title: Data Event List
      type: object
      description: This will return a list of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event.list
          example: event.list
        events:
          type: array
          description: A list of data events
          items:
            "$ref": "#/components/schemas/data_event"
        pages:
          type: object
          description: Pagination
          properties:
            next:
              type: string
              example: https://api.intercom.io/events?per_page=2&before=1389913941064&intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user"
            since:
              type: string
              example: https://api.intercom.io/events?intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user&since=1389913941065
    data_event_summary:
      title: Data Event Summary
      type: object
      description: This will return a summary of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event.summary
          example: event.summary
        email:
          type: string
          description: The email address of the user
          example: Sam.Sung@example.com
        intercom_user_id:
          type: string
          description: The Intercom user ID of the user
          example: 63a0979a5eeebeaf28dd56ba
        user_id:
          type: string
          description: The user ID of the user
          example: 62b997f288e14803c5006932
        events:
          type: array
          description: A summary of data events
          items:
            "$ref": "#/components/schemas/data_event_summary_item"
    data_event_summary_item:
      title: Data Event Summary Item
      type: object
      description: This will return a summary of a data event for the App.
      nullable: true
      properties:
        name:
          type: string
          description: The name of the event
          example: placed-order
        first:
          type: string
          description: The first time the event was sent
          example: '2014-01-16T23:12:21.000+00:00'
        last:
          type: string
          description: The last time the event was sent
          example: '2014-01-16T23:12:21.000+00:00 '
        count:
          type: integer
          description: The number of times the event was sent
          example: 1
        description:
          type: string
          description: The description of the event
          example: A user placed an order
    data_export:
      title: Data Export
      type: object
      x-tags:
      - Data Export
      description: The data export api is used to view all message sent & viewed in
        a given timeframe.
      properties:
        job_identfier:
          type: string
          description: The identifier for your job.
          example: orzzsbd7hk67xyu
        status:
          type: string
          enum:
          - pending
          - in_progress
          - failed
          - completed
          - no_data
          - canceled
          description: The current state of your job.
          example: pending
        download_expires_at:
          type: string
          description: The time after which you will not be able to access the data.
          example: '1674917488'
        download_url:
          type: string
          description: The location where you can download your data.
          example: https://api.intercom.test/download/messages/data/example
    data_export_csv:
      title: Data Export CSV
      type: object
      description: A CSV output file
      properties:
        user_id:
          type: string
          description: The user_id of the user who was sent the message.
        user_external_id:
          type: string
          description: The external_user_id of the user who was sent the message
        company_id:
          type: string
          description: The company ID of the user in relation to the message that
            was sent. Will return -1 if no company is present.
        email:
          type: string
          description: The users email who was sent the message.
        name:
          type: string
          description: The full name of the user receiving the message
        ruleset_id:
          type: string
          description: The id of the message.
        content_id:
          type: string
          description: The specific content that was received. In an A/B test each
            version has its own Content ID.
        content_type:
          type: string
          description: Email, Chat, Post etc.
        content_title:
          type: string
          description: The title of the content you see in your Intercom workspace.
        ruleset_version_id:
          type: string
          description: As you edit content we record new versions. This ID can help
            you determine which version of a piece of content that was received.
        receipt_id:
          type: string
          description: ID for this receipt. Will be included with any related stats
            in other files to identify this specific delivery of a message.
        received_at:
          type: integer
          description: Timestamp for when the receipt was recorded.
        series_id:
          type: string
          description: The id of the series that this content is part of. Will return
            -1 if not part of a series.
        series_title:
          type: string
          description: The title of the series that this content is part of.
        node_id:
          type: string
          description: The id of the series node that this ruleset is associated with.
            Each block in a series has a corresponding node_id.
        first_reply:
          type: integer
          description: The first time a user replied to this message if the content
            was able to receive replies.
        first_completion:
          type: integer
          description: The first time a user completed this message if the content
            was able to be completed e.g. Tours, Surveys.
        first_series_completion:
          type: integer
          description: The first time the series this message was a part of was completed
            by the user.
        first_series_disengagement:
          type: integer
          description: The first time the series this message was a part of was disengaged
            by the user.
        first_series_exit:
          type: integer
          description: The first time the series this message was a part of was exited
            by the user.
        first_goal_success:
          type: integer
          description: The first time the user met this messages associated goal if
            one exists.
        first_open:
          type: integer
          description: The first time the user opened this message.
        first_click:
          type: integer
          description: The first time the series the user clicked on a link within
            this message.
        first_dismisall:
          type: integer
          description: The first time the series the user dismissed this message.
        first_unsubscribe:
          type: integer
          description: The first time the user unsubscribed from this message.
        first_hard_bounce:
          type: integer
          description: The first time this message hard bounced for this user
    deleted_article_object:
      title: Deleted Article Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the article which you provided in
            the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - article
          enum:
          - article
          example: article
        deleted:
          type: boolean
          description: Whether the article was deleted successfully or not.
          example: true
    deleted_collection_object:
      title: Deleted Collection Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the collection which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - `collection`
          enum:
          - collection
          example: collection
        deleted:
          type: boolean
          description: Whether the collection was deleted successfully or not.
          example: true
    deleted_company_object:
      title: Deleted Company Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the company which is given by Intercom.
          example: 5b7e8b2f-7a1a-4e6c-8e1b-4f9d4f4c4d4f
        object:
          type: string
          description: The type of object which was deleted. - `company`
          enum:
          - company
          example: company
        deleted:
          type: boolean
          description: Whether the company was deleted successfully or not.
          example: true
    deleted_object:
      title: Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the news item which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted - news-item.
          enum:
          - news-item
          example: news-item
        deleted:
          type: boolean
          description: Whether the news item was deleted successfully or not.
          example: true
    detach_contact_from_conversation_request:
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is performing the action.
          example: '5017690'
      required:
      - admin_id
    error:
      type: object
      title: Error
      description: The API will return an Error List for a failed request, which will
        contain one or more Error objects.
      properties:
        type:
          type: string
          description: The type is error.list
          example: error.list
        request_id:
          type: string
          nullable: true
          format: uuid
          description: ''
          example: f93ecfa8-d08a-4325-8694-89aeb89c8f85
        errors:
          type: array
          description: An array of one or more error objects
          items:
            properties:
              code:
                type: string
                description: A string indicating the kind of error, used to further
                  qualify the HTTP response code
                example: unauthorized
              message:
                type: string
                nullable: true
                description: Optional. Human readable description of the error.
                example: Access Token Invalid
              field:
                type: string
                nullable: true
                description: Optional. Used to identify a particular field or query
                  parameter that was in error.
                example: email
            required:
            - code
      required:
      - type
      - errors
    external_page:
      title: External Page
      type: object
      x-tags:
      - AI Content
      description: External pages that you have added to your Fin Content Library.
      nullable: false
      properties:
        type:
          type: string
          description: Always external_page
          enum:
          - external_page
          default: external_page
          example: external_page
        id:
          type: string
          description: The unique identifier for the external page which is given
            by Intercom.
          example: '1234'
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: "<p>Hello world!</p>"
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        fin_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by Fin.
          example: true
        locale:
          type: string
          description: Always en
          enum:
          - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
        created_at:
          type: integer
          format: date-time
          description: The time when the external page was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the external page was last updated.
          example: 1672928610
        last_ingested_at:
          type: integer
          format: date-time
          description: The time when the external page was last ingested.
          example: 1672928610
      required:
      - id
      - type
      - title
      - html
      - url
      - fin_availability
      - locale
      - source_id
      - created_at
      - updated_at
      - last_ingested_at
    external_pages_list:
      title: External Pages
      type: object
      x-tags:
      - AI Content
      description: This will return a list of external pages for the App.
      nullable: false
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/pages_link"
        total_count:
          type: integer
          description: A count of the total number of external pages.
          example: 1
        data:
          type: array
          description: An array of External Page objects
          items:
            "$ref": "#/components/schemas/external_page"
    file_attribute:
      title: File
      type: object
      description: The value describing a file upload set for a custom attribute
      properties:
        type:
          type: string
          example: upload
        name:
          type: string
          description: The name of the file
          example: Screenshot.png
        url:
          type: string
          description: The url of the file. This is a temporary URL and will expire
            after 30 minutes.
          example: https://intercom-attachments-1.com/.../Screenshot.png
        content_type:
          type: string
          description: The type of file
          example: image/png
        filesize:
          type: integer
          description: The size of the file in bytes
          example: 11308309
        width:
          type: integer
          description: The width of the file in pixels, if applicable
          example: 3024
        height:
          type: integer
          description: The height of the file in pixels, if applicable
          example: 1964
    group_content:
      title: Group Content
      type: object
      description: The Content of a Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `group_content` .
          enum:
          -
          - group_content
          example: group_content
          nullable: true
        name:
          type: string
          description: The name of the collection or section.
          example: Collection name
        description:
          type: string
          description: The description of the collection. Only available for collections.
          example: " Collection description"
    group_translated_content:
      title: Group Translated Content
      type: object
      description: The Translated Content of an Group. The keys are the locale codes
        and the values are the translated content of the Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - group_translated_content.
          nullable: true
          enum:
          -
          - group_translated_content
          example: group_translated_content
        ar:
          description: The content of the group in Arabic
          "$ref": "#/components/schemas/group_content"
        bg:
          description: The content of the group in Bulgarian
          "$ref": "#/components/schemas/group_content"
        bs:
          description: The content of the group in Bosnian
          "$ref": "#/components/schemas/group_content"
        ca:
          description: The content of the group in Catalan
          "$ref": "#/components/schemas/group_content"
        cs:
          description: The content of the group in Czech
          "$ref": "#/components/schemas/group_content"
        da:
          description: The content of the group in Danish
          "$ref": "#/components/schemas/group_content"
        de:
          description: The content of the group in German
          "$ref": "#/components/schemas/group_content"
        el:
          description: The content of the group in Greek
          "$ref": "#/components/schemas/group_content"
        en:
          description: The content of the group in English
          "$ref": "#/components/schemas/group_content"
        es:
          description: The content of the group in Spanish
          "$ref": "#/components/schemas/group_content"
        et:
          description: The content of the group in Estonian
          "$ref": "#/components/schemas/group_content"
        fi:
          description: The content of the group in Finnish
          "$ref": "#/components/schemas/group_content"
        fr:
          description: The content of the group in French
          "$ref": "#/components/schemas/group_content"
        he:
          description: The content of the group in Hebrew
          "$ref": "#/components/schemas/group_content"
        hr:
          description: The content of the group in Croatian
          "$ref": "#/components/schemas/group_content"
        hu:
          description: The content of the group in Hungarian
          "$ref": "#/components/schemas/group_content"
        id:
          description: The content of the group in Indonesian
          "$ref": "#/components/schemas/group_content"
        it:
          description: The content of the group in Italian
          "$ref": "#/components/schemas/group_content"
        ja:
          description: The content of the group in Japanese
          "$ref": "#/components/schemas/group_content"
        ko:
          description: The content of the group in Korean
          "$ref": "#/components/schemas/group_content"
        lt:
          description: The content of the group in Lithuanian
          "$ref": "#/components/schemas/group_content"
        lv:
          description: The content of the group in Latvian
          "$ref": "#/components/schemas/group_content"
        mn:
          description: The content of the group in Mongolian
          "$ref": "#/components/schemas/group_content"
        nb:
          description: The content of the group in Norwegian
          "$ref": "#/components/schemas/group_content"
        nl:
          description: The content of the group in Dutch
          "$ref": "#/components/schemas/group_content"
        pl:
          description: The content of the group in Polish
          "$ref": "#/components/schemas/group_content"
        pt:
          description: The content of the group in Portuguese (Portugal)
          "$ref": "#/components/schemas/group_content"
        ro:
          description: The content of the group in Romanian
          "$ref": "#/components/schemas/group_content"
        ru:
          description: The content of the group in Russian
          "$ref": "#/components/schemas/group_content"
        sl:
          description: The content of the group in Slovenian
          "$ref": "#/components/schemas/group_content"
        sr:
          description: The content of the group in Serbian
          "$ref": "#/components/schemas/group_content"
        sv:
          description: The content of the group in Swedish
          "$ref": "#/components/schemas/group_content"
        tr:
          description: The content of the group in Turkish
          "$ref": "#/components/schemas/group_content"
        vi:
          description: The content of the group in Vietnamese
          "$ref": "#/components/schemas/group_content"
        pt-BR:
          description: The content of the group in Portuguese (Brazil)
          "$ref": "#/components/schemas/group_content"
        zh-CN:
          description: The content of the group in Chinese (China)
          "$ref": "#/components/schemas/group_content"
        zh-TW:
          description: The content of the group in Chinese (Taiwan)
          "$ref": "#/components/schemas/group_content"
    help_center:
      title: Help Center
      type: object
      x-tags:
      - Help Center
      description: Help Centers contain collections
      properties:
        id:
          type: string
          description: The unique identifier for the Help Center which is given by
            Intercom.
          example: '123'
        workspace_id:
          type: string
          description: The id of the workspace which the Help Center belongs to.
          example: hfi1bx4l
        created_at:
          type: integer
          format: date-time
          description: The time when the Help Center was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the Help Center was last updated.
          example: 1672928610
        identifier:
          type: string
          description: The identifier of the Help Center. This is used in the URL
            of the Help Center.
          example: intercom
        website_turned_on:
          type: boolean
          description: Whether the Help Center is turned on or not. This is controlled
            in your Help Center settings.
          example: true
        display_name:
          type: string
          description: The display name of the Help Center only seen by teammates.
          example: Intercom Help Center
    help_center_list:
      title: Help Centers
      type: object
      x-tags:
      - Help Center
      description: A list of Help Centers belonging to the App
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        data:
          type: array
          description: An array of Help Center objects
          items:
            "$ref": "#/components/schemas/help_center"
    intercom_version:
      description: Intercom API version.</br>By default, it's equal to the version
        set in the app package.
      type: string
      example: Unstable
      default: Unstable
      enum:
      - '1.0'
      - '1.1'
      - '1.2'
      - '1.3'
      - '1.4'
      - '2.0'
      - '2.1'
      - '2.2'
      - '2.3'
      - '2.4'
      - '2.5'
      - '2.6'
      - '2.7'
      - '2.8'
      - '2.9'
      - '2.10'
      - '2.11'
      - Unstable
    linked_object:
      title: Linked Object
      type: object
      description: A linked conversation or ticket.
      properties:
        type:
          type: string
          description: ticket or conversation
          enum:
          - ticket
          - conversation
          example: ticket
        id:
          type: string
          description: The ID of the linked object
          example: '7583'
        category:
          type: string
          description: Category of the Linked Ticket Object.
          enum:
          - Customer
          - Back-office
          - Tracker
          -
          example: Customer
          nullable: true
    linked_object_list:
      title: Linked Objects
      type: object
      description: An object containing metadata about linked conversations and linked
        tickets. Up to 1000 can be returned.
      properties:
        type:
          type: string
          description: Always list.
          enum:
          - list
          example: list
        total_count:
          type: integer
          description: The total number of linked objects.
          example: 100
        has_more:
          type: boolean
          description: Whether or not there are more linked objects than returned.
          example: false
        data:
          type: array
          description: An array containing the linked conversations and linked tickets.
          items:
            "$ref": "#/components/schemas/linked_object"
    merge_contacts_request:
      description: Merge contact data.
      type: object
      title: Merge contact data
      properties:
        from:
          type: string
          description: The unique identifier for the contact to merge away from. Must
            be a lead.
          example: 5d70dd30de4efd54f42fd526
        into:
          type: string
          description: The unique identifier for the contact to merge into. Must be
            a user.
          example: 5ba682d23d7cf92bef87bfd4
    message:
      type: object
      title: Message
      x-tags:
      - Messages
      description: Message are how you reach out to contacts in Intercom. They are
        created when an admin sends an outbound message to a contact.
      properties:
        type:
          type: string
          description: The type of the message
          example: user_message
        id:
          type: string
          description: The id representing the message.
          example: '1488971108'
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1667560812
        subject:
          type: string
          description: 'The subject of the message. Only present if message_type:
            email.'
          example: Greetings
        body:
          type: string
          description: The message body, which may contain HTML.
          example: Hello
        message_type:
          type: string
          enum:
          - email
          - inapp
          - facebook
          - twitter
          description: The type of message that was sent. Can be email, inapp, facebook
            or twitter.
          example: inapp
        conversation_id:
          type: string
          description: The associated conversation_id
          example: '64619700005570'
      required:
      - type
      - id
      - created_at
      - body
      - message_type
    multiple_filter_search_request:
      title: Multiple Filter Search Request
      description: Search using Intercoms Search APIs with more than one filter.
      type: object
      properties:
        operator:
          type: string
          enum:
          - AND
          - OR
          description: An operator to allow boolean inspection between multiple fields.
          example: AND
        value:
          oneOf:
          - type: array
            description: Add mutiple filters.
            title: multiple filter search request
            items:
              "$ref": "#/components/schemas/multiple_filter_search_request"
          - type: array
            description: Add a single filter field.
            title: single filter search request
            items:
              "$ref": "#/components/schemas/single_filter_search_request"
    news_item:
      title: News Item
      type: object
      x-tags:
      - News
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
          - news-item
          example: news-item
        id:
          type: string
          description: The unique identifier for the news item which is given by Intercom.
          example: '141'
        workspace_id:
          type: string
          description: The id of the workspace which the news item belongs to.
          example: t74hdn32
        title:
          type: string
          description: The title of the news item.
          example: 'New feature: News Items'
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: We are excited to announce the launch of News Items, a new content
            type in Intercom enabling you to announce product updates, company news,
            promotions, events and more with your customers.
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
          - draft
          - live
          example: live
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            "$ref": "#/components/schemas/newsfeed_assignment"
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
            nullable: true
            description: The label name.
            example: Product Update
        cover_image_url:
          type: string
          format: uri
          nullable: true
          description: URL of the image used as cover. Must have .jpg or .png extension.
          example: https://example.com/cover.jpg
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
            description: The emoji reaction to the news item.
            example: "\U0001F44D"
        deliver_silently:
          type: boolean
          description: When set to true, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was created.
          example: 1610589632
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was last updated.
          example: 1610589632
    news_item_request:
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      type: object
      title: Create News Item Request
      properties:
        title:
          type: string
          description: The title of the news item.
          example: Halloween is here!
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: "<p>New costumes in store for this spooky season</p>"
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
          - draft
          - live
          example: live
        deliver_silently:
          type: boolean
          description: When set to `true`, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
          example:
          - Product
          - Update
          - New
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
          example:
          - "\U0001F606"
          - "\U0001F605"
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            "$ref": "#/components/schemas/newsfeed_assignment"
      required:
      - title
      - sender_id
    newsfeed:
      title: Newsfeed
      type: object
      x-tags:
      - News
      description: |
        A newsfeed is a collection of news items, targeted to a specific audience.

        Newsfeeds currently cannot be edited through the API, please refer to [this article](https://www.intercom.com/help/en/articles/6362267-getting-started-with-news) to set up your newsfeeds in Intercom.
      properties:
        id:
          type: string
          description: The unique identifier for the newsfeed which is given by Intercom.
          example: '12312'
        type:
          type: string
          description: The type of object.
          enum:
          - newsfeed
          example: newsfeed
        name:
          type: string
          description: The name of the newsfeed. This name will never be visible to
            your users.
          example: My Newsfeed
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was created.
          example: 1674917488
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was last updated.
          example: 1674917488
    newsfeed_assignment:
      title: Newsfeed Assignment
      type: object
      x-tags:
      - News
      description: Assigns a news item to a newsfeed.
      properties:
        newsfeed_id:
          type: integer
          description: The unique identifier for the newsfeed which is given by Intercom.
            Publish dates cannot be in the future, to schedule news items use the
            dedicated feature in app (see this article).
          example: 198313
        published_at:
          type: integer
          format: timestamp
          description: Publish date of the news item on the newsfeed, use this field
            if you want to set a publish date in the past (e.g. when importing existing
            news items). On write, this field will be ignored if the news item state
            is "draft".
          example: 1674917488
    note:
      title: Note
      type: object
      x-tags:
      - Notes
      description: Notes allow you to annotate and comment on your contacts.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `note`.
          example: note
        id:
          type: string
          description: The id of the note.
          example: '17495962'
        created_at:
          type: integer
          format: timestamp
          description: The time the note was created.
          example: 1674589321
        contact:
          type: object
          description: Represents the contact that the note was created about.
          nullable: true
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `contact`.
            id:
              type: string
              description: The id of the contact.
              example: 214656d0c743eafcfde7f248
        author:
          "$ref": "#/components/schemas/admin"
          description: Optional. Represents the Admin that created the note.
        body:
          type: string
          description: The body text of the note.
          example: "<p>Text for the note.</p>"
    note_list:
      title: Paginated Response
      type: object
      description: A paginated list of notes associated with a contact.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `list`.
          example: list
        data:
          type: array
          description: An array of notes.
          items:
            "$ref": "#/components/schemas/note"
        total_count:
          type: integer
          description: A count of the total number of notes.
          example: 1
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    open_conversation_request:
      title: Open Conversation Request
      type: object
      description: Payload of the request to open a conversation
      properties:
        message_type:
          type: string
          enum:
          - open
          example: open
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017690'
      required:
      - message_type
      - admin_id
    pages_link:
      title: Pagination Object
      type: object
      description: |
        The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.

        Their responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.
      properties:
        type:
          type: string
          example: pages
          enum:
          - pages
        page:
          type: integer
          example: 1
        next:
          type: string
          format: uri
          description: A link to the next page of results. A response that does not
            contain a next link does not have further data to fetch.
          nullable: true
        per_page:
          type: integer
          example: 50
        total_pages:
          type: integer
          example: 1
    paginated_response:
      title: Paginated Response
      type: object
      description: Paginated Response
      properties:
        type:
          type: string
          description: The type of object
          enum:
          - list
          - conversation.list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 1
        data:
          type: array
          description: An array of Objects
          items:
            anyOf:
            - "$ref": "#/components/schemas/news_item"
            - "$ref": "#/components/schemas/newsfeed"
    part_attachment:
      title: Part attachment
      type: object
      description: The file attached to a part
      properties:
        type:
          type: string
          description: The type of attachment
          example: upload
        name:
          type: string
          description: The name of the attachment
          example: example.png
        url:
          type: string
          description: The URL of the attachment
          example: https://picsum.photos/200/300
        content_type:
          type: string
          description: The content type of the attachment
          example: image/png
        filesize:
          type: integer
          description: The size of the attachment
          example: 100
        width:
          type: integer
          description: The width of the attachment
          example: 100
        height:
          type: integer
          description: The height of the attachment
          example: 100
    phone_switch:
      title: Phone Switch
      type: object
      description: Phone Switch Response
      nullable: true
      properties:
        type:
          type: string
          description: ''
          enum:
          - phone_call_redirect
          default: phone_call_redirect
          example: phone_call_redirect
        phone:
          type: string
          description: Phone number in E.164 format, that has received the SMS to
            continue the conversation in the Messenger.
          example: "+1 1234567890"
    redact_conversation_request:
      oneOf:
      - title: Redact Conversation Part Request
        type: object
        description: Payload of the request to redact a conversation part
        properties:
          type:
            type: string
            enum:
            - conversation_part
            description: The type of resource being redacted.
            example: conversation_part
          conversation_id:
            type: string
            description: The id of the conversation.
            example: '19894788788'
          conversation_part_id:
            type: string
            description: The id of the conversation_part.
            example: '19381789428'
        required:
        - type
        - conversation_id
        - conversation_part_id
      - title: Redact Conversation Source Request
        type: object
        description: Payload of the request to redact a conversation source
        properties:
          type:
            type: string
            enum:
            - source
            description: The type of resource being redacted.
            example: source
          conversation_id:
            type: string
            description: The id of the conversation.
            example: '19894788788'
          source_id:
            type: string
            description: The id of the source.
            example: '19894781231'
        required:
        - type
        - conversation_id
        - source_id
    reference:
      title: Reference
      type: object
      description: reference to another object
      properties:
        type:
          type: string
          description: ''
          example: contact
        id:
          type: string
          nullable: true
          description: ''
          example: 1a2b3c
    reply_conversation_request:
      oneOf:
      - "$ref": "#/components/schemas/contact_reply_conversation_request"
      - "$ref": "#/components/schemas/admin_reply_conversation_request"
    search_request:
      description: Search using Intercoms Search APIs.
      type: object
      title: Search data
      properties:
        query:
          oneOf:
          - "$ref": "#/components/schemas/single_filter_search_request"
            title: Single filter search request
          - "$ref": "#/components/schemas/multiple_filter_search_request"
            title: multiple filter search request
        pagination:
          "$ref": "#/components/schemas/starting_after_paging"
      required:
      - query
    segment:
      title: Segment
      type: object
      x-tags:
      - Segments
      description: A segment is a group of your contacts defined by the rules that
        you set.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
          - segment
          example: segment
        id:
          type: string
          description: The unique identifier representing the segment.
          example: 56203d253cba154d39010062
        name:
          type: string
          description: The name of the segment.
          example: Active
        created_at:
          type: integer
          description: The time the segment was created.
          example: 1394621988
        updated_at:
          type: integer
          description: The time the segment was updated.
          example: 1394622004
        person_type:
          type: string
          description: 'Type of the contact: contact (lead) or user.'
          enum:
          - contact
          - user
          example: contact
        count:
          type: integer
          description: The number of items in the user segment. It's returned when
            `include_count=true` is included in the request.
          example: 3
          nullable: true
    segment_list:
      title: Segment List
      type: object
      description: This will return a list of Segment Objects. The result may also
        have a pages object if the response is paginated.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - segment.list
          example: segment.list
        segments:
          type: array
          description: A list of Segment objects
          items:
            "$ref": "#/components/schemas/segment"
        pages:
          type: object
          description: A pagination object, which may be empty, indicating no further
            pages to fetch.
    single_filter_search_request:
      title: Single Filter Search Request
      description: Search using Intercoms Search APIs with a single filter.
      type: object
      properties:
        field:
          type: string
          description: The accepted field that you want to search on.
          example: created_at
        operator:
          type: string
          enum:
          - "="
          - "!="
          - IN
          - NIN
          - "<"
          - ">"
          - "~"
          - "!~"
          - "^"
          - "$"
          description: The accepted operators you can use to define how you want to
            search for the value.
          example: ">"
        value:
          type: string
          description: The value that you want to search on.
          example: '73732934'
    sla_applied:
      title: Applied SLA
      type: object
      nullable: true
      description: |
        The SLA Applied object contains the details for which SLA has been applied to this conversation.
        Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null.
      properties:
        type:
          type: string
          description: object type
          example: conversation_sla_summary
        sla_name:
          type: string
          description: The name of the SLA as given by the teammate when it was created.
          example: ''
        sla_status:
          type: string
          enum:
          - hit
          - missed
          - cancelled
          - active
          description: |-
            SLA statuses:
                        - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.
                        - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.
                        - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.
          example: hit
    snooze_conversation_request:
      title: Snooze Conversation Request
      type: object
      description: Payload of the request to snooze a conversation
      properties:
        message_type:
          type: string
          enum:
          - snoozed
          example: snoozed
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017691'
        snoozed_until:
          type: integer
          format: timestamp
          description: The time you want the conversation to reopen.
          example: 1673609604
      required:
      - message_type
      - admin_id
      - snoozed_until
    social_profile:
      title: Social Profile
      type: object
      description: A Social Profile allows you to label your contacts, companies,
        and conversations and list them using that Social Profile.
      properties:
        type:
          type: string
          description: value is "social_profile"
          example: social_profile
        name:
          type: string
          description: The name of the Social media profile
          example: Facebook
        url:
          type: string
          format: uri
          description: The name of the Social media profile
          example: http://twitter.com/th1sland
    starting_after_paging:
      title: 'Pagination: Starting After'
      type: object
      nullable: true
      properties:
        per_page:
          type: integer
          description: The number of results to fetch per page.
          example: 2
        starting_after:
          type: string
          description: The cursor to use in the next request to get the next page
            of results.
          nullable: true
          example: your-cursor-from-response
    subscription_type:
      title: Subscription Types
      type: object
      x-tags:
      - Subscription Types
      description: A subscription type lets customers easily opt out of non-essential
        communications without missing what's important to them.
      properties:
        type:
          type: string
          description: The type of the object - subscription
          example: subscription
        id:
          type: string
          description: The unique identifier representing the subscription type.
          example: '123456'
        state:
          type: string
          description: The state of the subscription type.
          enum:
          - live
          - draft
          - archived
          example: live
        default_translation:
          "$ref": "#/components/schemas/translation"
        translations:
          type: array
          description: An array of translations objects with the localised version
            of the subscription type in each available locale within your translation
            settings.
          items:
            "$ref": "#/components/schemas/translation"
        consent_type:
          type: string
          description: Describes the type of consent.
          enum:
          - opt_out
          - opt_in
          example: opt_in
        content_types:
          type: array
          description: The message types that this subscription supports - can contain
            `email` or `sms_message`.
          items:
            type: string
            enum:
            - email
            - sms_message
            example: email
    subscription_type_list:
      title: Subscription Types
      type: object
      description: A list of subscription type objects.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of subscription type objects associated with the workspace
            .
          items:
            "$ref": "#/components/schemas/subscription_type"
    tag:
      title: Tag
      type: object
      x-tags:
      - Tags
      description: A tag allows you to label your contacts, companies, and conversations
        and list them using that tag.
      properties:
        type:
          type: string
          description: value is "tag"
          example: tag
        id:
          type: string
          description: The id of the tag
          example: '123456'
        name:
          type: string
          description: The name of the tag
          example: Test tag
        applied_at:
          type: integer
          format: date-time
          description: The time when the tag was applied to the object
          example: 1663597223
        applied_by:
          "$ref": "#/components/schemas/reference"
    tag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Tag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
      - name
      - companies
    tag_list:
      title: Tags
      type: object
      description: A list of tags objects in the workspace.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of tags objects associated with the workspace .
          items:
            "$ref": "#/components/schemas/tag"
    tag_multiple_users_request:
      description: You can tag a list of users.
      type: object
      title: Tag Users Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        users:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the user.
                example: 5f7f0d217289f8d2f4262080
      required:
      - name
      - users
    tags:
      title: Tags
      type: object
      description: A list of tags objects associated with a conversation
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - tag.list
          example: tag.list
        tags:
          type: array
          description: A list of tags objects associated with the conversation.
          items:
            "$ref": "#/components/schemas/tag"
    team:
      title: Team
      type: object
      x-tags:
      - Teams
      description: Teams are groups of admins in Intercom.
      properties:
        type:
          type: string
          description: Value is always "team"
          example: team
        id:
          type: string
          description: The id of the team
          example: '814865'
        name:
          type: string
          description: The name of the team
          example: Example Team
        admin_ids:
          type: array
          description: The list of admin IDs that are a part of the team.
          example:
          - 493881
          items:
            type: integer
        admin_priority_level:
          "$ref": "#/components/schemas/admin_priority_level"
    team_list:
      title: Team List
      type: object
      description: This will return a list of team objects for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - team.list
          example: team.list
        teams:
          type: array
          description: A list of team objects
          items:
            "$ref": "#/components/schemas/team"
    team_priority_level:
      title: Team Priority Level
      type: object
      nullable: true
      description: Admin priority levels for teams
      properties:
        primary_team_ids:
          type: array
          description: The primary team ids for the team
          nullable: true
          example:
          - 814865
          items:
            type: integer
        secondary_team_ids:
          type: array
          description: The secondary team ids for the team
          nullable: true
          example:
          - 493881
          items:
            type: integer
    ticket:
      title: Ticket
      type: object
      x-tags:
      - Tickets
      description: Tickets are how you track requests from your users.
      nullable: true
      properties:
        type:
          type: string
          description: Always ticket
          enum:
          - ticket
          default: ticket
          example: ticket
        id:
          type: string
          description: The unique identifier for the ticket which is given by Intercom.
          example: '1295'
        ticket_id:
          type: string
          description: The ID of the Ticket used in the Intercom Inbox and Messenger.
            Do not use ticket_id for API queries.
          example: '1390'
        category:
          type: string
          description: Category of the Ticket.
          enum:
          - Customer
          - Back-office
          - Tracker
          example: Customer
        ticket_attributes:
          "$ref": "#/components/schemas/ticket_custom_attributes"
        ticket_state:
          type: string
          description: The state the ticket is currenly in
          enum:
          - submitted
          - in_progress
          - waiting_on_customer
          - resolved
          example: submitted
        ticket_state_internal_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible in Intercom
        ticket_state_external_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible to customers, in the messenger, email and tickets portal.
        ticket_type:
          "$ref": "#/components/schemas/ticket_type"
        contacts:
          "$ref": "#/components/schemas/ticket_contacts"
        admin_assignee_id:
          type: string
          description: The id representing the admin assigned to the ticket.
          example: '1295'
        team_assignee_id:
          type: string
          description: The id representing the team assigned to the ticket.
          example: '1295'
        created_at:
          type: integer
          format: date-time
          description: The time the ticket was created as a UTC Unix timestamp.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the ticket was updated as a UTC Unix timestamp.
          example: 1663597260
        open:
          type: boolean
          description: Whether or not the ticket is open. If false, the ticket is
            closed.
          example: true
        snoozed_until:
          type: integer
          format: date-time
          description: The time the ticket will be snoozed until as a UTC Unix timestamp.
            If null, the ticket is not currently snoozed.
          example: 1663597260
        linked_objects:
          "$ref": "#/components/schemas/linked_object_list"
        ticket_parts:
          "$ref": "#/components/schemas/ticket_parts"
        is_shared:
          type: boolean
          description: Whether or not the ticket is shared with the customer.
          example: true
    ticket_contacts:
      title: Contacts
      type: object
      x-tags:
      - Tickets
      description: The list of contacts affected by a ticket.
      properties:
        type:
          type: string
          description: always contact.list
          enum:
          - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts affected by this ticket.
          items:
            "$ref": "#/components/schemas/contact_reference"
    ticket_custom_attributes:
      title: Ticket Attributes
      type: object
      description: An object containing the different attributes associated to the
        ticket as key-value pairs. For the default title and description attributes,
        the keys are `_default_title_` and `_default_description_`.
      additionalProperties:
        anyOf:
        - type: string
          nullable: true
        - type: number
        - type: boolean
        - type: array
        - "$ref": "#/components/schemas/file_attribute"
      example:
        _default_title_: Found a bug
        _default_description_: The button's not working
    ticket_list:
      title: Ticket List
      type: object
      description: Tickets are how you track requests from your users.
      properties:
        type:
          type: string
          description: Always ticket.list
          enum:
          - ticket.list
          example: ticket.list
        tickets:
          type: array
          description: The list of ticket objects
          items:
            "$ref": "#/components/schemas/ticket"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 12345
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    ticket_part:
      title: Ticket Part
      type: object
      x-tags:
      - Tickets
      description: A Ticket Part represents a message in the ticket.
      properties:
        type:
          type: string
          description: Always ticket_part
          example: ticket_part
        id:
          type: string
          description: The id representing the ticket part.
          example: '3'
        part_type:
          type: string
          description: The type of ticket part.
          example: comment
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML.
          example: "<p>Okay!</p>"
        previous_ticket_state:
          type: string
          enum:
          - submitted
          - in_progress
          - waiting_on_customer
          - resolved
          description: The previous state of the ticket.
          example: submitted
        ticket_state:
          type: string
          enum:
          - submitted
          - in_progress
          - waiting_on_customer
          - resolved
          description: The state of the ticket.
          example: submitted
        created_at:
          type: integer
          format: date-time
          description: The time the ticket part was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the ticket part was updated.
          example: 1663597260
        assigned_to:
          "$ref": "#/components/schemas/reference"
          nullable: true
          description: The id of the admin that was assigned the ticket by this ticket_part
            (null if there has been no change in assignment.)
        author:
          "$ref": "#/components/schemas/ticket_part_author"
        attachments:
          title: Ticket part attachments
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/part_attachment"
        external_id:
          type: string
          nullable: true
          description: The external id of the ticket part
          example: abcd1234
        redacted:
          type: boolean
          description: Whether or not the ticket part has been redacted.
          example: false
    ticket_part_author:
      title: Ticket part author
      type: object
      description: The author that wrote or triggered the part. Can be a bot, admin,
        team or user.
      properties:
        type:
          type: string
          description: The type of the author
          example: admin
          enum:
          - admin
          - bot
          - team
          - user
        id:
          type: string
          description: The id of the author
          example: '274'
        name:
          type: string
          nullable: true
          description: The name of the author
          example: Operator
        email:
          type: string
          format: email
          description: The email of the author
          example: operator+abcd1234@intercom.io
    ticket_parts:
      title: Ticket Parts
      type: object
      description: A list of Ticket Part objects for each note and event in the ticket.
        There is a limit of 500 parts.
      properties:
        type:
          type: string
          description: ''
          enum:
          - ticket_part.list
          example: ticket_part.list
        ticket_parts:
          title: Tickt Parts
          type: array
          description: A list of Ticket Part objects for each ticket. There is a limit
            of 500 parts.
          items:
            "$ref": "#/components/schemas/ticket_part"
        total_count:
          type: integer
          description: ''
          example: 2
    ticket_reply:
      title: A Ticket Part representing a note, comment, or quick_reply on a ticket
      type: object
      description: A Ticket Part representing a note, comment, or quick_reply on a
        ticket
      properties:
        type:
          type: string
          description: Always ticket_part
          example: ticket_part
          enum:
          - ticket_part
        id:
          type: string
          description: The id representing the part.
          example: '3'
        part_type:
          type: string
          description: Type of the part
          example: note
          enum:
          - note
          - comment
          - quick_reply
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML.
          example: "<p>Okay!</p>"
        created_at:
          type: integer
          format: date-time
          description: The time the note was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the note was updated.
          example: 1663597260
        author:
          "$ref": "#/components/schemas/ticket_part_author"
        attachments:
          title: Ticket part attachments
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/part_attachment"
        redacted:
          type: boolean
          description: Whether or not the ticket part has been redacted.
          example: false
    ticket_request_custom_attributes:
      title: Ticket Attributes
      type: object
      description: The attributes set on the ticket. When setting the default title
        and description attributes, the attribute keys that should be used are `_default_title_`
        and `_default_description_`. When setting ticket type attributes of the list
        attribute type, the key should be the attribute name and the value of the
        attribute should be the list item id, obtainable by [listing the ticket type](ref:get_ticket-types).
        For example, if the ticket type has an attribute called `priority` of type
        `list`, the key should be `priority` and the value of the attribute should
        be the guid of the list item (e.g. `de1825a0-0164-4070-8ca6-13e22462fa7e`).
      additionalProperties:
        anyOf:
        - type: string
          nullable: true
        - type: number
        - type: boolean
        - type: array
      example:
        _default_title_: Found a bug
        _default_description_: The button is not working
    ticket_type:
      title: Ticket Type
      type: object
      x-tags:
      - Tickets
      description: A ticket type, used to define the data fields to be captured in
        a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type`.
          example: ticket_type
        id:
          type: string
          description: The id representing the ticket type.
          example: '1295'
        category:
          type: string
          description: Category of the Ticket Type.
          enum:
          - Customer
          - Back-office
          - Tracker
          example: Customer
        name:
          type: string
          description: The name of the ticket type
          example: Bug
        description:
          type: string
          description: The description of the ticket type
          example: A bug that has been reported.
        icon:
          type: string
          description: The icon of the ticket type
          example: "\U0001F41E"
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type belongs to.
          example: ecahpwf5
        ticket_type_attributes:
          "$ref": "#/components/schemas/ticket_type_attribute_list"
        archived:
          type: boolean
          description: Whether the ticket type is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was last updated.
    ticket_type_attribute:
      title: Ticket Type Attribute
      type: object
      description: Ticket type attribute, used to define each data field to be captured
        in a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attribute`.
          example: ticket_type_attribute
        id:
          type: string
          description: The id representing the ticket type attribute.
          example: '1'
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type attribute belongs
            to.
          example: ecahpwf5
        name:
          type: string
          description: The name of the ticket type attribute
          example: Title
        description:
          type: string
          description: The description of the ticket type attribute
          example: Bug title.
        data_type:
          type: string
          description: 'The type of the data attribute (allowed values: "string list
            integer decimal boolean datetime files")'
          example: string
        input_options:
          type: object
          description: Input options for the attribute
          example: 'multiline: true'
        order:
          type: integer
          description: The order of the attribute against other attributes
          example: 1
        required_to_create:
          type: boolean
          description: Whether the attribute is required or not for teammates.
          default: false
          example: false
        required_to_create_for_contacts:
          type: boolean
          description: Whether the attribute is required or not for contacts.
          default: false
          example: false
        visible_on_create:
          type: boolean
          description: Whether the attribute is visible or not to teammates.
          default: true
          example: false
        visible_to_contacts:
          type: boolean
          description: Whether the attribute is visible or not to contacts.
          default: true
          example: false
        default:
          type: boolean
          description: Whether the attribute is built in or not.
          example: true
        ticket_type_id:
          type: integer
          description: The id of the ticket type that the attribute belongs to.
          example: 42
        archived:
          type: boolean
          description: Whether the ticket type attribute is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was last updated.
    ticket_type_attribute_list:
      title: Ticket Type Attributes
      type: object
      description: A list of attributes associated with a given ticket type.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attributes.list`.
        ticket_type_attributes:
          type: array
          description: A list of ticket type attributes associated with a given ticket
            type.
          items:
            "$ref": "#/components/schemas/ticket_type_attribute"
    ticket_type_list:
      title: Ticket Types
      type: object
      description: A list of ticket types associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type.list`.
        ticket_types:
          type: array
          description: A list of ticket_types associated with a given workspace.
          items:
            "$ref": "#/components/schemas/ticket_type"
    translation:
      title: Translation
      type: object
      description: A translation object contains the localised details of a subscription
        type.
      properties:
        name:
          type: string
          description: The localised name of the subscription type.
          example: Announcements
        description:
          type: string
          description: The localised description of the subscription type.
          example: Offers, product and feature announcements
        locale:
          type: string
          description: The two character identifier for the language of the translation
            object.
          example: en
    untag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Untag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag which will be untagged from the company
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
              untag:
                type: boolean
                description: Always set to true
                example: 'true'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
      - name
      - companies
    update_article_request:
      description: You can Update an Article
      type: object
      title: Update Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: "<p>This is the body in html</p>"
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
          - published
          - draft
          example: draft
        parent_id:
          type: string
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '18'
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          "$ref": "#/components/schemas/article_translated_content"
    update_collection_request:
      description: You can update a collection
      type: object
      title: Update Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it will be
            updated as the first level collection.
          example: '6871118'
    update_contact_request:
      description: You can update a contact
      type: object
      title: Update Contact Request Payload
      properties:
        role:
          type: string
          description: The role of the contact.
        external_id:
          type: string
          description: A unique identifier for the contact which is given to Intercom
        email:
          type: string
          description: The contacts email
          example: jdoe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone
          example: "+353871234567"
        name:
          type: string
          nullable: true
          description: The contacts name
          example: John Doe
        avatar:
          type: string
          nullable: true
          description: An image URL containing the avatar of a contact
          example: https://www.example.com/avatar_image.jpg
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: The time specified for when a contact signed up
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the contact was last seen (either where the Intercom
            Messenger was installed or when specified manually)
          example: 1571672154
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact
          example: 123
        unsubscribed_from_emails:
          type: boolean
          nullable: true
          description: Whether the contact is unsubscribed from emails
          example: true
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the contact
    update_content_import_source_request:
      title: Create Content Import Source Payload
      type: object
      description: You can modify a Content Import Source of your Fin Content Library.
      nullable: false
      properties:
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`. You can not change the value to or from api.
          enum:
          - api
          - automated
          - manual
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
          - active
          - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the content import source. This may only be different
            from the existing value if the sync behavior is API.
          example: https://help.example.com
      required:
      - sync_behavior
      - url
    update_conversation_request:
      title: Update Conversation Request
      type: object
      description: Payload of the request to update a conversation
      properties:
        read:
          type: boolean
          description: Mark a conversation as read within Intercom.
          example: true
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
    update_data_attribute_request:
      description: ''
      type: object
      title: Update Data Attribute Request
      properties:
        archived:
          type: boolean
          description: Whether the attribute is to be archived or not.
          example: false
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
          - option1
          - option2
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
    update_external_page_request:
      title: Update External Page Payload
      type: object
      description: You can update an External Page in your Fin Content Library.
      nullable: false
      properties:
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: "<p>Hello world!</p>"
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        fin_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by Fin.
          default: true
          example: true
        locale:
          type: string
          description: Always en
          enum:
          - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
      required:
      - title
      - html
      - url
      - locale
      - source_id
    update_ticket_request:
      description: You can update a Ticket
      type: object
      title: Update Ticket Request Payload
      properties:
        ticket_attributes:
          type: object
          description: The attributes set on the ticket.
          example:
            title: example
            description: having a problem
        state:
          type: string
          enum:
          - in_progress
          - waiting_on_customer
          - resolved
          description: The state of the ticket.
          example: submitted
        open:
          type: boolean
          description: Specify if a ticket is open. Set to false to close a ticket.
            Closing a ticket will also unsnooze it.
          example: true
        is_shared:
          type: boolean
          description: Specify whether the ticket is visible to users.
          example: true
        snoozed_until:
          type: integer
          format: timestamp
          description: The time you want the ticket to reopen.
          example: 1673609604
        assignment:
          type: object
          properties:
            admin_id:
              type: string
              description: The ID of the admin performing the action.
              example: '123'
            assignee_id:
              type: string
              description: The ID of the admin or team to which the ticket is assigned.
                Set this 0 to unassign it.
              example: '123'
    update_ticket_type_attribute_request:
      description: You can update a Ticket Type Attribute
      type: object
      title: Update Ticket Type Attribute Request Payload
      properties:
        name:
          type: string
          description: The name of the ticket type attribute
          example: Bug Priority
        description:
          type: string
          description: The description of the attribute presented to the teammate
            or contact
          example: Priority level of the bug
        required_to_create:
          type: boolean
          description: Whether the attribute is required to be filled in when teammates
            are creating the ticket in Inbox.
          default: false
          example: false
        required_to_create_for_contacts:
          type: boolean
          description: Whether the attribute is required to be filled in when contacts
            are creating the ticket in Messenger.
          default: false
          example: false
        visible_on_create:
          type: boolean
          description: Whether the attribute is visible to teammates when creating
            a ticket in Inbox.
          default: true
          example: true
        visible_to_contacts:
          type: boolean
          description: Whether the attribute is visible to contacts when creating
            a ticket in Messenger.
          default: true
          example: true
        multiline:
          type: boolean
          description: Whether the attribute allows multiple lines of text (only applicable
            to string attributes)
          example: false
        list_items:
          type: string
          description: A comma delimited list of items for the attribute value (only
            applicable to list attributes)
          example: Low Priority,Medium Priority,High Priority
        allow_multiple_values:
          type: boolean
          description: Whether the attribute allows multiple files to be attached
            to it (only applicable to file attributes)
          example: false
        archived:
          type: boolean
          description: Whether the attribute should be archived and not shown during
            creation of the ticket (it will still be present on previously created
            tickets)
          example: false
    update_ticket_type_request:
      description: |
        The request payload for updating a ticket type.
        You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
      type: object
      title: Update Ticket Type Request Payload
      nullable: true
      properties:
        name:
          type: string
          description: The name of the ticket type.
          example: Bug
        description:
          type: string
          description: The description of the ticket type.
          example: A bug has been occured
        category:
          type: string
          description: Category of the Ticket Type.
          enum:
          - Customer
          - Back-office
          - Tracker
          example: Customer
        icon:
          type: string
          description: The icon of the ticket type.
          example: "\U0001F41E"
          default: "\U0001F39F️"
        archived:
          type: boolean
          description: The archived status of the ticket type.
          example: false
        is_internal:
          type: boolean
          description: Whether the tickets associated with this ticket type are intended
            for internal use only or will be shared with customers. This is currently
            a limited attribute.
          example: false
          default: false
    update_visitor_request:
      description: Update an existing visitor.
      type: object
      title: Update Visitor Request Payload
      properties:
        id:
          type: string
          description: A unique identified for the visitor which is given by Intercom.
          example: 8a88a590-e
        user_id:
          type: string
          description: A unique identified for the visitor which is given by you.
          example: '123'
        name:
          type: string
          description: The visitor's name.
          example: Christian Bale
        custom_attributes:
          type: object
          description: The custom attributes which are set for the visitor.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
      anyOf:
      - required:
        - id
      - required:
        - user_id
    visitor:
      title: Visitor
      type: object
      description: Visitors are useful for representing anonymous people that have
        not yet been identified. They usually represent website visitors. Visitors
        are not visible in Intercom platform. The Visitors resource provides methods
        to fetch, update, convert and delete.
      nullable: true
      properties:
        type:
          type: string
          description: Value is 'visitor'
          default: visitor
          example: visitor
        id:
          type: string
          description: The Intercom defined id representing the Visitor.
          example: 530370b477ad7120001d
        user_id:
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        anonymous:
          type: boolean
          description: Identifies if this visitor is anonymous.
          example: false
        email:
          type: string
          format: email
          description: The email of the visitor.
          example: jane.doe@example.com
        phone:
          type: string
          nullable: true
          description: The phone number of the visitor.
          example: 555-555-5555
        name:
          type: string
          nullable: true
          description: The name of the visitor.
          example: Jane Doe
        pseudonym:
          type: string
          nullable: true
          description: The pseudonym of the visitor.
          example: Red Duck from Dublin
        avatar:
          type: object
          properties:
            type:
              type: string
              description: ''
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the visitor.
              example: https://example.com/avatar.png
        app_id:
          type: string
          description: The id of the app the visitor is associated with.
          example: hfi1bx4l
        companies:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - company.list
              example: company.list
            companies:
              type: array
              items:
                "$ref": "#/components/schemas/company"
        location_data:
          type: object
          properties:
            type:
              type: string
              description: ''
              default: location_data
              example: location_data
            city_name:
              type: string
              description: The city name of the visitor.
              example: Dublin
            continent_code:
              type: string
              description: The continent code of the visitor.
              example: EU
            country_code:
              type: string
              description: The country code of the visitor.
              example: IRL
            country_name:
              type: string
              description: The country name of the visitor.
              example: Ireland
            postal_code:
              type: string
              description: The postal code of the visitor.
              example: D02 N960
            region_name:
              type: string
              description: The region name of the visitor.
              example: Leinster
            timezone:
              type: string
              description: The timezone of the visitor.
              example: Europe/Dublin
        las_request_at:
          type: integer
          description: The time the Lead last recorded making a request.
          example: 1663597260
        created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        remote_created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        signed_up_at:
          type: integer
          description: The time the Visitor signed up for your product.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the Visitor was updated.
          example: 1663597260
        session_count:
          type: integer
          description: The number of sessions the Visitor has had.
          example: 1
        social_profiles:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - social_profile.list
              example: social_profile.list
            social_profiles:
              type: array
              items:
                type: string
        owner_id:
          type: string
          nullable: true
          description: The id of the admin that owns the Visitor.
          example: '5169261'
        unsubscribed_from_emails:
          type: boolean
          description: Whether the Visitor is unsubscribed from emails.
          example: false
        marked_email_as_spam:
          type: boolean
          description: Identifies if this visitor has marked an email as spam.
          example: false
        has_hard_bounced:
          type: boolean
          description: Identifies if this visitor has had a hard bounce.
          example: false
        tags:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - tag.list
              example: tag.list
            tags:
              type: array
              items:
                properties:
                  type:
                    type: string
                    description: The type of the object
                    enum:
                    - tag
                    example: tag
                  id:
                    type: string
                    description: The id of the tag.
                    example: '8482'
                  name:
                    type: string
                    description: The name of the tag.
                    example: tag_name
        segments:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - segment.list
              example: segment.list
            segments:
              type: array
              items:
                type: string
        custom_attributes:
          type: object
          description: The custom attributes you have set on the Visitor.
          additionalProperties:
            type: string
        referrer:
          type: string
          nullable: true
          description: The referer of the visitor.
          example: https://www.google.com/
        utm_campaign:
          type: string
          nullable: true
          description: The utm_campaign of the visitor.
          example: intercom-link
        utm_content:
          type: string
          nullable: true
          description: The utm_content of the visitor.
          example: banner
        utm_medium:
          type: string
          nullable: true
          description: The utm_medium of the visitor.
          example: email
        utm_source:
          type: string
          nullable: true
          description: The utm_source of the visitor.
          example: Intercom
        utm_term:
          type: string
          nullable: true
          description: The utm_term of the visitor.
          example: messenger
        do_not_track:
          type: boolean
          nullable: true
          description: Identifies if this visitor has do not track enabled.
          example: false
    visitor_deleted_object:
      title: Visitor Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the visitor which is given by Intercom.
          example: 530370b477ad7120001d
        type:
          type: string
          description: The type of object which was deleted
          enum:
          - visitor
          example: visitor
        user_id:
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
servers:
- url: https://api.intercom.io
  description: The production API server
- url: https://api.eu.intercom.io
  description: The european API server
- url: https://api.au.intercom.io
  description: The australian API server
security:
- bearerAuth: []
tags:
- name: Admins
  description: Everything about your Admins
- name: AI Content
  description: |
    With the AI Content APIs, you can create and manage External Pages and Content Import Sources for your Fin Content Library.

    &nbsp;

    *External Pages* are pages that you want Fin to be able to answer questions about. The API for External Pages is a great way to ingest into your Fin Content Library pages that are not publicly accessible and hence can't be crawled by Intercom.

    &nbsp;

    *Content Import Sources* are the sources of those pages, and they are used to determine the default audience for the pages (configured via the UI). You should create a Content Import Source for each source of External Pages that you want to ingest into your Fin Content Library.

    &nbsp;

    You can then iterate through the content from that source via its API and POST it to the External Pages endpoint. That endpoint has an *external_id* parameter which allows you to specify the identifier from the source. The endpoint will then either create a new External Page or update an existing one as appropriate.",
- name: Articles
  description: Everything about your Articles
- name: Companies
  description: Everything about your Companies
- name: Contacts
  description: Everything about your contacts
- name: Conversations
  description: Everything about your Conversations
  externalDocs:
    description: What is a conversation?
    url: https://www.intercom.com/help/en/articles/4323904-what-is-a-conversation
- name: Custom Object Instances
  description: Everything about your Custom Object instances.
- name: Data Attributes
  description: Everything about your Data Attributes
- name: Data Events
  description: Everything about your Data Events
- name: Data Export
  description: Everything about your Data Exports
- name: Help Center
  description: Everything about your Help Center
- name: Messages
  description: Everything about your messages
- name: News
  description: Everything about your News
  externalDocs:
    description: News explained
    url: https://www.intercom.com/help/en/articles/6362251-news-explained
- name: Notes
  description: Everything about your Notes
- name: Segments
  description: Everything about your Segments
- name: Subscription Types
  description: Everything about subscription types
- name: Switch
  description: Everything about Switch
  externalDocs:
    description: 'Meet Switch: from on hold to messaging in just a few taps'
    url: https://www.intercom.com/switch
- name: Tags
  description: Everything about tags
- name: Teams
  description: Everything about your Teams
- name: Ticket Type Attributes
  description: Everything about your ticket type attributes
- name: Ticket Types
  description: Everything about your ticket types
- name: Tickets
  description: Everything about your tickets
- name: Visitors
  description: Everything about your Visitors
