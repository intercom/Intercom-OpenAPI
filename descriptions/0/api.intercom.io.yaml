---
openapi: 3.0.1
info:
  title: Intercom API
  version: Unstable
  description: The intercom API reference.
  contact:
    name: Intercom Developer Hub
    url: https://developers.intercom.com
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
paths:
  '/me':
    get:
      x-fern-sdk-group-name:
        - admins
      x-fern-sdk-method-name: identify
      summary: Identify an admin
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Admins
      operationId: identifyAdmin
      description: "\nYou can view the authorized admin and the workspace/app details.\n\n Single
        Sign On\n\n If you are building a custom \"Log in with Intercom\" flow for
        your site, and you call the `/me` endpoint to identify the logged-in user,
        you should not accept any sign-ins from users with unverified email addresses
        as it poses a potential impersonation security risk.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266830'
                    email: email@example.com
                    name: Joe Example
                    email_verified: true
                    app:
                      type: app
                      id_code: aaaa0000
                      name: TestSpace
                      created_at: 1727856792
                      secure: false
                      identity_verification: false
                      timezone: America/Los_Angeles
                      region: US
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/assets/default-avatars/admins/128.png
                    has_inbox_seat: true
              schema:
                '$ref': '#/components/schemas/admin_with_app'
  '/admins/{id}/away':
    x-fern-sdk-group-name:
      - admins
    x-fern-sdk-method-name: setAway
    put:
      summary: Set an admin to away
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier of a given admin
          schema:
            type: integer
      tags:
        - Admins
      operationId: setAwayAdmin
      description: You can set an admin to away by changing their away status.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266831'
                    name: Jane Example
                    email: email@example.com
                    away_mode_enabled: true
                    away_mode_reassign: true
                    has_inbox_seat: true
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/assets/default-avatars/admins/128.png
                    team_ids: []
                    team_priority_level: {}
              schema:
                '$ref': '#/components/schemas/admin'
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: cc85f377-00d3-4294-ae76-fd7b5a580e37
                    errors:
                      - code: admin_not_found
                        message: Admin for admin_id not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f82a1d2b-fec2-4546-8768-2cc339a119ab
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - away_mode_enabled
                - away_mode_reassign
              properties:
                away_mode_enabled:
                  type: boolean
                  description: Set to "true" to change the status of the admin to
                    away.
                  example: true
                  default: true
                away_mode_reassign:
                  type: boolean
                  description: Set to "true" to assign any new conversation replies
                    to your default inbox.
                  example: false
                  default: false
            examples:
              successful_response:
                summary: Successful response
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              admin_not_found:
                summary: Admin not found
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              unauthorized:
                summary: Unauthorized
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
  '/admins/activity_logs':
    x-fern-sdk-group-name:
      - admins
    x-fern-sdk-method-name: listActivityLogs
    get:
      summary: List all activity logs
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: created_at_after
          in: query
          required: true
          description: The start date that you request data for. It must be formatted
            as a UNIX timestamp.
          example: '1677253093'
          schema:
            type: string
        - name: created_at_before
          in: query
          required: false
          description: The end date that you request data for. It must be formatted
            as a UNIX timestamp.
          example: '1677861493'
          schema:
            type: string
      tags:
        - Admins
      operationId: listActivityLogs
      description: You can get a log of activities by all admins in an app.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: activity_log.list
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 20
                      total_pages: 1
                    activity_logs:
                      - id: 51388355-4556-4f75-98f2-2f713d781377
                        performed_by:
                          type: admin
                          id: '991266835'
                          email: admin5@email.com
                          ip: 127.0.0.1
                        metadata:
                          before: before
                          after: after
                        created_at: 1727856800
                        activity_type: app_name_change
                        activity_description: Joe Example changed your app name from
                          before to after.
                      - id: 5eba91c1-5cf7-476f-ae35-7f34a0ea8e3e
                        performed_by:
                          type: admin
                          id: '991266835'
                          email: email@example.com
                          ip: 127.0.0.1
                        metadata:
                          message:
                            id: 123
                            title: Initial message title
                          before: Initial message title
                          after: Eventual message title
                        created_at: 1727856800
                        activity_type: message_state_change
                        activity_description: Jane Example changed your Initial message
                          title message from Initial message title to Eventual message
                          title.
              schema:
                '$ref': '#/components/schemas/activity_log_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b1508a10-0195-43d7-aeb2-4eaa1b72132d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/admins':
    x-fern-sdk-group-name:
      - admins
    x-fern-sdk-method-name: list
    get:
      summary: List all admins
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Admins
      operationId: listAdmins
      description: You can fetch a list of admins for a given workspace.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin.list
                    admins:
                      - type: admin
                        email: email@example.com
                        id: '991266837'
                        name: Jane Example
                        away_mode_enabled: false
                        away_mode_reassign: false
                        has_inbox_seat: true
                        team_ids: []
                        team_priority_level: {}
              schema:
                '$ref': '#/components/schemas/admin_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8f6afb01-98ec-4ccd-8a7d-6069a78ec697
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/admins/{id}':
    x-fern-sdk-group-name:
      - admins
    x-fern-sdk-method-name: get
    get:
      summary: Get an admin
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier of a given admin
          example: 991266839
          schema:
            type: integer
      tags:
        - Admins
      operationId: getAdmin
      description: You can retrieve the details of a single admin.
      responses:
        '200':
          description: Admin found
          content:
            application/json:
              examples:
                Admin found:
                  value:
                    type: admin
                    id: '991266839'
                    name: Joe Example
                    email: test@example.com
                    away_mode_enabled: false
                    away_mode_reassign: false
                    has_inbox_seat: true
                    team_ids: ['111']
                    team_priority_level:
                      primary_team_ids: ['111']
              schema:
                '$ref': '#/components/schemas/admin'
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: 2d72b5aa-926f-45e9-9f0c-ed05a6a9296a
                    errors:
                      - code: admin_not_found
                        message: Admin not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7170420b-64c8-4ce6-905c-10deba56cce3
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/ai/content_import_sources':
    get:
      x-fern-sdk-group-name:
        - ai
        - contentImportSources
      x-fern-sdk-method-name: list
      summary: List content import sources
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: listContentImportSources
      description: You can retrieve a list of all content import sources for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    data:
                      - id: 17
                        type: content_import_source
                        last_synced_at: 1727856804
                        status: active
                        url: https://support.example.com/us/1
                        sync_behavior: automatic
                        created_at: 1727856804
                        updated_at: 1727856804
                      - id: 18
                        type: content_import_source
                        last_synced_at: 1727856804
                        status: active
                        url: https://support.example.com/us/2
                        sync_behavior: automatic
                        created_at: 1727856804
                        updated_at: 1727856804
                      - id: 19
                        type: content_import_source
                        last_synced_at: 1727856804
                        status: active
                        url: https://support.example.com/us/3
                        sync_behavior: automatic
                        created_at: 1727856804
                        updated_at: 1727856804
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 3
                    type: list
              schema:
                '$ref': '#/components/schemas/content_import_sources_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1de1fb14-56dd-43da-9e33-ca6a288cd1e8
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - ai
        - contentImportSources
      x-fern-sdk-method-name: create
      summary: Create a content import source
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: createContentImportSource
      description: You can create a new content import source by sending a POST request
        to this endpoint.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 20
                    type: content_import_source
                    last_synced_at: 1727856806
                    status: active
                    url: https://www.example.com
                    sync_behavior: api
                    created_at: 1727856806
                    updated_at: 1727856806
              schema:
                '$ref': '#/components/schemas/content_import_source'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: d190a53b-d380-44e8-945d-65b6f3518cf5
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_content_import_source_request'
            examples:
              successful:
                summary: successful
                value:
                  sync_behavior: api
                  url: https://www.example.com
  '/ai/content_import_sources/{id}':
    parameters:
      - name: id
        in: path
        description: The unique identifier for the content import source which is given
          by Intercom.
        required: true
        schema:
          type: string
    delete:
      x-fern-sdk-group-name:
        - ai
        - contentImportSources
      x-fern-sdk-method-name: delete
      summary: Delete a content import source
      operationId: deleteContentImportSource
      description: You can delete a content import source by making a DELETE request
        this endpoint. This will also delete all external pages that were imported
        from this source.
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      responses:
        '204':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 285a794e-efb4-4d71-9eae-5f274c67b711
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    get:
      x-fern-sdk-group-name:
        - ai
      x-fern-sdk-method-name: getSource
      summary: Retrieve a content import source
      operationId: getContentImportSource
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 22
                    type: content_import_source
                    last_synced_at: 1727856808
                    status: active
                    url: https://support.example.com/us/5
                    sync_behavior: api
                    created_at: 1727856808
                    updated_at: 1727856808
              schema:
                '$ref': '#/components/schemas/content_import_source'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c279123e-3692-4d46-976e-901932435a66
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - ai
      x-fern-sdk-method-name: updateSource
      summary: Update a content import source
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: updateContentImportSource
      description: You can update an existing content import source.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 23
                    type: content_import_source
                    last_synced_at: 1727856809
                    status: active
                    url: https://www.example.com
                    sync_behavior: api
                    created_at: 1727856809
                    updated_at: 1727856810
              schema:
                '$ref': '#/components/schemas/content_import_source'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 858a0910-c9b2-4302-8537-130b68bd020d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_content_import_source_request'
            examples:
              successful:
                summary: successful
                value:
                  sync_behavior: api
                  url: https://www.example.com
  '/ai/external_pages':
    get:
      x-fern-sdk-group-name:
        - ai
        - externalPages
      x-fern-sdk-method-name: list
      summary: List external pages
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: listExternalPages
      description: You can retrieve a list of all external pages for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    data:
                      - id: '11'
                        type: external_page
                        title: My External Content
                        html: '<h1>Hello world</h1><p>This is external content</p>'
                        url: https://support.example.com/us/3
                        ai_agent_availability: true
                        ai_copilot_availability: true
                        fin_availability: true
                        locale: en
                        source_id: 26
                        external_id: '3'
                        created_at: 1727856811
                        updated_at: 1727856811
                        last_ingested_at: 1727856811
                      - id: '10'
                        type: external_page
                        title: My External Content
                        html: '<h1>Hello world</h1><p>This is external content</p>'
                        url: https://support.example.com/us/2
                        ai_agent_availability: true
                        ai_copilot_availability: true
                        fin_availability: true
                        locale: en
                        source_id: 25
                        external_id: '2'
                        created_at: 1727856811
                        updated_at: 1727856811
                        last_ingested_at: 1727856811
                      - id: '9'
                        type: external_page
                        title: My External Content
                        html: '<h1>Hello world</h1><p>This is external content</p>'
                        url: https://support.example.com/us/1
                        ai_agent_availability: true
                        ai_copilot_availability: true
                        fin_availability: true
                        locale: en
                        source_id: 24
                        external_id: '1'
                        created_at: 1727856811
                        updated_at: 1727856811
                        last_ingested_at: 1727856811
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 3
                    type: list
              schema:
                '$ref': '#/components/schemas/external_pages_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: db45aca5-7713-46a3-941e-75901ca936bf
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - ai
        - externalPages
      x-fern-sdk-method-name: create
      summary: Create an external page (or update an external page by external ID)
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: createExternalPage
      description: You can create a new external page by sending a POST request to
        this endpoint. If an external page already exists with the specified source_id
        and external_id, it will be updated instead.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '13'
                    type: external_page
                    title: Test
                    html: '<html><body><h1>Test</h1></body></html>'
                    url: https://www.example.com
                    ai_agent_availability: true
                    ai_copilot_availability: true
                    fin_availability: true
                    locale: en
                    source_id: 28
                    external_id: abc1234
                    created_at: 1727856814
                    updated_at: 1727856814
                    last_ingested_at: 1727856814
              schema:
                '$ref': '#/components/schemas/external_page'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 387b0e3f-0105-41f3-afed-bc906ee12a5c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_external_page_request'
            examples:
              successful:
                summary: successful
                value:
                  external_id: abc1234
                  html: '<html><body><h1>Test</h1></body></html>'
                  locale: en
                  source_id: 28
                  title: Test
                  url: https://www.example.com
  '/ai/external_pages/{id}':
    parameters:
      - name: id
        in: path
        description: The unique identifier for the external page which is given by Intercom.
        required: true
        schema:
          type: string
    delete:
      x-fern-sdk-group-name:
        - ai
        - externalPages
      x-fern-sdk-method-name: delete
      summary: Delete an external page
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: deleteExternalPage
      description: Sending a DELETE request for an external page will remove it from
        the content library UI and from being used for AI answers.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '14'
                    type: external_page
                    title: My External Content
                    html: ''
                    url: https://support.example.com/us/5
                    ai_agent_availability: true
                    ai_copilot_availability: true
                    fin_availability: true
                    locale: en
                    source_id: 29
                    external_id: '4'
                    created_at: 1727856815
                    updated_at: 1727856815
                    last_ingested_at: 1727856815
              schema:
                '$ref': '#/components/schemas/external_page'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: be39c0f6-55e8-44ff-8327-b70bc9e55aec
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    get:
      summary: Get an external page
      x-fern-sdk-group-name:
        - ai
        - externalPages
      x-fern-sdk-method-name: get
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: getExternalPage
      description: You can retrieve an external page.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '15'
                    type: external_page
                    title: My External Content
                    html: '<h1>Hello world</h1><p>This is external content</p>'
                    url: https://support.example.com/us/6
                    ai_agent_availability: true
                    ai_copilot_availability: true
                    fin_availability: true
                    locale: en
                    source_id: 30
                    external_id: '5'
                    created_at: 1727856817
                    updated_at: 1727856817
                    last_ingested_at: 1727856817
              schema:
                '$ref': '#/components/schemas/external_page'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e10b7ffb-2964-4b3c-bc0b-b172a1b92ead
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - ai
        - externalPages
      x-fern-sdk-method-name: update
      summary: Update an external page
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - AI Content
      operationId: updateExternalPage
      description: You can update an existing external page (if it was created via
        the API).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '16'
                    type: external_page
                    title: Test
                    html: '<html><body><h1>Test</h1></body></html>'
                    url: https://www.example.com
                    ai_agent_availability: true
                    ai_copilot_availability: true
                    fin_availability: true
                    locale: en
                    source_id: 31
                    external_id: '5678'
                    created_at: 1727856818
                    updated_at: 1727856818
                    last_ingested_at: 1727856818
              schema:
                '$ref': '#/components/schemas/external_page'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c71ccf6b-6333-4d5c-bf47-7604266d0eea
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_external_page_request'
            examples:
              successful:
                summary: successful
                value:
                  external_id: '5678'
                  html: '<html><body><h1>Test</h1></body></html>'
                  locale: en
                  source_id: 31
                  title: Test
                  url: https://www.example.com
  '/articles':
    get:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: list
      summary: List all articles
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Articles
      operationId: listArticles
      description: "You can fetch a list of all articles by making a GET request to
        `https://api.intercom.io/articles`.\n Articles will be returned in descending order on the `updated_at`
        attribute. This means if you need to iterate through results then we'll show
        the most recently updated articles first.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      type: pages
                      page: 1
                      per_page: 25
                      total_pages: 1
                    total_count: 1
                    data:
                      - id: '20'
                        type: article
                        workspace_id: this_is_an_id64_that_should_be_at_least_4
                        parent_id: 72
                        parent_type: collection
                        parent_ids: []
                        title: This is the article title
                        description: ''
                        body: ''
                        author_id: 991266863
                        state: published
                        created_at: 1727856820
                        updated_at: 1727856820
                        url: http://help-center.test/myapp-64/en/articles/20-this-is-the-article-title
              schema:
                '$ref': '#/components/schemas/article_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e550e46b-1974-4312-9983-25378549254c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: create
      summary: Create an article
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Articles
      operationId: createArticle
      description: You can create a new article by making a POST request to `https://api.intercom.io/articles`.
      responses:
        '200':
          description: article created
          content:
            application/json:
              examples:
                article created:
                  value:
                    id: '23'
                    type: article
                    workspace_id: this_is_an_id68_that_should_be_at_least_4
                    parent_id: 74
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Thanks for everything
                    description: Description of the Article
                    body: <p class="no-margin">Body of the Article</p>
                    author_id: 991266868
                    state: published
                    created_at: 1727856823
                    updated_at: 1727856823
                    url: http://help-center.test/myapp-68/en/articles/23-thanks-for-everything
              schema:
                '$ref': '#/components/schemas/article'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 4516b3bb-3057-4dfd-9d50-072ec16c007f
                    errors:
                      - code: parameter_not_found
                        message: author_id must be in the main body or default locale
                          translated_content object
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: abf685e8-18c0-4ae9-aa24-ed5b070d6249
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_article_request'
            examples:
              article_created:
                summary: article created
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  author_id: 991266868
                  state: published
                  parent_id: 74
                  parent_type: collection
                  translated_content:
                    fr:
                      title: Merci pour tout
                      description: Description de l'article
                      body: Corps de l'article
                      author_id: 991266868
                      state: published
              bad_request:
                summary: Bad Request
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  state: published
  '/articles/{id}':
    get:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: get
      summary: Get an article
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the article which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Articles
      operationId: retrieveArticle
      description: You can fetch the details of a single article by making a GET request
        to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: Article found
          content:
            application/json:
              examples:
                Article found:
                  value:
                    id: '26'
                    type: article
                    workspace_id: this_is_an_id74_that_should_be_at_least_4
                    parent_id: 77
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: This is the article title
                    description: ''
                    body: ''
                    author_id: 991266873
                    state: published
                    created_at: 1727856826
                    updated_at: 1727856826
                    url: http://help-center.test/myapp-74/en/articles/26-this-is-the-article-title
              schema:
                '$ref': '#/components/schemas/article'
        '404':
          description: Article not found
          content:
            application/json:
              examples:
                Article not found:
                  value:
                    type: error.list
                    request_id: 94144152-d550-4319-8e87-6ec6d48a9395
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5c8cb9f3-8e0b-4070-a980-01ef9e3e3ee9
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: update
      summary: Update an article
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the article which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Articles
      operationId: updateArticle
      description: You can update the details of a single article by making a PUT
        request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '29'
                    type: article
                    workspace_id: this_is_an_id80_that_should_be_at_least_4
                    parent_id: 80
                    parent_type: collection
                    parent_ids: []
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Christmas is here!
                    description: ''
                    body: <p class="no-margin">New gifts in store for the jolly season</p>
                    author_id: 991266879
                    state: published
                    created_at: 1727856829
                    updated_at: 1727856830
                    url: http://help-center.test/myapp-80/en/articles/29-christmas-is-here
              schema:
                '$ref': '#/components/schemas/article'
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: 869da353-32dd-415d-94d2-092a0b57273e
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ca9b4122-c978-4d54-a06d-9514267890fc
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_article_request'
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: '<p>New gifts in store for the jolly season</p>'
              article_not_found:
                summary: Article Not Found
                value:
                  title: Christmas is here!
                  body: '<p>New gifts in store for the jolly season</p>'
    delete:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: delete
      summary: Delete an article
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the article which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Articles
      operationId: deleteArticle
      description: You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '32'
                    object: article
                    deleted: true
              schema:
                '$ref': '#/components/schemas/deleted_article_object'
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: a9b48eb2-39d4-4bc3-8603-e6e353cdc0c9
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: '096d5175-52c8-4ebe-a766-f0033e39cc5e'
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/articles/search':
    get:
      x-fern-sdk-group-name:
        - articles
      x-fern-sdk-method-name: search
      summary: Search for articles
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: phrase
          in: query
          required: false
          description: The phrase within your articles to search for.
          example: Getting started
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: The state of the Articles returned. One of `published`, `draft`
            or `all`.
          example: published
          schema:
            type: string
        - name: help_center_id
          in: query
          required: false
          description: The ID of the Help Center to search in.
          example: 123
          schema:
            type: integer
        - name: highlight
          in: query
          required: false
          description: Return a highlighted version of the matching content within your
            articles. Refer to the response schema for more details.
          example: false
          schema:
            type: boolean
      tags:
        - Articles
      operationId: searchArticles
      description: You can search for articles by making a GET request to `https://api.intercom.io/articles/search`.
      responses:
        '200':
          description: Search successful
          content:
            application/json:
              examples:
                Search successful:
                  value:
                    type: list
                    total_count: 1
                    data:
                      articles:
                        - id: '36'
                          type: article
                          workspace_id: this_is_an_id92_that_should_be_at_least_4
                          parent_id:
                          parent_type:
                          parent_ids: []
                          title: Title 1
                          description: ''
                          body: ''
                          author_id: 991266892
                          state: draft
                          created_at: 1727856837
                          updated_at: 1727856837
                          url:
                      highlights: []
                    pages:
                      type: pages
                      page: 1
                      total_pages: 1
                      per_page: 10
              schema:
                '$ref': '#/components/schemas/article_search_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 84a092d5-9c1c-4017-abdc-afb03b128af5
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/help_center/collections':
    get:
      x-fern-sdk-group-name:
        - helpCenter
        - collections
      x-fern-sdk-method-name: list
      summary: List all collections
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Help Center
      operationId: listAllCollections
      description: |
        You can fetch a list of all collections by making a GET request to `https://api.intercom.io/help_center/collections`.

        Collections will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated collections first.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - id: '88'
                        workspace_id: this_is_an_id96_that_should_be_at_least_4
                        name: English collection title
                        url: http://help-center.test/myapp-96/collection-17
                        order: 17
                        created_at: 1727856839
                        updated_at: 1727856839
                        description: english collection description
                        icon: bookmark
                        parent_id:
                        help_center_id: 48
                      - id: '89'
                        workspace_id: this_is_an_id96_that_should_be_at_least_4
                        name: English section title
                        url: http://help-center.test/myapp-96/section-1
                        order: 1
                        created_at: 1727856839
                        updated_at: 1727856839
                        description:
                        icon: bookmark
                        parent_id: '88'
                        help_center_id:
                    total_count: 2
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
              schema:
                '$ref': '#/components/schemas/collection_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 30051b93-dbf3-4b17-bc3d-df93fe4b1146
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      summary: Create a collection
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Help Center
      operationId: createCollection
      description: You can create a new collection by making a POST request to `https://api.intercom.io/help_center/collections.`
      responses:
        '200':
          description: collection created
          content:
            application/json:
              examples:
                collection created:
                  value:
                    id: '94'
                    workspace_id: aaa000
                    name: Thanks for everything
                    url: http://help-center.test/myapp-100/
                    order: 1
                    created_at: 1727856841
                    updated_at: 1727856841
                    description: ''
                    icon: book-bookmark
                    parent_id:
                    help_center_id: 50
              schema:
                '$ref': '#/components/schemas/collection'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 2976e109-3e90-433a-9a58-c795739fd750
                    errors:
                      - code: parameter_not_found
                        message: Name is a required parameter.
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6d2f1b0f-7d09-4cff-afd6-06ecdfa23419
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_collection_request'
            examples:
              collection_created:
                summary: collection created
                value:
                  name: Thanks for everything
              bad_request:
                summary: Bad Request
                value:
                  description: Missing required parameter
  '/help_center/collections/{id}':
    get:
      x-fern-sdk-group-name:
        - helpCenter
        - collections
      x-fern-sdk-method-name: get
      summary: Get a collection
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the collection which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Help Center
      operationId: retrieveCollection
      description: You can fetch the details of a single collection by making a GET
        request to `https://api.intercom.io/help_center/collections/<id>`.
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              examples:
                Collection found:
                  value:
                    id: '99'
                    workspace_id: aaa000
                    name: English collection title
                    url: http://help-center.test/myapp-106/collection-22
                    order: 22
                    created_at: 1727856842
                    updated_at: 1727856842
                    description: english collection description
                    icon: bookmark
                    parent_id:
                    help_center_id: 53
              schema:
                '$ref': '#/components/schemas/collection'
        '404':
          description: Collection not found
          content:
            application/json:
              examples:
                Collection not found:
                  value:
                    type: error.list
                    request_id: 9d6ea1af-30cc-4c70-b692-e74b798a50c6
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4859234a-b4e2-438c-ad8c-b30ed41ab313
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - helpCenter
        - collections
      x-fern-sdk-method-name: update
      summary: Update a collection
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the collection which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Help Center
      operationId: updateCollection
      description: You can update the details of a single collection by making a PUT
        request to `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '105'
                    workspace_id: this_is_an_id112_that_should_be_at_least_
                    name: Update collection name
                    url: http://help-center.test/myapp-112/collection-25
                    order: 25
                    created_at: 1727856845
                    updated_at: 1727856845
                    description: english collection description
                    icon: folder
                    parent_id:
                    help_center_id: 56
              schema:
                '$ref': '#/components/schemas/collection'
        '404':
          description: Collection Not Found
          content:
            application/json:
              examples:
                Collection Not Found:
                  value:
                    type: error.list
                    request_id: 836ac598-181e-457f-bea8-b5dbdf8f73ae
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dbfcbdd3-1761-482d-82c5-0eb285cb9a79
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_collection_request'
            examples:
              successful:
                summary: successful
                value:
                  name: Update collection name
              collection_not_found:
                summary: Collection Not Found
                value:
                  name: Update collection name
    delete:
      x-fern-sdk-group-name:
        - helpCenter
        - collections
      x-fern-sdk-method-name: delete
      summary: Delete a collection
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the collection which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Help Center
      operationId: deleteCollection
      description: You can delete a single collection by making a DELETE request to
        `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '111'
                    object: collection
                    deleted: true
              schema:
                '$ref': '#/components/schemas/deleted_collection_object'
        '404':
          description: collection Not Found
          content:
            application/json:
              examples:
                collection Not Found:
                  value:
                    type: error.list
                    request_id: cb237461-fdba-4b97-adf7-9692c92acfe7
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5b39cbad-b15f-409e-9428-b57eb94c8b3d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/help_center/help_centers/{id}':
    get:
      x-fern-sdk-group-name:
        - helpCenter
        - helpCenters
      x-fern-sdk-method-name: get
      summary: Retrieve a Help Center
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the collection which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - Help Center
      operationId: retrieveHelpCenter
      description: You can fetch the details of a single Help Center by making a GET
        request to `https://api.intercom.io/help_center/help_center/<id>`.
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              examples:
                Collection found:
                  value:
                    id: '62'
                    workspace_id: this_is_an_id124_that_should_be_at_least_
                    created_at: 1727856849
                    updated_at: 1727856849
                    identifier: help-center-1
                    website_turned_on: false
                    display_name: Intercom Help Center
              schema:
                '$ref': '#/components/schemas/help_center'
        '404':
          description: Collection not found
          content:
            application/json:
              examples:
                Collection not found:
                  value:
                    type: error.list
                    request_id: df02015a-7c46-4eee-8f35-0ae268eb75c3
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2f844ec3-e4cd-43e9-bf0b-d1064c0ed7cd
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/help_center/help_centers':
    get:
      x-fern-sdk-group-name:
        - helpCenter
        - helpCenters
      x-fern-sdk-method-name: list
      summary: List Help Centers
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Help Center
      operationId: listHelpCenters
      description: You can list all Help Centers by making a GET request to `https://api.intercom.io/help_center/help_centers`.
      responses:
        '200':
          description: Help Centers found
          content:
            application/json:
              examples:
                Help Centers found:
                  value:
                    type: list
                    data: []
              schema:
                '$ref': '#/components/schemas/help_center_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5c488c7a-b061-4880-8da5-ad93865dc8f0
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies':
    post:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: create
      summary: Create a company
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Companies
      operationId: createOrUpdateCompany
      description: |
        You can create or update a company.

        Companies will be only visible in Intercom when there is at least one associated user.

        Companies are looked up via `company_id` in a `POST` request, if not found via `company_id`, the new company will be created, if found, that company will be updated.

        {% admonition type="info" name="Using `company_id`" %}
          You can set a unique `company_id` value when creating a company. However, it is not possible to update `company_id`. Be sure to set a unique value once upon creation of the company.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: company_remote_id
                    id: 66fd00da9ffbe52cc8b3a9c4
                    app_id: this_is_an_id147_that_should_be_at_least_
                    name: my company
                    remote_created_at: 1374138000
                    created_at: 1727856858
                    updated_at: 1727856858
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes:
                      creation_source: api
              schema:
                '$ref': '#/components/schemas/company'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id:
                    errors:
                      - code: bad_request
                        message: bad 'test' parameter
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 53f950ad-1395-4b39-a6aa-d4323b8dfd10
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_or_update_company_request'
            examples:
              successful:
                summary: Successful
                value:
                  company_id: company_remote_id
                  name: my company
                  remote_created_at: 1374138000
              bad_request:
                summary: Bad Request
                value:
                  test: invalid
    get:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: list
      summary: Retrieve companies
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: name
          in: query
          required: false
          description: The `name` of the company to filter by.
          example: my company
          schema:
            type: string
        - name: company_id
          in: query
          required: false
          description: The `company_id` of the company to filter by.
          example: '12345'
          schema:
            type: string
        - name: tag_id
          in: query
          required: false
          description: The `tag_id` of the company to filter by.
          example: '678910'
          schema:
            type: string
        - name: segment_id
          in: query
          required: false
          description: The `segment_id` of the company to filter by.
          example: '98765'
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page of results to fetch. Defaults to first page
          example: 1
          schema:
            type: integer
        - name: per_page
          in: query
          required: false
          description: How many results to display per page. Defaults to 15
          example: 15
          schema:
            type: integer
      tags:
        - Companies
      operationId: retrieveCompany
      description: |
        You can fetch a single company by passing in `company_id` or `name`.

          `https://api.intercom.io/companies?name={name}`

          `https://api.intercom.io/companies?company_id={company_id}`

        You can fetch all companies and filter by `segment_id` or `tag_id` as a query parameter.

          `https://api.intercom.io/companies?tag_id={tag_id}`

          `https://api.intercom.io/companies?segment_id={segment_id}`
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - type: company
                        company_id: remote_companies_scroll_2
                        id: 66fd00dd9ffbe52cc8b3a9cc
                        app_id: this_is_an_id153_that_should_be_at_least_
                        name: IntercomQATest1
                        remote_created_at: 1727856861
                        created_at: 1727856861
                        updated_at: 1727856861
                        monthly_spend: 0
                        session_count: 0
                        user_count: 4
                        tags:
                          type: tag.list
                          tags: []
                        segments:
                          type: segment.list
                          segments: []
                        plan: {}
                        custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 15
                      total_pages: 1
                    total_count: 1
              schema:
                '$ref': '#/components/schemas/company_list'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: df490fa4-28c8-4c09-8e13-87be99912f4d
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 141f46bf-fa8c-4b64-90ff-db6e23599d75
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies/{id}':
    get:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: get
      summary: Get a company by ID
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 6634ab5eafff231757496dd7
          schema:
            type: string
      tags:
        - Companies
      operationId: RetrieveACompanyById
      description: You can fetch a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 66fd00e09ffbe52cc8b3a9d7
                    app_id: this_is_an_id159_that_should_be_at_least_
                    name: company1
                    remote_created_at: 1727856864
                    created_at: 1727856864
                    updated_at: 1727856864
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                '$ref': '#/components/schemas/company'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 56c7582d-9ae7-4f22-af29-3570044a0ea5
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7ce5547a-717d-4441-b968-cbda363ec7fb
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: update
      summary: Update a company
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 6634ab5eafff231757496dd7
          schema:
            type: string
      tags:
        - Companies
      operationId: UpdateCompany
      description: |
        You can update a single company using the Intercom provisioned `id`.

        {% admonition type="info" name="Using `company_id`" %}
          When updating a company it is not possible to update `company_id`. This can only be set once upon creation of the company.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 66fd00e39ffbe52cc8b3a9e1
                    app_id: this_is_an_id165_that_should_be_at_least_
                    name: company2
                    remote_created_at: 1727856867
                    created_at: 1727856867
                    updated_at: 1727856867
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                '$ref': '#/components/schemas/company'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 5e589fe7-2913-47d2-b711-61129cf91c51
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 23d7c88a-c971-401b-9085-a0191cf7ac6a
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    delete:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: delete
      summary: Delete a company
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 6634ab5eafff231757496dd7
          schema:
            type: string
      tags:
        - Companies
      operationId: deleteCompany
      description: You can delete a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 66fd00e79ffbe52cc8b3a9eb
                    object: company
                    deleted: true
              schema:
                '$ref': '#/components/schemas/deleted_company_object'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 9d76873f-1164-4838-bc98-710a51a8f765
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 69c21889-2980-4a4a-a028-ca47480205f0
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies/{id}/contacts':
    get:
      x-fern-sdk-group-name:
        - companies
        - contacts
      x-fern-sdk-method-name: list
      summary: List attached contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 6634ab5eafff231757496dd7
          schema:
            type: string
      tags:
        - Companies
        - Contacts
      operationId: ListAttachedContacts
      description: You can fetch a list of all contacts that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 0
              schema:
                '$ref': '#/components/schemas/company_attached_contacts'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: d1064107-cae5-4747-befc-b320a73f9a93
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f8b7b87c-0fcd-4e76-bbfa-2df4cee2dfd2
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies/{id}/segments':
    get:
      x-fern-sdk-group-name:
        - companies
        - segments
      x-fern-sdk-method-name: list
      summary: List attached segments for companies
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 6634ab5eafff231757496dd7
          schema:
            type: string
      tags:
        - Companies
      operationId: ListAttachedSegmentsForCompanies
      description: You can fetch a list of all segments that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
              schema:
                '$ref': '#/components/schemas/company_attached_segments'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: a37aefd0-2de3-4eb2-b2cf-9d28fcc59c89
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fc4f6acb-0315-42e6-9adc-d5d5939fea8c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies/list':
    post:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: list
      summary: List all companies
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: page
          in: query
          required: false
          description: The page of results to fetch. Defaults to first page
          example: 1
          schema:
            type: integer
        - name: per_page
          in: query
          required: false
          description: How many results to return per page. Defaults to 15
          example: 15
          schema:
            type: integer
        - name: order
          in: query
          required: false
          description: '`asc` or `desc`. Return the companies in ascending or descending
            order. Defaults to desc'
          example: desc
          schema:
            type: string
      tags:
        - Companies
      operationId: listAllCompanies
      description: |
        The company list is sorted by the `last_request_at` field and by default is ordered descending, most recently requested first.

        The API does not include companies who have no associated users in list responses.

        When using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the [Scroll API](https://developers.intercom.com/reference#iterating-over-all-companies).
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - type: company
                        company_id: remote_companies_scroll_2
                        id: 66fd00f19ffbe52cc8b3aa07
                        app_id: this_is_an_id189_that_should_be_at_least_
                        name: IntercomQATest1
                        remote_created_at: 1727856881
                        created_at: 1727856881
                        updated_at: 1727856881
                        monthly_spend: 0
                        session_count: 0
                        user_count: 4
                        tags:
                          type: tag.list
                          tags: []
                        segments:
                          type: segment.list
                          segments: []
                        plan: {}
                        custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 15
                      total_pages: 1
                    total_count: 1
              schema:
                '$ref': '#/components/schemas/company_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 12c3a436-fdaf-445e-9dd1-1346ecb33c45
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/companies/scroll':
    get:
      x-fern-sdk-group-name:
        - companies
      x-fern-sdk-method-name: scroll
      summary: Scroll over all companies
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: scroll_param
          in: query
          required: false
          description: ''
          schema:
            type: string
      tags:
        - Companies
      operationId: scrollOverAllCompanies
      description: |2
              The `list all companies` functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.

        - Each app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.
        - If the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail
        - If the end of the scroll is reached, "companies" will be empty and the scroll parameter will expire

        {% admonition type="info" name="Scroll Parameter" %}
          You can get the first page of companies by simply sending a GET request to the scroll endpoint.
          For subsequent requests you will need to use the scroll parameter from the response.
        {% /admonition %}
        {% admonition type="danger" name="Scroll network timeouts" %}
          Since scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will see a HTTP 500 error with the following message:
          "Request failed due to an internal network error. Please restart the scroll operation."
          If this happens, you will need to restart your scroll query: It is not possible to continue from a specific point when using scroll.
        {% /admonition %}
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - type: company
                        company_id: 0fec4640-dd4d-4229-b591-002dc70c7282
                        id: 66fd00f39ffbe52cc8b3aa0d
                        app_id: aaa000
                        name: Example Company
                        remote_created_at: 1727856883
                        created_at: 1727856883
                        updated_at: 1727856883
                        monthly_spend: 0
                        session_count: 0
                        user_count: 4
                        tags:
                          type: tag.list
                          tags: []
                        segments:
                          type: segment.list
                          segments: []
                        plan: {}
                        custom_attributes: {}
                    pages: null
                    total_count: null
                    scroll_param: 6f0c010d-8de4-411d-8cf2-6fb728d4941a
              schema:
                '$ref': '#/components/schemas/company_scroll'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a0506b9b-d0d5-46b7-bb6c-392f2e82c226
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{id}/companies':
    post:
      x-fern-sdk-group-name:
        - companies
        - contacts
      x-fern-sdk-method-name: attach
      summary: Attach a Contact to a Company
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the contact which is given by Intercom
          schema:
            type: string
      tags:
        - Companies
        - Contacts
      operationId: attachContactToACompany
      description: You can attach a company to a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: 0fec4640-dd4d-4229-b591-002dc70c7282
                    id: 66fd00f69ffbe52cc8b3aa16
                    app_id: aaa000
                    name: Example Company
                    remote_created_at: 1727856886
                    created_at: 1727856886
                    updated_at: 1727856886
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                '$ref': '#/components/schemas/company'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 6c18323d-7c0c-430a-8315-62c7688d9221
                    errors:
                      - code: parameter_not_found
                        message: company not specified
              schema:
                '$ref': '#/components/schemas/error'
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 0dbe8e3d-efe4-49b7-a4e6-84b477ccff9e
                    errors:
                      - code: company_not_found
                        message: Company Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 46cd55fe-5c27-4ec8-98e0-bfd9c1d2a490
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the company which is given
                    by Intercom
                  example: 58a430d35458202d41b1e65b
            examples:
              successful:
                summary: Successful
                value:
                  id: 66fd00f69ffbe52cc8b3aa16
              bad_request:
                summary: Bad Request
                value:
              company_not_found:
                summary: Company Not Found
                value:
                  id: '123'
    get:
      x-fern-sdk-group-name:
        - companies
        - contacts
      x-fern-sdk-method-name: list
      summary: List companies associated with acontact
      parameters:
        - name: id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
        - Companies
      operationId: listCompaniesForAContact
      description: You can fetch a list of companies that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: company
                        company_id: '1'
                        id: 66fd01009ffbe52cc8b3aa37
                        app_id: this_is_an_id213_that_should_be_at_least_
                        name: company12
                        remote_created_at: 1727856896
                        created_at: 1727856896
                        updated_at: 1727856896
                        last_request_at: 1727684096
                        monthly_spend: 0
                        session_count: 0
                        user_count: 1
                        tags:
                          type: tag.list
                          tags: []
                        segments:
                          type: segment.list
                          segments: []
                        plan: {}
                        custom_attributes: {}
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 1
              schema:
                '$ref': '#/components/schemas/contact_attached_companies'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: df816646-79c4-4d81-92fd-3f2710c3e72d
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9b1176e4-c54b-4931-b8c5-401de4ca35e3
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{contact_id}/companies/{id}':
    delete:
      x-fern-sdk-group-name:
        - companies
        - contacts
      x-fern-sdk-method-name: detach
      summary: Detach a contact from a company
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          required: true
          description: The unique identifier for the contact which is given by Intercom
          example: 58a430d35458202d41b1e65b
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The unique identifier for the company which is given by Intercom
          example: 58a430d35458202d41b1e65b
          schema:
            type: string
      tags:
        - Companies
        - Contacts
      operationId: detachContactFromACompany
      description: You can detach a company from a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 66fd00fb9ffbe52cc8b3aa26
                    app_id: this_is_an_id205_that_should_be_at_least_
                    name: company8
                    remote_created_at: 1727856891
                    created_at: 1727856891
                    updated_at: 1727856892
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                '$ref': '#/components/schemas/company'
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 14121a1a-a146-4035-8073-5e63897bffec
                    errors:
                      - code: company_not_found
                        message: Company Not Found
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: 714bd18d-28aa-46e0-bea2-1fd0881185a4
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 891db4db-706e-4d1a-a0c2-6d0bd8a2c0bc
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{id}/notes':
    get:
      x-fern-sdk-group-name:
        - notes
        - contacts
      x-fern-sdk-method-name: list
      summary: List all notes
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of a contact.
          schema:
            type: integer
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Notes
        - Contacts
      operationId: listNotes
      description: You can fetch a list of notes that are associated to a contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                      - type: note
                        id: '16'
                        created_at: 1727252100
                        contact:
                          type: contact
                          id: 66fd01049ffbe52cc8b3aa42
                        author:
                          type: admin
                          id: '991266952'
                          name: Jane Example
                          email: email@example.com
                          away_mode_enabled: false
                          away_mode_reassign: false
                        body: '<p>This is a note.</p>'
                      - type: note
                        id: '15'
                        created_at: 1727165700
                        contact:
                          type: contact
                          id: 66fd01049ffbe52cc8b3aa42
                        author:
                          type: admin
                          id: '991266952'
                          name: Joe Example
                          email: email@example.com
                          away_mode_enabled: false
                          away_mode_reassign: false
                        body: '<p>This is a note.</p>'
                      - type: note
                        id: '14'
                        created_at: 1727165700
                        contact:
                          type: contact
                          id: 66fd01049ffbe52cc8b3aa42
                        author:
                          type: admin
                          id: '991266952'
                          name: Jane Example
                          email: email@example.com
                          away_mode_enabled: false
                          away_mode_reassign: false
                        body: '<p>This is a note.</p>'
                    total_count: 3
                    pages:
                      type: pages
                      next:
                      page: 1
                      per_page: 50
                      total_pages: 1
              schema:
                '$ref': '#/components/schemas/note_list'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 69dae9ea-0711-4dd9-af8b-aedc7c1e34c3
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - notes
        - contacts
      x-fern-sdk-method-name: create
      summary: Create a note
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier of a given contact.
          example: '123'
          schema:
            type: integer
      tags:
        - Notes
        - Contacts
      operationId: createNote
      description: You can add a note to a single contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: note
                    id: '21'
                    created_at: 1727856903
                    contact:
                      type: contact
                      id: 66fd01069ffbe52cc8b3aa44
                    author:
                      type: admin
                      id: '991266954'
                      name: Jane Example
                      email: email@example.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: '<p>Hello</p>'
              schema:
                '$ref': '#/components/schemas/note'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: d6a77f1d-7eb7-4af9-9807-13c9b2058ceb
                    errors:
                      - code: not_found
                        message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: bdac6716-6720-4990-bc1f-a283574ceaee
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
                  description: The text of the note.
                  example: New note
                contact_id:
                  type: string
                  description: The unique identifier of a given contact.
                  example: '123'
                admin_id:
                  type: string
                  description: The unique identifier of a given admin.
                  example: '123'
            examples:
              successful_response:
                summary: Successful response
                value:
                  contact_id: 66fd01069ffbe52cc8b3aa44
                  admin_id: 991266954
                  body: Hello
              admin_not_found:
                summary: Admin not found
                value:
                  contact_id: 66fd01079ffbe52cc8b3aa45
                  admin_id: 123
                  body: Hello
              contact_not_found:
                summary: Contact not found
                value:
                  contact_id: 123
                  admin_id: 991266956
                  body: Hello
  '/contacts/{contact_id}/segments':
    get:
      x-fern-sdk-group-name:
        - segments
        - contacts
      x-fern-sdk-method-name: list
      summary: List segments for a contact
      parameters:
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
        - Segments
      operationId: listSegmentsForAContact
      description: You can fetch a list of segments that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: segment
                        id: 66fd010a9ffbe52cc8b3aa47
                        name: segment
                        created_at: 1727856906
                        updated_at: 1727856906
                        person_type: user
              schema:
                '$ref': '#/components/schemas/contact_segments'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: f5eaedc9-9c7e-467c-83cf-2bb27a1ab70e
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0d5bd439-7eb7-4c83-861b-804a3c666c5d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{contact_id}/subscriptions':
    get:
      x-fern-sdk-group-name:
        - subscriptionTypes
        - contacts
      x-fern-sdk-method-name: list
      summary: List subscriptions for a contact
      parameters:
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
        - Subscription Types
      operationId: listSubscriptionsForAContact
      description: |
        You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type.
        This will return a list of Subscription Type objects that the contact is associated with.

        The data property will show a combined list of:

          1.Opt-out subscription types that the user has opted-out from.
          2.Opt-in subscription types that the user has opted-in to receiving.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - type: subscription
                        id: '47'
                        state: live
                        consent_type: opt_out
                        default_translation:
                          name: Newsletters
                          description: Lorem ipsum dolor sit amet
                          locale: en
                        translations:
                          - name: Newsletters
                            description: Lorem ipsum dolor sit amet
                            locale: en
                        content_types:
                          - email
                      - type: subscription
                        id: '49'
                        state: live
                        consent_type: opt_in
                        default_translation:
                          name: Newsletters
                          description: Lorem ipsum dolor sit amet
                          locale: en
                        translations:
                          - name: Newsletters
                            description: Lorem ipsum dolor sit amet
                            locale: en
                        content_types:
                          - sms_message
              schema:
                '$ref': '#/components/schemas/subscription_type_list'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: a3b635b2-18b4-4050-bb95-eb7d350d645e
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 16e6d3d1-3105-42c3-8612-077ce9b5c871
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - subscriptions
        - contacts
      x-fern-sdk-method-name: attach
      summary: Add a subscription to a contact
      tags:
        - Subscription Types
        - Contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      operationId: attachSubscriptionTypeToContact
      description: |
        You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:

          1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.

          2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.

        This will return a subscription type model for the subscription type that was added to the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '62'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                    content_types:
                      - sms_message
              schema:
                '$ref': '#/components/schemas/subscription_type'
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: fd87c3e0-af0e-4144-8cd9-13734a4dc1e0
                    errors:
                      - code: not_found
                        message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: 6a8feb4c-981d-453e-ade0-5725de361dad
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 03cf16eb-c261-4c29-9d7b-471822531291
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - consent_type
              properties:
                id:
                  type: string
                  description: The unique identifier for the subscription which is
                    given by Intercom
                  example: '37846'
                consent_type:
                  type: string
                  description: The consent_type of a subscription, opt_out or opt_in.
                  example: opt_in
            examples:
              successful:
                summary: Successful
                value:
                  id: 62
                  consent_type: opt_in
              contact_not_found:
                summary: Contact not found
                value:
                  id: 66
                  consent_type: opt_in
              resource_not_found:
                summary: Resource not found
                value:
                  id: invalid_id
                  consent_type: opt_in
  '/contacts/{contact_id}/subscriptions/{id}':
    delete:
      x-fern-sdk-group-name:
        - subscriptions
        - contacts
      x-fern-sdk-method-name: detach
      summary: Remove a subscription from a contact
      tags:
        - Subscription Types
        - Contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The unique identifier for the subscription type which is given
            by Intercom
          example: '37846'
          required: true
          schema:
            type: string
      operationId: detachSubscriptionTypeToContact
      description: You can remove a specific subscription from a contact. This will
        return a subscription type model for the subscription type that was removed
        from the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '78'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                    content_types:
                      - sms_message
              schema:
                '$ref': '#/components/schemas/subscription_type'
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 12fb835c-7ed9-496c-b2aa-ccb8de94e670
                    errors:
                      - code: not_found
                        message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: d9f37d47-4ae5-4219-a915-4e4eab5d73ec
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ea6d6c78-cfb3-47c4-b49b-182214870200
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{contact_id}/tags':
    get:
      x-fern-sdk-group-name:
        - tags
        - contacts
      x-fern-sdk-method-name: list
      summary: List tags attached to a contact
      tags:
        - Contacts
        - Tags
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      operationId: listTagsForAContact
      description: You can fetch a list of all tags that are attached to a specific
        contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: tag
                        id: '47'
                        name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag_list'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 677e9745-29e7-4651-86bf-c33caa803fdb
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c97b42ad-c524-438e-ba9f-b34a50b5a458
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - tags
        - contacts
      x-fern-sdk-method-name: add
      summary: Add tag to a contact
      tags:
        - Tags
        - Contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      operationId: attachTagToContact
      description: You can tag a specific contact. This will return a tag object for
        the tag that was added to the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '48'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 836128ff-c99d-4fe8-86e0-c49fe95f0b4b
                    errors:
                      - code: not_found
                        message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: b3036f7a-1747-46ae-a936-6eecdaf00035
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 362b4ff1-e885-46a2-9eed-28467e242aad
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
            examples:
              successful:
                summary: successful
                value:
                  id: 48
              contact_not_found:
                summary: Contact not found
                value:
                  id: 49
              tag_not_found:
                summary: Tag not found
                value:
                  id: '123'
  '/contacts/{contact_id}/tags/{id}':
    delete:
      x-fern-sdk-group-name:
        - tags
        - contacts
      x-fern-sdk-method-name: remove
      summary: Remove tag from a contact
      tags:
        - Tags
        - Contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: contact_id
          in: path
          description: The unique identifier for the contact which is given by Intercom
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The unique identifier for the tag which is given by Intercom
          example: '7522907'
          required: true
          schema:
            type: string
      operationId: detachTagFromContact
      description: You can remove tag from a specific contact. This will return a
        tag object for the tag that was removed from the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '51'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 5192f776-12c4-4e22-b056-328dd42381ad
                    errors:
                      - code: not_found
                        message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: 689e4255-3285-4b93-96c1-1a1042cb7c4a
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: '097cc71a-add9-489a-a1e5-6eed83b99d51'
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{id}':
    put:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: update
      summary: Update a contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      tags:
        - Contacts
      operationId: UpdateContact
      description: You can update an existing contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd01239ffbe52cc8b3aa5e
                    workspace_id: this_is_an_id279_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joebloggs@intercom.io
                    phone:
                    formatted_phone:
                    name: joe bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727856931
                    updated_at: 1727856931
                    signed_up_at: 1727856931
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd01239ffbe52cc8b3aa5e/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd01239ffbe52cc8b3aa5e/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd01239ffbe52cc8b3aa5e/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01239ffbe52cc8b3aa5e/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01239ffbe52cc8b3aa5e/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b2f4b92f-9a9b-4888-b9ca-95aae731dc48
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/update_contact_request'
            examples:
              successful:
                summary: successful
                value:
                  email: joebloggs@intercom.io
                  name: joe bloggs
    get:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: get
      summary: Get a contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      tags:
        - Contacts
      operationId: ShowContact
      description: You can fetch the details of a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd01259ffbe52cc8b3aa5f
                    workspace_id: this_is_an_id283_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727856933
                    updated_at: 1727856933
                    signed_up_at: 1727856933
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd01259ffbe52cc8b3aa5f/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd01259ffbe52cc8b3aa5f/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd01259ffbe52cc8b3aa5f/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01259ffbe52cc8b3aa5f/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01259ffbe52cc8b3aa5f/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0e8e7323-189a-4257-9e71-2cbdb93b56c2
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    delete:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: delete
      summary: Delete a contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: string
      tags:
        - Contacts
      operationId: DeleteContact
      description: You can delete a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 66fd01279ffbe52cc8b3aa60
                    external_id: '70'
                    type: contact
                    deleted: true
              schema:
                '$ref': '#/components/schemas/contact_deleted'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fe391f69-e134-49dd-ba65-5bb49fe412e0
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/merge':
    post:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: merge
      summary: Merge a lead and a user
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
      operationId: MergeContact
      description: You can merge a contact with a `role` of `lead` into a contact
        with a `role` of `user`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd01299ffbe52cc8b3aa62
                    workspace_id: this_is_an_id291_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727856937
                    updated_at: 1727856938
                    signed_up_at: 1727856937
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd01299ffbe52cc8b3aa62/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd01299ffbe52cc8b3aa62/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd01299ffbe52cc8b3aa62/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01299ffbe52cc8b3aa62/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01299ffbe52cc8b3aa62/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7bb0d16d-62f8-4e6f-aed8-fd7ee19bb4eb
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/merge_contacts_request'
            examples:
              successful:
                summary: successful
                value:
                  from: 66fd01299ffbe52cc8b3aa61
                  into: 66fd01299ffbe52cc8b3aa62
  '/contacts/search':
    post:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: search
      summary: Search contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
      operationId: SearchContacts
      description: |
        Find multiple contacts by filtering on specified attributes.

        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `50` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}
        ### Contact Creation Delay

        If a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified it is recommended to use webhooks and iterate to see if they match your search filters.

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiple's there can be:
        * There's a limit of max 2 nested filters
        * There's a limit of max 15 filters for each AND or OR group

        ### Searching for Timestamp Fields

        All timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.
        For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.
        If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).
        This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.

        ### Accepted Fields

        Most key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).

        | Field                              | Type                           |
        | ---------------------------------- | ------------------------------ |
        | id                                 | String                         |
        | role                               | String<br>Accepts user or lead |
        | name                               | String                         |
        | avatar                             | String                         |
        | owner_id                           | Integer                        |
        | email                              | String                         |
        | email_domain                       | String                         |
        | phone                              | String                         |
        | formatted_phone                    | String                         |
        | external_id                        | String                         |
        | created_at                         | Date (UNIX Timestamp)          |
        | signed_up_at                       | Date (UNIX Timestamp)          |
        | updated_at                         | Date (UNIX Timestamp)          |
        | last_seen_at                       | Date (UNIX Timestamp)          |
        | last_contacted_at                  | Date (UNIX Timestamp)          |
        | last_replied_at                    | Date (UNIX Timestamp)          |
        | last_email_opened_at               | Date (UNIX Timestamp)          |
        | last_email_clicked_at              | Date (UNIX Timestamp)          |
        | language_override                  | String                         |
        | browser                            | String                         |
        | browser_language                   | String                         |
        | os                                 | String                         |
        | location.country                   | String                         |
        | location.region                    | String                         |
        | location.city                      | String                         |
        | unsubscribed_from_emails           | Boolean                        |
        | marked_email_as_spam               | Boolean                        |
        | has_hard_bounced                   | Boolean                        |
        | ios_last_seen_at                   | Date (UNIX Timestamp)          |
        | ios_app_version                    | String                         |
        | ios_device                         | String                         |
        | ios_app_device                     | String                         |
        | ios_os_version                     | String                         |
        | ios_app_name                       | String                         |
        | ios_sdk_version                    | String                         |
        | android_last_seen_at               | Date (UNIX Timestamp)          |
        | android_app_version                | String                         |
        | android_device                     | String                         |
        | android_app_name                   | String                         |
        | andoid_sdk_version                 | String                         |
        | segment_id                         | String                         |
        | tag_id                             | String                         |
        | custom_attributes.{attribute_name} | String                         |

        ### Accepted Operators

        {% admonition type="info" name="Searching based on `created_at`" %}
          You cannot use the `<=` or `>=` operators to search by `created_at`.
        {% /admonition %}

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                      | Description                                                      |
        | :------- | :------------------------------- | :--------------------------------------------------------------- |
        | =        | All                              | Equals                                                           |
        | !=       | All                              | Doesn't Equal                                                    |
        | IN       | All                              | In<br>Shortcut for `OR` queries<br>Values must be in Array       |
        | NIN      | All                              | Not In<br>Shortcut for `OR !` queries<br>Values must be in Array |
        | >        | Integer<br>Date (UNIX Timestamp) | Greater than                                                     |
        | <       | Integer<br>Date (UNIX Timestamp) | Lower than                                                       |
        | ~        | String                           | Contains                                                         |
        | !~       | String                           | Doesn't Contain                                                  |
        | ^        | String                           | Starts With                                                      |
        | $        | String                           | Ends With                                                        |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 5
                      total_pages: 0
              schema:
                '$ref': '#/components/schemas/contact_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c055b158-ec01-49c5-b16a-8eb13db90c0d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/search_request'
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                      - field: created_at
                        operator: '>'
                        value: '1306054154'
                  pagination:
                    per_page: 5
  '/contacts':
    get:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: list
      summary: List all contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
      operationId: ListContacts
      description: |
        You can fetch a list of all contacts (ie. users or leads) in your workspace.
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `50` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 10
                      total_pages: 0
              schema:
                '$ref': '#/components/schemas/contact_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9592a707-0231-4d17-bc4a-afd5d2f95440
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: create
      summary: Create contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Contacts
      operationId: CreateContact
      description: You can create a new contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd01309ffbe52cc8b3aa65
                    workspace_id: this_is_an_id303_that_should_be_at_least_
                    external_id:
                    role: user
                    email: joebloggs@intercom.io
                    phone:
                    formatted_phone:
                    name:
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727856944
                    updated_at: 1727856944
                    signed_up_at:
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd01309ffbe52cc8b3aa65/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd01309ffbe52cc8b3aa65/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd01309ffbe52cc8b3aa65/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01309ffbe52cc8b3aa65/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01309ffbe52cc8b3aa65/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ebe26426-9c95-455c-ad5d-dd6f8366b20e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/create_contact_request'
            examples:
              successful:
                summary: successful
                value:
                  email: joebloggs@intercom.io
  '/contacts/find_by_external_id/{external_id}':
    get:
      x-fern-sdk-group-name:
        - contacts
        - externalId
      x-fern-sdk-method-name: get
      summary: Get a contact by External ID
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: external_id
          in: path
          required: true
          example: cdd29344-5e0c-4ef0-ac56-f9ba2979bc27
          description: The external ID of the user that you want to retrieve
          schema:
            type: string
      tags:
        - Contacts
      operationId: ShowContactByExternalId
      description: You can fetch the details of a single contact by external ID. Note
        that this endpoint only supports users and not leads.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd01329ffbe52cc8b3aa66
                    workspace_id: this_is_an_id307_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone:
                    formatted_phone:
                    name: Joe Bloggs
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727856946
                    updated_at: 1727856946
                    signed_up_at: 1727856946
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd01329ffbe52cc8b3aa66/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd01329ffbe52cc8b3aa66/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd01329ffbe52cc8b3aa66/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01329ffbe52cc8b3aa66/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd01329ffbe52cc8b3aa66/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2093ae35-8bf9-49d4-8c11-57771e4b3c06
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/contacts/{id}/archive':
    post:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: archive
      summary: Archive contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      tags:
        - Contacts
      operationId: ArchiveContact
      description: You can archive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 66fd01349ffbe52cc8b3aa68
                    external_id: '70'
                    type: contact
                    archived: true
              schema:
                '$ref': '#/components/schemas/contact_archived'
  '/contacts/{id}/unarchive':
    post:
      x-fern-sdk-group-name:
        - contacts
      x-fern-sdk-method-name: unarchive
      summary: Unarchive contact
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          example: 63a07ddf05a32042dffac965
          required: true
          schema:
            type: string
      tags:
        - Contacts
      operationId: UnarchiveContact
      description: You can unarchive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 66fd01369ffbe52cc8b3aa69
                    external_id: '70'
                    type: contact
                    archived: false
              schema:
                '$ref': '#/components/schemas/contact_unarchived'
  '/conversations/{conversation_id}/tags':
    post:
      x-fern-sdk-group-name:
        - tags
        - conversations
      x-fern-sdk-method-name: add
      summary: Add tag to a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: conversation_id
          in: path
          description: conversation_id
          example: '64619700005694'
          required: true
          schema:
            type: string
      tags:
        - Tags
        - Conversations
      operationId: attachTagToConversation
      description: You can tag a specific conversation. This will return a tag object
        for the tag that was added to the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '53'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Conversation not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 7cb55eca-e989-410d-b223-4f947a6ecf5f
                    errors:
                      - code: not_found
                        message: Conversation not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 64d7a15e-4438-47b0-bbf8-8559a8e892d2
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - admin_id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '780'
            examples:
              successful:
                summary: successful
                value:
                  id: 53
                  admin_id: 991266989
              conversation_not_found:
                summary: Conversation not found
                value:
                  id: 54
                  admin_id: 991266991
  '/conversations/{conversation_id}/tags/{id}':
    delete:
      x-fern-sdk-group-name:
        - tags
        - conversations
      x-fern-sdk-method-name: remove
      summary: Remove tag from a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: conversation_id
          in: path
          description: conversation_id
          example: '64619700005694'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id
          example: '7522907'
          required: true
          schema:
            type: string
      tags:
        - Tags
        - Conversations
      operationId: detachTagFromConversation
      description: You can remove tag from a specific conversation. This will return
        a tag object for the tag that was removed from the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '56'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 38ff13a7-7283-423c-93b8-14c242662487
                    errors:
                      - code: not_found
                        message: Conversation not found
                Tag not found:
                  value:
                    type: error.list
                    request_id: 34ef3b73-b554-46f3-98c9-8d5910e4cd83
                    errors:
                      - code: tag_not_found
                        message: Tag not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 736f0c2b-fc56-4b1d-bbf4-85a3918334d9
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - admin_id
              properties:
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '123'
            examples:
              successful:
                summary: successful
                value:
                  admin_id: 991266993
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991266995
              tag_not_found:
                summary: Tag not found
                value:
                  admin_id: 991266996
  '/conversations':
    get:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: list
      summary: List all conversations
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 150
          required: false
          description: How many results per page
        - name: starting_after
          in: query
          required: false
          description: String used to get the next page of conversations.
          schema:
            type: string
      tags:
        - Conversations
      operationId: listConversations
      description: |
        You can fetch a list of all conversations.

        You can optionally request the result page size and the cursor to start after to fetch the result.
        {% admonition type="warning" name="Pagination" %}
          You can use pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#pagination-for-list-apis) for more details on how to use the `starting_after` param.
        {% /admonition %}
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
                    total_count: 1
                    conversations:
                      - type: conversation
                        id: '171'
                        created_at: 1727856965
                        updated_at: 1727856965
                        waiting_since:
                        snoozed_until:
                        source:
                          type: conversation
                          id: '403918153'
                          delivered_as: admin_initiated
                          subject: ''
                          body: '<p>this is the message body</p>'
                          author:
                            type: admin
                            id: '991266999'
                            name: Joe Example
                            email: email@example.com
                          attachments: []
                          url:
                          redacted: false
                        contacts:
                          type: contact.list
                          contacts:
                            - type: contact
                              id: 66fd01449ffbe52cc8b3aa6d
                              external_id: '70'
                        first_contact_reply:
                        admin_assignee_id:
                        team_assignee_id:
                        open: false
                        state: closed
                        read: false
                        tags:
                          type: tag.list
                          tags: []
                        priority: not_priority
                        sla_applied:
                        statistics:
                        conversation_rating:
                        teammates:
                        title:
                        custom_attributes: {}
                        topics: {}
                        ticket:
                        linked_objects:
                          type: list
                          data: []
                          total_count: 0
                          has_more: false
                        ai_agent:
                        ai_agent_participated: false
              schema:
                '$ref': '#/components/schemas/paginated_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 24b961f0-5ae0-4476-bc2d-6340b7c58ebe
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 6a3e8010-1fe0-439e-986a-01486f641bfc
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: create
      summary: Creates a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Conversations
      operationId: createConversation
      description: |+
        You can create a conversation that has been initiated by a contact (ie. user or lead).
        The conversation can be an in-app message only.

        {% admonition type="info" name="Sending for visitors" %}
        You can also send a message from a visitor by specifying their `user_id` or `id` value in the `from` field, along with a `type` field value of `contact`.
        This visitor will be automatically converted to a contact with a lead role once the conversation is created.
        {% /admonition %}

        This will return the Message model that has been created.

      responses:
        '200':
          description: conversation created
          content:
            application/json:
              examples:
                conversation created:
                  value:
                    type: user_message
                    id: '403918163'
                    created_at: 1727857007
                    body: Hello there
                    message_type: inapp
                    conversation_id: '199'
              schema:
                '$ref': '#/components/schemas/message'
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: 1430dc67-fe2c-43e8-9f1f-ce82c871b7ca
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e1fbce52-d712-45a4-a677-96ec34208546
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 7be7ca5f-b5b3-4360-a12b-8367451ed02c
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_conversation_request'
            examples:
              conversation_created:
                summary: conversation created
                value:
                  from:
                    type: user
                    id: 66fd016d9ffbe52cc8b3aa85
                  body: Hello there
              contact_not_found:
                summary: Contact Not Found
                value:
                  from:
                    type: user
                    id: 123_doesnt_exist
                  body: Hello there
  '/conversations/{id}':
    get:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: get
      summary: Retrieve a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The id of the conversation to target
          example: 123
          schema:
            type: integer
        - name: display_as
          in: query
          required: false
          description: Set to plaintext to retrieve conversation messages in plain text.
          example: plaintext
          schema:
            type: string
      tags:
        - Conversations
      operationId: retrieveConversation
      description: |2

        You can fetch the details of a single conversation.

        This will return a single Conversation model with all its conversation parts.

        {% admonition type="warning" name="Hard limit of 500 parts" %}
        The maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.
        {% /admonition %}

        For AI agent conversation metadata, please note that you need to have the agent enabled in your workspace, which is a [paid feature](https://www.intercom.com/help/en/articles/8205718-fin-resolutions#h_97f8c2e671).
      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '203'
                    created_at: 1727857016
                    updated_at: 1727857016
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918167'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267016'
                        name: Jane Lee
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01789ffbe52cc8b3aa89
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts: []
                      total_count: 0
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 43c9b3eb-75fb-4d81-a582-0288cfd111d7
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 77136027-72ca-4792-8eef-406104220952
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: e458da79-ae4c-4b9a-b3b3-a6398b2fe94d
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: update
      summary: Update a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The id of the conversation to target
          example: 123
          schema:
            type: integer
        - name: display_as
          in: query
          required: false
          description: Set to plaintext to retrieve conversation messages in plain text.
          example: plaintext
          schema:
            type: string
      tags:
        - Conversations
      operationId: updateConversation
      description: |2+

        You can update an existing conversation.

        {% admonition type="info" name="Replying and other actions" %}
        If you want to reply to a coveration or take an action such as assign, unassign, open, close or snooze, take a look at the reply and manage endpoints.
        {% /admonition %}

      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '207'
                    created_at: 1727857025
                    updated_at: 1727857027
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918171'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267024'
                        name: Joe Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01819ffbe52cc8b3aa8d
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes:
                      issue_type: Billing
                      priority: High
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '65'
                          part_type: conversation_attribute_updated_by_admin
                          body:
                          created_at: 1727857027
                          updated_at: 1727857027
                          notified_at: 1727857027
                          assigned_to:
                          author:
                            id: '991267025'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id354_that_should_be_at_least_@intercom.io
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                        - type: conversation_part
                          id: '66'
                          part_type: conversation_attribute_updated_by_admin
                          body:
                          created_at: 1727857027
                          updated_at: 1727857027
                          notified_at: 1727857027
                          assigned_to:
                          author:
                            id: '991267025'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id354_that_should_be_at_least_@intercom.io
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 2
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: da3b8d2a-b8d2-4338-86bb-2c7c2a2991f3
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ca1d4caa-d9db-4eb6-becf-b0cf1a1ce61e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: ee098ddb-32be-4351-8a24-e850878cfcac
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_conversation_request'
            examples:
              conversation_found:
                summary: conversation found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              not_found:
                summary: Not found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
    delete:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: delete
      summary: Delete a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
      tags:
        - Conversations
      operationId: deleteConversation
      description: You can delete a single conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '211'
                    object: conversation
                    deleted: true
              schema:
                '$ref': '#/components/schemas/conversation_deleted'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1855affc-fbdf-428e-a267-48a6343f571d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 7ce56f06-d349-4ff1-9f24-b9bd7e3b8a6c
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
  '/conversations/search':
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: search
      summary: Search conversations
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Conversations
      operationId: searchConversations
      description: |
        You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.

        To search for conversations, you need to send a `POST` request to `https://api.intercom.io/conversations/search`.

        This will accept a query object in the body which will define your filters in order to search for conversations.
        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `20` results per page and maximum is `150`.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiple's there can be:
        - There's a limit of max 2 nested filters
        - There's a limit of max 15 filters for each AND or OR group

        ### Accepted Fields

        Most keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).

        | Field                                     | Type                                                                                                                                                   |
        | :---------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |
        | id                                        | String                                                                                                                                                 |
        | created_at                                | Date (UNIX timestamp)                                                                                                                                  |
        | updated_at                                | Date (UNIX timestamp)                                                                                                                                  |
        | source.type                               | String<br>Accepted fields are `conversation`, `email`, `facebook`, `instagram`, `phone_call`, `phone_switch`, `push`, `sms`, `twitter` and `whatsapp`. |
        | source.id                                 | String                                                                                                                                                 |
        | source.delivered_as                       | String                                                                                                                                                 |
        | source.subject                            | String                                                                                                                                                 |
        | source.body                               | String                                                                                                                                                 |
        | source.author.id                          | String                                                                                                                                                 |
        | source.author.type                        | String                                                                                                                                                 |
        | source.author.name                        | String                                                                                                                                                 |
        | source.author.email                       | String                                                                                                                                                 |
        | source.url                                | String                                                                                                                                                 |
        | contact_ids                               | String                                                                                                                                                 |
        | teammate_ids                              | String                                                                                                                                                 |
        | admin_assignee_id                         | String                                                                                                                                                 |
        | team_assignee_id                          | String                                                                                                                                                 |
        | channel_initiated                         | String                                                                                                                                                 |
        | open                                      | Boolean                                                                                                                                                |
        | read                                      | Boolean                                                                                                                                                |
        | state                                     | String                                                                                                                                                 |
        | waiting_since                             | Date (UNIX timestamp)                                                                                                                                  |
        | snoozed_until                             | Date (UNIX timestamp)                                                                                                                                  |
        | tag_ids                                   | String                                                                                                                                                 |
        | priority                                  | String                                                                                                                                                 |
        | statistics.time_to_assignment             | Integer                                                                                                                                                |
        | statistics.time_to_admin_reply            | Integer                                                                                                                                                |
        | statistics.time_to_first_close            | Integer                                                                                                                                                |
        | statistics.time_to_last_close             | Integer                                                                                                                                                |
        | statistics.median_time_to_reply           | Integer                                                                                                                                                |
        | statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_assignment_at            | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.first_close_at                 | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_assignment_at             | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_close_at                  | Date (UNIX timestamp)                                                                                                                                  |
        | statistics.last_closed_by_id              | String                                                                                                                                                 |
        | statistics.count_reopens                  | Integer                                                                                                                                                |
        | statistics.count_assignments              | Integer                                                                                                                                                |
        | statistics.count_conversation_parts       | Integer                                                                                                                                                |
        | conversation_rating.requested_at          | Date (UNIX timestamp)                                                                                                                                  |
        | conversation_rating.replied_at            | Date (UNIX timestamp)                                                                                                                                  |
        | conversation_rating.score                 | Integer                                                                                                                                                |
        | conversation_rating.remark                | String                                                                                                                                                 |
        | conversation_rating.contact_id            | String                                                                                                                                                 |
        | conversation_rating.admin_d               | String                                                                                                                                                 |
        | ai_agent_participated                     | Boolean                                                                                                                                                |
        | ai_agent.resolution_state                 | String                                                                                                                                                 |
        | ai_agent.last_answer_type                 | String                                                                                                                                                 |
        | ai_agent.rating                           | Integer                                                                                                                                                |
        | ai_agent.rating_remark                    | String                                                                                                                                                 |
        | ai_agent.source_type                      | String                                                                                                                                                 |
        | ai_agent.source_title                     | String                                                                                                                                                 |

        ### Accepted Operators

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                    | Description                                                  |
        | :------- | :----------------------------- | :----------------------------------------------------------- |
        | =        | All                            | Equals                                                       |
        | !=       | All                            | Doesn't Equal                                                |
        | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
        | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
        | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
        | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
        | ~        | String                         | Contains                                                     |
        | !~       | String                         | Doesn't Contain                                              |
        | ^        | String                         | Starts With                                                  |
        | $        | String                         | Ends With                                                    |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 5
                      total_pages: 1
                    total_count: 1
                    conversations:
                      - type: conversation
                        id: '214'
                        created_at: 1727857044
                        updated_at: 1727857044
                        waiting_since:
                        snoozed_until:
                        source:
                          type: conversation
                          id: '403918178'
                          delivered_as: admin_initiated
                          subject: ''
                          body: '<p>this is the message body</p>'
                          author:
                            type: admin
                            id: '991267054'
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          url:
                          redacted: false
                        contacts:
                          type: contact.list
                          contacts:
                            - type: contact
                              id: 66fd01939ffbe52cc8b3aa94
                              external_id: '70'
                        first_contact_reply:
                        admin_assignee_id:
                        team_assignee_id:
                        open: false
                        state: closed
                        read: false
                        tags:
                          type: tag.list
                          tags: []
                        priority: not_priority
                        sla_applied:
                        statistics:
                        conversation_rating:
                        teammates:
                        title:
                        custom_attributes: {}
                        topics: {}
                        ticket:
                        linked_objects:
                          type: list
                          data: []
                          total_count: 0
                          has_more: false
                        ai_agent:
                        ai_agent_participated: false
              schema:
                '$ref': '#/components/schemas/conversation_list'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/search_request'
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                      - field: created_at
                        operator: '>'
                        value: '1306054154'
                  pagination:
                    per_page: 5
  '/conversations/{id}/reply':
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: reply
      summary: Reply to a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The Intercom provisioned identifier for the conversation or the
            string "last" to reply to the last part of the conversation
          example: 123 or "last"
          schema:
            type: string
      tags:
        - Conversations
      operationId: replyConversation
      description: You can reply to a conversation with a message from an admin or
        on behalf of a contact, or with a note for admins.
      responses:
        '200':
          description: User last conversation reply
          content:
            application/json:
              examples:
                User reply:
                  value:
                    type: conversation
                    id: '223'
                    created_at: 1727857056
                    updated_at: 1727857057
                    waiting_since: 1727857057
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918181'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267057'
                        name: Joe Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01a09ffbe52cc8b3aa9c
                          external_id: '70'
                    first_contact_reply:
                      created_at: 1727857057
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '68'
                          part_type: open
                          body: '<p>Thanks again :)</p>'
                          created_at: 1727857057
                          updated_at: 1727857057
                          notified_at: 1727857057
                          assigned_to:
                          author:
                            id: 66fd01a09ffbe52cc8b3aa9c
                            type: user
                            name: Joe Bloggs
                            email: joe@bloggs.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                Admin note reply:
                  value:
                    type: conversation
                    id: '224'
                    created_at: 1727857059
                    updated_at: 1727857061
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918182'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267059'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01a29ffbe52cc8b3aa9d
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '69'
                          part_type: note
                          body: |-
                            <h2>An Unordered HTML List</h2>
                            <ul>
                            <li>Coffee</li>
                            <li>Tea</li>
                            <li>Milk</li>
                            </ul>
                            <h2>An Ordered HTML List</h2>
                            <ol>
                            <li>Coffee</li>
                            <li>Tea</li>
                            <li>Milk</li>
                            </ol>
                          created_at: 1727857061
                          updated_at: 1727857061
                          notified_at: 1727857061
                          assigned_to:
                          author:
                            id: '991267059'
                            type: admin
                            name: Joe Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                Admin quick_reply reply:
                  value:
                    type: conversation
                    id: '225'
                    created_at: 1727857062
                    updated_at: 1727857064
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918183'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267061'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01a69ffbe52cc8b3aa9e
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '70'
                          part_type: quick_reply
                          body:
                          created_at: 1727857064
                          updated_at: 1727857064
                          notified_at: 1727857064
                          assigned_to:
                          author:
                            id: '991267061'
                            type: admin
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                User last conversation reply:
                  value:
                    type: conversation
                    id: '226'
                    created_at: 1727857066
                    updated_at: 1727857067
                    waiting_since: 1727857067
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918184'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267063'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01a99ffbe52cc8b3aa9f
                          external_id: '70'
                    first_contact_reply:
                      created_at: 1727857067
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '71'
                          part_type: open
                          body: '<p>Thanks again :)</p>'
                          created_at: 1727857067
                          updated_at: 1727857067
                          notified_at: 1727857067
                          assigned_to:
                          author:
                            id: 66fd01a99ffbe52cc8b3aa9f
                            type: user
                            name: Joe Bloggs
                            email: joe@bloggs.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 4154228e-b2c3-4899-90fc-72185bc1233e
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7ad53952-7179-4d7b-8b07-e41da78983ac
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 5fae2837-22f7-4670-bd8e-1b71de0bfb2d
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/reply_conversation_request'
            examples:
              user_reply:
                summary: User reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 66fd01a09ffbe52cc8b3aa9c
                  body: Thanks again :)
              admin_note_reply:
                summary: Admin note reply
                value:
                  message_type: note
                  type: admin
                  admin_id: 991267059
                  body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>
                    \  <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>
                    \ <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>
                    \  </body> </html>"
              admin_quick_reply_reply:
                summary: Admin quick_reply reply
                value:
                  message_type: quick_reply
                  type: admin
                  admin_id: 991267061
                  reply_options:
                    - text: 'Yes'
                      uuid: 52337e6c-5eba-48a3-aa23-c66b234985d6
                    - text: 'No'
                      uuid: 49b7650d-ffca-4116-b3b1-dcee4680704a
              user_last_conversation_reply:
                summary: User last conversation reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 66fd01a99ffbe52cc8b3aa9f
                  body: Thanks again :)
              not_found:
                summary: Not found
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 66fd01ac9ffbe52cc8b3aaa0
                  body: Thanks again :)
  '/conversations/{id}/parts':
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: assign
      summary: Manage a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The identifier for the conversation as given by Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - Conversations
      operationId: manageConversation
      description: |
        For managing conversations you can:
        - Close a conversation
        - Snooze a conversation to reopen on a future date
        - Open a conversation which is `snoozed` or `closed`
        - Assign a conversation to an admin and/or team.
      responses:
        '200':
          description: Assign a conversation
          content:
            application/json:
              examples:
                Close a conversation:
                  value:
                    type: conversation
                    id: '230'
                    created_at: 1727857076
                    updated_at: 1727857077
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918188'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267071'
                        name: Joe Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01b49ffbe52cc8b3aaa3
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '72'
                          part_type: close
                          body: '<p>Goodbye :)</p>'
                          created_at: 1727857077
                          updated_at: 1727857077
                          notified_at: 1727857077
                          assigned_to:
                          author:
                            id: '991267071'
                            type: admin
                            name: Joe Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                Snooze a conversation:
                  value:
                    type: conversation
                    id: '231'
                    created_at: 1727857079
                    updated_at: 1727857081
                    waiting_since:
                    snoozed_until: 1727860681
                    source:
                      type: conversation
                      id: '403918189'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267073'
                        name: Joe Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01b79ffbe52cc8b3aaa4
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: snoozed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '73'
                          part_type: snoozed
                          body:
                          created_at: 1727857081
                          updated_at: 1727857081
                          notified_at: 1727857081
                          assigned_to:
                          author:
                            id: '991267073'
                            type: admin
                            name: Joe Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                Open a conversation:
                  value:
                    type: conversation
                    id: '236'
                    created_at: 1727857080
                    updated_at: 1727857093
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918190'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267075'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01bd9ffbe52cc8b3aaa9
                          external_id: '74'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title: ''
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '75'
                          part_type: open
                          body:
                          created_at: 1727857094
                          updated_at: 1727857094
                          notified_at: 1727857094
                          assigned_to:
                          author:
                            id: '991267075'
                            type: admin
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
                Assign a conversation:
                  value:
                    type: conversation
                    id: '241'
                    created_at: 1727857095
                    updated_at: 1727857096
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918193'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267078'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01c79ffbe52cc8b3aaad
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id: 991267078
                    team_assignee_id:
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '76'
                          part_type: assign_and_reopen
                          body:
                          created_at: 1727857096
                          updated_at: 1727857096
                          notified_at: 1727857096
                          assigned_to:
                            type: admin
                            id: '991267078'
                          author:
                            id: '991267078'
                            type: admin
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 1ce8ab2b-11a4-4efc-a0a8-8bfe8ca93a63
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f32e2852-e962-4ea8-bdb5-1486185178af
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: b063ec68-5d77-41e6-bc9e-d05473a09825
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/close_conversation_request'
                - '$ref': '#/components/schemas/snooze_conversation_request'
                - '$ref': '#/components/schemas/open_conversation_request'
                - '$ref': '#/components/schemas/assign_conversation_request'
            examples:
              close_a_conversation:
                summary: Close a conversation
                value:
                  message_type: close
                  type: admin
                  admin_id: 991267071
                  body: Goodbye :)
              snooze_a_conversation:
                summary: Snooze a conversation
                value:
                  message_type: snoozed
                  admin_id: 991267073
                  snoozed_until: 1727860681
              open_a_conversation:
                summary: Open a conversation
                value:
                  message_type: open
                  admin_id: 991267075
              assign_a_conversation:
                summary: Assign a conversation
                value:
                  message_type: assignment
                  type: admin
                  admin_id: 991267078
                  assignee_id: 991267078
              not_found:
                summary: Not found
                value:
                  message_type: close
                  type: admin
                  admin_id: 991267080
                  body: Goodbye :)
  '/conversations/{id}/run_assignment_rules':
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: assign
      summary: Run Assignment Rules on a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The identifier for the conversation as given by Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - Conversations
      operationId: autoAssignConversation
      description: |
        You can let a conversation be automatically assigned following assignment rules.
        {% admonition type="danger" name="Deprecation" %}
        Running assignment rules has been deprecated as of version 2.12. It will be removed from all versions by October 2026.
        {% /admonition %}

        {% admonition type="warning" name="Using with workflows" %}
        It is not possible to use this endpoint with Workflows.
        {% /admonition %}
      responses:
        '200':
          description: Assign a conversation using assignment rules
          content:
            application/json:
              examples:
                Assign a conversation using assignment rules:
                  value:
                    type: conversation
                    id: '245'
                    created_at: 1727857106
                    updated_at: 1727857107
                    waiting_since:
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918197'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267086'
                        name: Jane Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd01d19ffbe52cc8b3aab1
                          external_id: '70'
                    first_contact_reply:
                    admin_assignee_id:
                    team_assignee_id:
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '77'
                          part_type: default_assignment
                          body:
                          created_at: 1727857107
                          updated_at: 1727857107
                          notified_at: 1727857107
                          assigned_to:
                            type: nobody_admin
                            id:
                          author:
                            id: '991267087'
                            type: bot
                            name: Operator
                            email: operator+aaa000@intercom.io
                          attachments: []
                          external_id:
                          redacted: false
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 6d258aef-dc4e-4f71-977b-a0de678b1315
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b6c09ad4-23d9-47e5-b569-965edf404b2b
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 8d83cdfe-7a5c-4d79-b778-6ac01a137bf6
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
  '/conversations/{id}/customers':
    post:
      x-fern-sdk-group-name:
        - conversations
        - contacts
      x-fern-sdk-method-name: add
      summary: Add a contact to a conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The identifier for the conversation as given by Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - Conversations
      operationId: attachContactToConversation
      description: |+
        Add contacts to a conversation on behalf of either another contact or an admin.

        {% admonition type="info" name="Contacts without an email" %}
        If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
        {% /admonition %}

      responses:
        '200':
          description: Attach a contact to a conversation
          content:
            application/json:
              examples:
                Attach a contact to a conversation:
                  value:
                    customers:
                      - type: user
                        id: 66fd01dc9ffbe52cc8b3aab5
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: b254197f-6466-48c9-8fa8-c185b376cc36
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 65ff1db5-088b-4f44-b65e-18b4f06b46df
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: '0890263b-a009-4763-97f4-d8865ba2c8c5'
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/attach_contact_to_conversation_request'
            examples:
              attach_a_contact_to_a_conversation:
                summary: Attach a contact to a conversation
                value:
                  admin_id: 991267094
                  customer:
                    intercom_user_id: 66fd01dc9ffbe52cc8b3aab5
              not_found:
                summary: Not found
                value:
                  admin_id: 991267096
                  customer:
                    intercom_user_id: 66fd01df9ffbe52cc8b3aab6
  '/conversations/{conversation_id}/customers/{contact_id}':
    delete:
      x-fern-sdk-group-name:
        - conversations
        - contacts
      x-fern-sdk-method-name: remove
      summary: Remove a contact from a group conversation
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: conversation_id
          in: path
          required: true
          description: The identifier for the conversation as given by Intercom.
          example: '123'
          schema:
            type: string
        - name: contact_id
          in: path
          required: true
          description: The identifier for the contact as given by Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - Conversations
      operationId: detachContactFromConversation
      description: |+
        Remove a contact from a conversation on behalf of either another contact or an admin.

        {% admonition type="info" name="Contacts without an email" %}
        If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
        {% /admonition %}

      responses:
        '200':
          description: Detach a contact from a group conversation
          content:
            application/json:
              examples:
                Detach a contact from a group conversation:
                  value:
                    customers:
                      - type: user
                        id: 66fd01f39ffbe52cc8b3aac1
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: ca541ef4-b8cc-48a3-858b-a05a488db707
                    errors:
                      - code: not_found
                        message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: b75e74ba-f21e-473d-9c37-1d26c556af08
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '422':
          description: Last customer
          content:
            application/json:
              examples:
                Last customer:
                  value:
                    type: error.list
                    request_id: e82741ec-00fe-4ae4-9e7d-11ba86420b5e
                    errors:
                      - code: parameter_invalid
                        message: Removing the last customer is not allowed
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dbbd5d8e-9071-4ab3-9a5f-b46b81f8f3a9
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: a120e33c-f5be-4b17-806e-c8bf6650d1d3
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/detach_contact_from_conversation_request'
            examples:
              detach_a_contact_from_a_group_conversation:
                summary: Detach a contact from a group conversation
                value:
                  admin_id: 991267102
                  customer:
                    intercom_user_id: 66fd01e79ffbe52cc8b3aab9
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991267105
                  customer:
                    intercom_user_id: 66fd01f59ffbe52cc8b3aac2
              contact_not_found:
                summary: Contact not found
                value:
                  admin_id: 991267108
                  customer:
                    intercom_user_id: 66fd02029ffbe52cc8b3aaca
              last_customer:
                summary: Last customer
                value:
                  admin_id: 991267111
                  customer:
                    intercom_user_id: 66fd020e9ffbe52cc8b3aad2
  '/conversations/redact':
    post:
      x-fern-sdk-group-name:
        - conversations
      x-fern-sdk-method-name: redact
      summary: Redact a conversation part
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Conversations
      operationId: redactConversation
      description: |+
        You can redact a conversation part or the source message of a conversation (as seen in the source object).

        {% admonition type="info" name="Redacting parts and messages" %}
        If you are redacting a conversation part, it must have a `body`. If you are redacting a source message, it must have been created by a contact. We will return a `conversation_part_not_redactable` error if these criteria are not met.
        {% /admonition %}

      responses:
        '200':
          description: Redact a conversation part
          content:
            application/json:
              examples:
                Redact a conversation part:
                  value:
                    type: conversation
                    id: '307'
                    created_at: 1727857203
                    updated_at: 1727857206
                    waiting_since: 1727857204
                    snoozed_until:
                    source:
                      type: conversation
                      id: '403918223'
                      delivered_as: admin_initiated
                      subject: ''
                      body: '<p>this is the message body</p>'
                      author:
                        type: admin
                        id: '991267120'
                        name: Joe Example
                        email: email@example.com
                      attachments: []
                      url:
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd02339ffbe52cc8b3aaea
                          external_id: '70'
                    first_contact_reply:
                      created_at: 1727857204
                      type: conversation
                      url:
                    admin_assignee_id:
                    team_assignee_id:
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied:
                    statistics:
                    conversation_rating:
                    teammates:
                    title:
                    custom_attributes: {}
                    topics: {}
                    ticket:
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    ai_agent:
                    ai_agent_participated: false
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                        - type: conversation_part
                          id: '85'
                          part_type: open
                          body: '<p><i>This message was deleted</i></p>'
                          created_at: 1727857204
                          updated_at: 1727857206
                          notified_at: 1727857204
                          assigned_to:
                          author:
                            id: 66fd02339ffbe52cc8b3aaea
                            type: user
                            name: Joe Bloggs
                            email: joe@bloggs.com
                          attachments: []
                          external_id:
                          redacted: true
                          metadata: {}
                          email_message_metadata:
                      total_count: 1
              schema:
                '$ref': '#/components/schemas/conversation'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 44fec627-e443-4cca-9958-0b30d582b0b4
                    errors:
                      - code: conversation_part_or_message_not_found
                        message: Conversation part or message not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 46401bdb-91eb-4bbe-a396-fde65fa96c27
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/redact_conversation_request'
            examples:
              redact_a_conversation_part:
                summary: Redact a conversation part
                value:
                  type: conversation_part
                  conversation_id: 307
                  conversation_part_id: 85
              not_found:
                summary: Not found
                value:
                  type: conversation_part
                  conversation_id: really_123_doesnt_exist
                  conversation_part_id: really_123_doesnt_exist
  '/conversations/{id}/convert':
    post:
      x-fern-sdk-group-name:
        - conversations
        - tickets
      x-fern-sdk-method-name: convert
      summary: Convert a conversation to a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The id of the conversation to target
          example: 123
          schema:
            type: integer
      tags:
        - Conversations
      description: You can convert a conversation to a ticket.
      operationId: convertConversationToTicket
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: ticket
                    id: '310'
                    ticket_id: '20'
                    ticket_attributes: {}
                    ticket_state:
                      type: ticket_state
                      id: '4629'
                      category: submitted
                      internal_label: Submitted
                      external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '49'
                      name: my-ticket-type-1
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id440_that_should_be_at_least_
                      archived: false
                      created_at: 1727857218
                      updated_at: 1727857218
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data: []
                      category: Customer
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd023e9ffbe52cc8b3aaed
                          external_id: '70'
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1727857214
                    updated_at: 1727857219
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                        - type: ticket_part
                          id: '87'
                          part_type: comment
                          body: '<p>Comment for message</p>'
                          created_at: 1727857214
                          updated_at: 1727857214
                          author:
                            id: 66fd023e9ffbe52cc8b3aaed
                            type: user
                            name: Joe Bloggs
                            email: joe@bloggs.com
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '88'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: submitted
                          previous_ticket_state: submitted
                          created_at: 1727857219
                          updated_at: 1727857219
                          author:
                            id: '991267130'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id440_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                      total_count: 2
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Customer
                    is_shared: true
              schema:
                '$ref': '#/components/schemas/ticket'
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                Bad request:
                  value:
                    type: error.list
                    request_id: 160ccb27-e177-468a-ad34-97548e488bfa
                    errors:
                      - code: parameter_invalid
                        message: Ticket type is not a customer ticket type
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/convert_conversation_to_ticket_request'
            examples:
              successful:
                summary: successful
                value:
                  ticket_type_id: '49'
              bad_request:
                summary: Bad request
                value:
                  ticket_type_id: '50'
  '/custom_object_instances/{custom_object_type_identifier}':
    parameters:
      - name: custom_object_type_identifier
        in: path
        description: The unique identifier of the custom object type that defines the
          structure of the custom object instance.
        example: Order
        required: true
        schema:
          type: string
    post:
      x-fern-sdk-group-name:
        - customObjects
      x-fern-sdk-method-name: create
      summary: Create or Update a Custom Object Instance
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Custom Object Instances
      description: Create or update a custom object instance
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '6'
                    type: object_type_identifier_1
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at: 1392036272
                    external_updated_at: 1392036272
                    created_at: 1727857226
                    updated_at: 1727857226
              schema:
                '$ref': '#/components/schemas/custom_object_instance'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ed872bd0-2442-4e59-aa3f-7f9a7fcdf169
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_or_update_custom_object_instance_request'
            examples:
              successful:
                summary: successful
                value:
                  external_id: '123'
                  external_created_at: 1392036272
                  external_updated_at: 1392036272
    get:
      x-fern-sdk-group-name:
        - customObjects
      x-fern-sdk-method-name: getByExternalId
      summary: Get Custom Object Instance by External ID
      parameters:
        - name: external_id
          in: query
          style: form
          required: true
          schema:
            type: object
            oneOf:
              - description: The Intercom defined id representing the custom object instance.
                title: Find by id
                properties:
                  external_id:
                    type: string
                required:
                  - external_id
                additionalProperties: false
              - description: The unique identifier for the instance in the external system
                  it originated from.
                title: Find by external_id
                properties:
                  external_id:
                    type: string
                required:
                  - external_id
                additionalProperties: false
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Custom Object Instances
      description: Fetch a Custom Object Instance by external_id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '8'
                    type: object_type_identifier_4
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at:
                    external_updated_at:
                    created_at: 1727857228
                    updated_at: 1727857228
              schema:
                '$ref': '#/components/schemas/custom_object_instance'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7a244bcf-1487-4e1e-abb7-4f80a4d5ecef
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/custom_object_instances/{custom_object_type_identifier}/{id}':
    parameters:
      - name: custom_object_type_identifier
        in: path
        description: The unique identifier of the custom object type that defines the
          structure of the custom object instance.
        example: Order
        required: true
        schema:
          type: string
    get:
      x-fern-sdk-group-name:
        - customObjects
      x-fern-sdk-method-name: getById
      summary: Get Custom Object Instance by ID
      parameters:
        - name: id
          in: path
          description: The id or external_id of the custom object instance
          required: true
          schema:
            type: string
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Custom Object Instances
      description: Fetch a Custom Object Instance by id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '9'
                    type: object_type_identifier_6
                    custom_attributes: {}
                    external_id: '123'
                    external_created_at:
                    external_updated_at:
                    created_at: 1727857229
                    updated_at: 1727857229
              schema:
                '$ref': '#/components/schemas/custom_object_instance'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 72a31e34-c5c6-4f29-b387-e1e7be6fe475
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    delete:
      x-fern-sdk-group-name:
        - customObjects
      x-fern-sdk-method-name: delete
      summary: Delete a Custom Object Instance
      parameters:
        - name: id
          in: path
          description: The Intercom defined id of the custom object instance
          required: true
          schema:
            type: string
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Custom Object Instances
      description: Delete a single Custom Object instance using the Intercom defined
        id.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '10'
                    object: object_type_identifier_8
                    deleted: true
              schema:
                '$ref': '#/components/schemas/custom_object_instance_deleted'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 649b8a8f-5eb8-441e-894a-0c3c9a5874d1
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/data_attributes':
    get:
      x-fern-sdk-group-name:
        - dataAttributes
      x-fern-sdk-method-name: list
      summary: List all data attributes
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: model
          in: query
          required: false
          description: Specify the data attribute model to return.
          schema:
            type: string
            enum:
              - contact
              - company
              - conversation
          example: company
        - name: include_archived
          in: query
          required: false
          description: Include archived attributes in the list. By default we return
            only non archived data attributes.
          example: false
          schema:
            type: boolean
      tags:
        - Data Attributes
      operationId: lisDataAttributes
      description: You can fetch a list of all data attributes belonging to a workspace
        for contacts, companies or conversations.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                      - type: data_attribute
                        name: name
                        full_name: name
                        label: Company name
                        description: The name of a company
                        data_type: string
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: company_id
                        full_name: company_id
                        label: Company ID
                        description: A number identifying a company
                        data_type: string
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: last_request_at
                        full_name: last_request_at
                        label: Company last seen
                        description: The last day anyone from a company visited your
                          site or app
                        data_type: date
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: remote_created_at
                        full_name: remote_created_at
                        label: Company created at
                        description: The day a company was added to Intercom
                        data_type: date
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: user_count
                        full_name: user_count
                        label: People
                        description: The number of people in a company
                        data_type: integer
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: session_count
                        full_name: session_count
                        label: Company web sessions
                        description: All visits from anyone in a company to your product's
                          site or app
                        data_type: integer
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: name
                        full_name: plan.name
                        label: Plan
                        description: A specific plan or level within your product that
                          companies have signed up to
                        data_type: string
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: monthly_spend
                        full_name: monthly_spend
                        label: Monthly Spend
                        description: The monthly revenue you receive from a company
                        data_type: float
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: size
                        full_name: size
                        label: Company size
                        description: The number of people employed in this company,
                          expressed as a single number
                        data_type: integer
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: industry
                        full_name: industry
                        label: Company industry
                        description: The category or domain this company belongs to
                          e.g. 'ecommerce' or 'SaaS'
                        data_type: string
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: website
                        full_name: website
                        label: Company website
                        description: The web address for the company's primary marketing
                          site
                        data_type: string
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - id: 18
                        type: data_attribute
                        name: The One Ring
                        full_name: custom_attributes.The One Ring
                        label: The One Ring
                        description: One ring to rule them all, one ring to find them,
                          One ring to bring them all and in the darkness bind them.
                        data_type: string
                        api_writable: true
                        ui_writable: false
                        messenger_writable: true
                        custom: true
                        archived: false
                        admin_id: '991267147'
                        created_at: 1727857232
                        updated_at: 1727857232
                        model: company
                      - type: data_attribute
                        name: id
                        full_name: id
                        label: ID
                        description: The Intercom defined id representing the company
                        data_type: string
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: created_at
                        full_name: created_at
                        label: Created at
                        description: The time the company was added to Intercom
                        data_type: date
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: updated_at
                        full_name: updated_at
                        label: Updated at
                        description: The last time the company was updated
                        data_type: date
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: id
                        full_name: plan.id
                        label: Plan ID
                        description: The Intercom defined id representing the plan
                        data_type: string
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
                      - type: data_attribute
                        name: app_id
                        full_name: app_id
                        label: App ID
                        description: The Intercom defined id representing the app
                        data_type: string
                        api_writable: false
                        ui_writable: false
                        messenger_writable: true
                        custom: false
                        archived: false
                        model: company
              schema:
                '$ref': '#/components/schemas/data_attribute_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7094c9ac-50f8-4b70-8322-94a59ec22184
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - dataAttributes
      x-fern-sdk-method-name: create
      summary: Create a data attribute
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Data Attributes
      operationId: createDataAttribute
      description: You can create a data attributes for a `contact` or a `company`.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 21
                    type: data_attribute
                    name: Mithril Shirt
                    full_name: custom_attributes.Mithril Shirt
                    label: Mithril Shirt
                    data_type: string
                    api_writable: true
                    ui_writable: false
                    messenger_writable: false
                    custom: true
                    archived: false
                    admin_id: '991267149'
                    created_at: 1727857234
                    updated_at: 1727857234
                    model: company
              schema:
                '$ref': '#/components/schemas/data_attribute'
        '400':
          description: Too few options for list
          content:
            application/json:
              examples:
                Same name already exists:
                  value:
                    type: error.list
                    request_id: 16e616ae-1e20-460d-b414-c1334789ecbb
                    errors:
                      - code: parameter_invalid
                        message: You already have 'The One Ring' in your company data.
                          To save this as new people data, use a different name.
                Invalid name:
                  value:
                    type: error.list
                    request_id: c6c87a7e-49ca-46f9-82ff-8d82dd61ccdf
                    errors:
                      - code: parameter_invalid
                        message: Your name for this attribute must only contain alphanumeric
                          characters, currency symbols, and hyphens
                Attribute already exists:
                  value:
                    type: error.list
                    request_id: e2233d83-6518-4559-91e8-87770036d6fe
                    errors:
                      - code: parameter_invalid
                        message: You already have 'The One Ring' in your company data.
                          To save this as new company data, use a different name.
                Invalid Data Type:
                  value:
                    type: error.list
                    request_id: 6a37d4c7-7cef-4a41-a128-5335e2ee6b72
                    errors:
                      - code: parameter_invalid
                        message: Data Type isn't an option
                Too few options for list:
                  value:
                    type: error.list
                    request_id: f5f1d0aa-2ffc-43a6-815e-439a4adca8af
                    errors:
                      - code: parameter_invalid
                        message: The Data Attribute model field must be either contact
                          or company
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2e9f4e21-5ef0-4047-95a1-58e5f052d09e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_data_attribute_request'
            examples:
              successful:
                summary: Successful
                value:
                  name: Mithril Shirt
                  model: company
                  data_type: string
              same_name_already_exists:
                summary: Same name already exists
                value:
                  name: The One Ring
                  model: contact
                  data_type: integer
              invalid_name:
                summary: Invalid name
                value:
                  name: '!nv@l!d n@me'
                  model: company
                  data_type: string
              attribute_already_exists:
                summary: Attribute already exists
                value:
                  name: The One Ring
                  model: company
                  data_type: string
              invalid_data_type:
                summary: Invalid Data Type
                value:
                  name: The Second Ring
                  model: company
                  data_type: mithril
              too_few_options_for_list:
                summary: Too few options for list
                value:
                  description: Just a plain old ring
                  options:
                    - value: 1-10
                  archived: false
  '/data_attributes/{id}':
    put:
      x-fern-sdk-group-name:
        - dataAttributes
      x-fern-sdk-method-name: update
      summary: Update a data attribute
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The data attribute id
          example: 1
          schema:
            type: integer
      tags:
        - Data Attributes
      operationId: updateDataAttribute
      description: "\nYou can update a data attribute.\n\n> \U0001F6A7 Updating the
        data type is not possible\n>\n> It is currently a dangerous action to execute
        changing a data attribute's type via the API. You will need to update the
        type via the UI instead.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 28
                    type: data_attribute
                    name: The One Ring
                    full_name: custom_attributes.The One Ring
                    label: The One Ring
                    description: Just a plain old ring
                    data_type: string
                    options:
                      - 1-10
                      - 11-20
                    api_writable: true
                    ui_writable: false
                    messenger_writable: true
                    custom: true
                    archived: false
                    admin_id: '991267156'
                    created_at: 1727857239
                    updated_at: 1727857239
                    model: company
              schema:
                '$ref': '#/components/schemas/data_attribute'
        '400':
          description: Too few options in list
          content:
            application/json:
              examples:
                Too few options in list:
                  value:
                    type: error.list
                    request_id: dc4a4575-c686-43b7-b695-96d63dc87cca
                    errors:
                      - code: parameter_invalid
                        message: Options isn't an array
              schema:
                '$ref': '#/components/schemas/error'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              examples:
                Attribute Not Found:
                  value:
                    type: error.list
                    request_id: 145c272e-06ba-46cc-b8b5-cc438635063f
                    errors:
                      - code: field_not_found
                        message: We couldn't find that data attribute to update
              schema:
                '$ref': '#/components/schemas/error'
        '422':
          description: Has Dependant Object
          content:
            application/json:
              examples:
                Has Dependant Object:
                  value:
                    type: error.list
                    request_id: 8e16d3a3-7458-4910-a900-91c8d4329d3b
                    errors:
                      - code: data_invalid
                        message: The Data Attribute you are trying to archive has a
                          dependant object
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b6d77524-7f36-49ce-b8bc-501ad11b6fd6
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_data_attribute_request'
            examples:
              successful:
                summary: Successful
                value:
                  description: Just a plain old ring
                  options:
                    - value: 1-10
                    - value: 11-20
                  archived: false
              too_few_options_in_list:
                summary: Too few options in list
                value:
                  description: Too few options
                  options:
                    value: 1-10
                  archived: false
              attribute_not_found:
                summary: Attribute Not Found
                value:
                  description: Just a plain old ring
                  options:
                    - value: 1-10
                    - value: 11-20
                  archived: false
              has_dependant_object:
                summary: Has Dependant Object
                value:
                  description: Trying to archieve
                  archived: true
  '/events':
    post:
      x-fern-sdk-group-name:
        - dataEvents
      x-fern-sdk-method-name: create
      summary: Create a data event
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Data Events
      operationId: createDataEvent
      description: |2+

        You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a `Content-Type` of `application/json`.

        When using the JavaScript API, [adding the code to your app](http://docs.intercom.io/configuring-Intercom/tracking-user-events-in-your-app) makes the Events API available. Once added, you can submit an event using the `trackEvent` method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.

        With the Ruby client you pass a hash describing the event to `Intercom::Event.create`, or call the `track_user` method directly on the current user object (e.g. `user.track_event`).

        **NB: For the JSON object types, please note that we do not currently support nested JSON structure.**

        | Type            | Description                                                                                                                                                                                                     | Example                                                                           |
        | :-------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------- |
        | String          | The value is a JSON String                                                                                                                                                                                      | `"source":"desktop"`                                                              |
        | Number          | The value is a JSON Number                                                                                                                                                                                      | `"load": 3.67`                                                                    |
        | Date            | The key ends with the String `_date` and the value is a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time), assumed to be in the [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone. | `"contact_date": 1392036272`                                                      |
        | Link            | The value is a HTTP or HTTPS URI.                                                                                                                                                                               | `"article": "https://example.org/ab1de.html"`                                     |
        | Rich Link       | The value is a JSON object that contains `url` and `value` keys.                                                                                                                                                | `"article": {"url": "https://example.org/ab1de.html", "value":"the dude abides"}` |
        | Monetary Amount | The value is a JSON object that contains `amount` and `currency` keys. The `amount` key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.          | `"price": {"amount": 34999, "currency": "eur"}`                                   |

        **Lead Events**

        When submitting events for Leads, you will need to specify the Lead's `id`.

        **Metadata behavior**

        - We currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.
        - It is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.
        - There might be up to 24 hrs delay when you send a new metadata for an existing event.

        **Event de-duplication**

        The API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is **strongly recommended** to send a second granularity Unix timestamp in the `created_at` field.

        Duplicated events are responded to using the normal `202 Accepted` code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.

        ### HTTP API Responses

        - Successful responses to submitted events return `202 Accepted` with an empty body.
        - Unauthorized access will be rejected with a `401 Unauthorized` or `403 Forbidden` response code.
        - Events sent about users that cannot be found will return a `404 Not Found`.
        - Event lists containing duplicate events will have those duplicates ignored.
        - Server errors will return a `500` response code and may contain an error message in the body.

      responses:
        '202':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 913a60e0-4025-4a1a-a60f-82051a8f9fcf
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_data_event_request'
    get:
      x-fern-sdk-group-name:
        - dataEvents
      x-fern-sdk-method-name: list
      summary: List all data events
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - in: query
          name: filter
          required: true
          style: form
          explode: true
          schema:
            type: object
            oneOf:
              - title: user_id query parameter
                properties:
                  user_id:
                    type: string
                required:
                  - user_id
                additionalProperties: false
              - title: intercom_user_id query parameter
                properties:
                  intercom_user_id:
                    type: string
                required:
                  - intercom_user_id
                additionalProperties: false
              - title: email query parameter
                properties:
                  email:
                    type: string
                required:
                  - email
                additionalProperties: false
        - name: type
          in: query
          required: true
          description: The value must be user
          schema:
            type: string
        - name: summary
          in: query
          required: false
          description: summary flag
          schema:
            type: boolean
      tags:
        - Data Events
      operationId: lisDataEvents
      description: "You can only 'list' events that are less than 90 days old. Event
        counts and summaries will still include your events older than 90 days but
        you cannot 'list' these events individually if they are older than 90 days.\n\nThe
        `email` parameter value should be url encoded.\n\nYou can optionally define
        the result page size as well with the `per_page` parameter.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: event.summary
                    events: []
                    pages:
                      next: http://api.intercom.test/events?next page
                    email: user26@email.com
                    intercom_user_id: 66fd025f9ffbe52cc8b3aaf3
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
              schema:
                '$ref': '#/components/schemas/data_event_summary'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1d331cf2-3933-4007-a81e-c292880681bf
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/events/summaries':
    post:
      x-fern-sdk-group-name:
        - dataEvents
      x-fern-sdk-method-name: createSummaries
      summary: Create event summaries
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Data Events
      operationId: dataEventSummaries
      description: "Create event summaries for a user. Event summaries are used to
        track the number of times an event has occurred, the first time it occurred
        and the last time it occurred.\n\n"
      responses:
        '200':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 62219d74-e6fa-4e6e-9583-f23ed87b2324
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_data_event_summaries_request'
  '/export/content/data':
    post:
      x-fern-sdk-group-name:
        - dataExports
      x-fern-sdk-method-name: create
      summary: Create a data export
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Data Export
      operationId: createDataExport
      description: "For data exports the timeframe only includes messages sent during the
        time period and not messages that were only updated during this period.
        For example, if a message was updated yesterday but sent two days ago, you would
        need to set the created_at_after date before the message was sent to include that
        in your retrieval job.\n\nDate ranges are inclusive. Requesting data for 2018-06-01
        until 2018-06-30 will get all data for those days including those specified -
        e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: 4vvfpiq2mhutwxkv
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                '$ref': '#/components/schemas/data_export'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_data_exports_request'
            examples:
              successful:
                summary: successful
                value:
                  created_at_after: 1727839250
                  created_at_before: 1727857250
  '/export/content/data/{job_identifier}':
    get:
      x-fern-sdk-group-name:
        - dataExports
      x-fern-sdk-method-name: getStatus
      summary: Get data export status
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: job_identifier
          in: path
          description: job_identifier
          required: true
          schema:
            type: string
      tags:
        - Data Export
      operationId: getDataExport
      description: "You can view the status of your job by sending a `GET` request
        to the URL\n`https://api.intercom.io/export/content/data/{job_identifier}`
        - the `{job_identifier}` is the value returned in the response when you first
        created the export job. More on it can be seen in the Export Job Model.\n\nJobs
        expire after two days. All jobs that have completed processing (and are thus
        available to download from the provided URL) will have an expiry limit of two
        days from when the export ob completed. After this, the data will no longer be
        will no longer be available.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: f0rved8dp1h88atr
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                '$ref': '#/components/schemas/data_export'
  '/export/cancel/{job_identifier}':
    post:
      x-fern-sdk-group-name:
        - dataExports
      x-fern-sdk-method-name: cancel
      summary: Cancel a data export
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: job_identifier
          in: path
          description: job_identifier
          required: true
          schema:
            type: string
      tags:
        - Data Export
      operationId: cancelDataExport
      description: You can cancel your job
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: cuxq4lepfgt53o2m
                    status: canceled
                    download_url: ''
                    download_expires_at: ''
              schema:
                '$ref': '#/components/schemas/data_export'
  '/download/content/data/{job_identifier}':
    get:
      x-fern-sdk-group-name:
        - dataExports
      x-fern-sdk-method-name: download
      summary: Download a data export
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: job_identifier
          in: path
          description: job_identifier
          required: true
          schema:
            type: string
      tags:
        - Data Export
      operationId: downloadDataExport
      description: "When a job has a status of complete, and thus a filled download_url,
        you can download your data by hitting that provided URL, formatted like so:
        https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message
        data will be streamed continuously back down to you in a gzipped CSV format.\n\n
        You will have to specify the header Accept: `application/octet-stream` when hitting
        this endpoint.\n"
      responses:
        '200':
          description: successful
  '/messages':
    post:
      x-fern-sdk-group-name:
        - messages
      x-fern-sdk-method-name: create
      summary: Create a message
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Messages
      operationId: createMessage
      description: "You can create a message that has been initiated by an admin.
        The conversation can be either an in-app message or an email.\n\nSending for
        visitors There can be a short delay between when a contact is created and when
        a contact becomes available to be messaged through the API. A 404 Not Found
        error will be returned in this case.\n\nThis will return the Message model that
        has been created.\n\nRetrieving Associated Conversations As this is a message,
        there will be no conversation present until the contact responds. Once they do,
        until the contact responds. Once they do, you will have to search for a contact's
        conversations with the id of the message.\n"
      responses:
        '200':
          description: admin message created
          content:
            application/json:
              examples:
                user message created:
                  value:
                    type: user_message
                    id: '403918228'
                    created_at: 1727857254
                    body: hello there
                    message_type: inapp
                    conversation_id: '312'
                lead message created:
                  value:
                    type: user_message
                    id: '403918229'
                    created_at: 1727857256
                    body: hello there
                    message_type: inapp
                    conversation_id: '313'
                admin message created:
                  value:
                    type: admin_message
                    id: '10'
                    created_at: 1727857258
                    subject: hello there
                    body: this is a test message
                    message_type: inapp
                    owner:
                      type: admin
                      id: '991267179'
                      name: Joe Example
                      email: test@example.com
                      away_mode_enabled: false
                      away_mode_reassign: false
              schema:
                '$ref': '#/components/schemas/message'
        '400':
          description: No body supplied for email message
          content:
            application/json:
              examples:
                No body supplied for message:
                  value:
                    type: error.list
                    request_id: c0c38cb5-63d4-44e1-b418-4eaba75fdb7c
                    errors:
                      - code: parameter_invalid
                        message: Body is required
                No body supplied for email message:
                  value:
                    type: error.list
                    request_id: 18a870a1-2994-4b9c-b5e0-cb36e3b6edce
                    errors:
                      - code: parameter_invalid
                        message: Body is required
              schema:
                '$ref': '#/components/schemas/error'
        '422':
          description: No subject supplied for email message
          content:
            application/json:
              examples:
                No subject supplied for email message:
                  value:
                    type: error.list
                    request_id: ec3fd41b-0f1c-4146-92bf-429d634b0476
                    errors:
                      - code: parameter_not_found
                        message: No subject supplied for email message
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b44aa0fc-e600-4830-bef0-a16e1e7180b8
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 3ad5b261-9a63-4571-b2ed-5c9aa98a5003
                    errors:
                      - code: api_plan_restricted
                        message: Active subscription needed.
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_message_request'
            examples:
              user_message_created:
                summary: user message created
                value:
                  from:
                    type: user
                    id: 66fd02669ffbe52cc8b3aaf8
                  body: hello there
                  referer: https://twitter.com/bob
              lead_message_created:
                summary: lead message created
                value:
                  from:
                    type: lead
                    id: 66fd02689ffbe52cc8b3aaf9
                  body: hello there
                  referer: https://twitter.com/bob
              admin_message_created:
                summary: admin message created
                value:
                  from:
                    type: admin
                    id: '991267179'
                  to:
                    type: user
                    id: 66fd026a9ffbe52cc8b3aafa
                  message_type: conversation
                  body: heyy
              no_body_supplied_for_message:
                summary: No body supplied for message
                value:
                  from:
                    type: admin
                    id: '991267181'
                  to:
                    type: user
                    id: 66fd026b9ffbe52cc8b3aafb
                  message_type: inapp
                  body:
                  subject: hello there
              no_subject_supplied_for_email_message:
                summary: No subject supplied for email message
                value:
                  from:
                    type: admin
                    id: '991267182'
                  to:
                    type: user
                    user_id: '70'
                  message_type: email
                  body: hey there
              no_body_supplied_for_email_message:
                summary: No body supplied for email message
                value:
                  from:
                    type: admin
                    id: '991267183'
                  to:
                    type: user
                    id: 66fd026d9ffbe52cc8b3aafd
                  message_type: email
                  body:
                  subject: hello there
  '/news/news_items':
    get:
      x-fern-sdk-group-name:
        - news
        - newsItems
      x-fern-sdk-method-name: list
      summary: List all news items
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - News
      operationId: listNewsItems
      description: You can fetch a list of all news items
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                      - id: '15'
                        type: news-item
                        workspace_id: this_is_an_id530_that_should_be_at_least_
                        title: We have news
                        body: '<p>Hello there,</p>'
                        sender_id: 991267188
                        state: draft
                        labels: []
                        cover_image_url:
                        reactions:
                          -
                          -
                          -
                          -
                        deliver_silently: false
                        created_at: 1727857264
                        updated_at: 1727857264
                        newsfeed_assignments: []
                      - id: '16'
                        type: news-item
                        workspace_id: this_is_an_id530_that_should_be_at_least_
                        title: We have news
                        body: '<p>Hello there,</p>'
                        sender_id: 991267190
                        state: draft
                        labels: []
                        cover_image_url:
                        reactions:
                          -
                          -
                          -
                          -
                        deliver_silently: false
                        created_at: 1727857264
                        updated_at: 1727857264
                        newsfeed_assignments: []
                    total_count: 2
              schema:
                '$ref': '#/components/schemas/paginated_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: d485bf96-c6e6-445c-84d0-5606708e4474
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - news
        - newsItems
      x-fern-sdk-method-name: create
      summary: Create a news item
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - News
      operationId: createNewsItem
      description: You can create a news item
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '19'
                    type: news-item
                    workspace_id: this_is_an_id534_that_should_be_at_least_
                    title: Halloween is here!
                    body: '<p>New costumes in store for this spooky season</p>'
                    sender_id: 991267197
                    state: live
                    labels:
                      - New
                      - Product
                      - Update
                    cover_image_url:
                    reactions:
                      - "\U0001F606"
                      - "\U0001F605"
                    deliver_silently: true
                    created_at: 1727857267
                    updated_at: 1727857267
                    newsfeed_assignments:
                      - newsfeed_id: 28
                        published_at: 1664638214
              schema:
                '$ref': '#/components/schemas/news_item'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c510fe9a-3843-4446-b25c-48cf23e4a0ea
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/news_item_request'
            examples:
              successful:
                summary: successful
                value:
                  title: Halloween is here!
                  body: '<p>New costumes in store for this spooky season</p>'
                  labels:
                    - Product
                    - Update
                    - New
                  sender_id: 991267197
                  deliver_silently: true
                  reactions:
                    - "\U0001F606"
                    - "\U0001F605"
                  state: live
                  newsfeed_assignments:
                    - newsfeed_id: 28
                      published_at: 1664638214
  '/news/news_items/{id}':
    get:
      x-fern-sdk-group-name:
        - news
        - newsItems
      x-fern-sdk-method-name: get
      summary: Get a news item
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the news item which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - News
      operationId: retrieveNewsItem
      description: You can fetch the details of a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '20'
                    type: news-item
                    workspace_id: this_is_an_id538_that_should_be_at_least_
                    title: We have news
                    body: '<p>Hello there,</p>'
                    sender_id: 991267200
                    state: live
                    labels: []
                    cover_image_url:
                    reactions:
                      -
                      -
                      -
                      -
                    deliver_silently: false
                    created_at: 1727857269
                    updated_at: 1727857269
                    newsfeed_assignments:
                      - newsfeed_id: 30
                        published_at: 1727857269
              schema:
                '$ref': '#/components/schemas/news_item'
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: f68cd910-d16a-498d-9711-1af86e2348a0
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dd9fe9e2-c88c-42e7-82ce-08ed3d8ee0e0
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - news
        - newsItems
      x-fern-sdk-method-name: update
      summary: Update a news item
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the news item which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - News
      operationId: updateNewsItem
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '23'
                    type: news-item
                    workspace_id: this_is_an_id544_that_should_be_at_least_
                    title: Christmas is here!
                    body: '<p>New gifts in store for the jolly season</p>'
                    sender_id: 991267208
                    state: live
                    labels: []
                    cover_image_url:
                    reactions:
                      - "\U0001F61D"
                      - "\U0001F602"
                    deliver_silently: false
                    created_at: 1727857272
                    updated_at: 1727857272
                    newsfeed_assignments: []
              schema:
                '$ref': '#/components/schemas/news_item'
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: 6d5f0200-a2bd-458f-9812-fe2d09dc59a5
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6deaed9c-3eeb-4da9-8fe7-990bb8ec2006
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/news_item_request'
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: '<p>New gifts in store for the jolly season</p>'
                  sender_id: 991267208
                  reactions:
                    - "\U0001F61D"
                    - "\U0001F602"
              news_item_not_found:
                summary: News Item Not Found
                value:
                  title: Christmas is here!
                  body: '<p>New gifts in store for the jolly season</p>'
                  sender_id: 991267211
                  reactions:
                    - "\U0001F61D"
                    - "\U0001F602"
    delete:
      x-fern-sdk-group-name:
        - news
        - newsItems
      x-fern-sdk-method-name: delete
      summary: Delete a news item
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the news item which is given by Intercom.
          example: 123
          schema:
            type: integer
      tags:
        - News
      operationId: deleteNewsItem
      description: You can delete a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '26'
                    object: news-item
                    deleted: true
              schema:
                '$ref': '#/components/schemas/deleted_object'
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: ca1cea72-f3da-442c-a726-18a39cd9f372
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fb278bb8-7a96-4d09-b032-90fecda2410e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/news/newsfeeds/{id}/items':
    get:
      x-fern-sdk-group-name:
        - news
        - newsItems
        - newsFeeds
      x-fern-sdk-method-name: list
      summary: List all live newsfeed items
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the news feed item which is given by
            Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - News
      operationId: listLiveNewsfeedItems
      description: You can fetch a list of all news items that are live on a given
        newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 20
                      total_pages: 0
                      type: pages
                    data: []
                    total_count: 0
              schema:
                '$ref': '#/components/schemas/paginated_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 0c6d76c8-bdfc-4e54-a6d6-9b8d551a3aba
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/news/newsfeeds':
    get:
      x-fern-sdk-group-name:
        - news
        - newsFeeds
      x-fern-sdk-method-name: list
      summary: List all newsfeeds
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - News
      operationId: listNewsfeeds
      description: You can fetch a list of all newsfeeds
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                      - id: '44'
                        type: newsfeed
                        name: Visitor Feed
                        created_at: 1727857280
                        updated_at: 1727857280
                      - id: '43'
                        type: newsfeed
                        name: Visitor Feed
                        created_at: 1727857279
                        updated_at: 1727857279
                    total_count: 2
              schema:
                '$ref': '#/components/schemas/paginated_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6f2be0c1-27aa-4397-b31a-0169dbe542a3
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/news/newsfeeds/{id}':
    get:
      x-fern-sdk-group-name:
        - news
        - newsFeeds
      x-fern-sdk-method-name: get
      summary: Retrieve a newsfeed
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the news feed item which is given by
            Intercom.
          example: '123'
          schema:
            type: string
      tags:
        - News
      operationId: retrieveNewsfeed
      description: You can fetch the details of a single newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '47'
                    type: newsfeed
                    name: Visitor Feed
                    created_at: 1727857281
                    updated_at: 1727857281
              schema:
                '$ref': '#/components/schemas/newsfeed'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 538c5dc6-7fbd-4e7f-b8f9-6a080d761895
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/notes/{id}':
    get:
      x-fern-sdk-group-name:
        - notes
      x-fern-sdk-method-name: get
      summary: Get a note
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier of a given note
          example: 1
          schema:
            type: integer
      tags:
        - Notes
      operationId: retrieveNote
      description: You can fetch the details of a single note.
      responses:
        '200':
          description: Note found
          content:
            application/json:
              examples:
                Note found:
                  value:
                    type: note
                    id: '24'
                    created_at: 1727166083
                    contact:
                      type: contact
                      id: 66fd02839ffbe52cc8b3ab00
                    author:
                      type: admin
                      id: '991267227'
                      name: Jane Example
                      email: email@example.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: '<p>This is a note.</p>'
              schema:
                '$ref': '#/components/schemas/note'
        '404':
          description: Note not found
          content:
            application/json:
              examples:
                Note not found:
                  value:
                    type: error.list
                    request_id: 33d614dd-e3bb-47a0-ac62-c9011db026bf
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: eecbbfee-4640-4c7e-8b04-03bed46d7341
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/segments':
    get:
      x-fern-sdk-group-name:
        - segments
      x-fern-sdk-method-name: list
      summary: List all segments
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: include_count
          in: query
          required: false
          description: It includes the count of contacts that belong to each segment.
          example: true
          schema:
            type: boolean
      tags:
        - Segments
      operationId: listSegments
      description: You can fetch a list of all segments.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment.list
                    segments:
                      - type: segment
                        id: 66fd02869ffbe52cc8b3ab03
                        name: John segment
                        created_at: 1727857286
                        updated_at: 1727857286
                        person_type: user
                      - type: segment
                        id: 66fd02869ffbe52cc8b3ab04
                        name: Jane segment
                        created_at: 1727857286
                        updated_at: 1727857286
                        person_type: user
              schema:
                '$ref': '#/components/schemas/segment_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ce940eba-89d4-4ac7-a629-0b9c1b53de37
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/segments/{id}':
    get:
      x-fern-sdk-group-name:
        - segments
      x-fern-sdk-method-name: get
      summary: Get a segment
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identified of a given segment.
          example: '123'
          schema:
            type: string
      tags:
        - Segments
      operationId: retrieveSegment
      description: You can fetch the details of a single segment.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment
                    id: 66fd02889ffbe52cc8b3ab07
                    name: Joe Example
                    created_at: 1727857288
                    updated_at: 1727857288
                    person_type: user
              schema:
                '$ref': '#/components/schemas/segment'
        '404':
          description: Segment not found
          content:
            application/json:
              examples:
                Segment not found:
                  value:
                    type: error.list
                    request_id: 07e00389-c67c-4cc7-ad63-6cdd2c3c6460
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 77dcef51-06dd-4525-bbf8-6044f11b08cc
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/subscription_types':
    get:
      x-fern-sdk-group-name:
        - subscriptionTypes
      x-fern-sdk-method-name: list
      summary: List subscription types
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Subscription Types
      operationId: listSubscriptionTypes
      description: You can list all subscription types. A list of subscription type
        objects will be returned.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                      - type: subscription
                        id: '91'
                        state: live
                        consent_type: opt_out
                        default_translation:
                          name: Newsletters
                          description: Lorem ipsum dolor sit amet
                          locale: en
                        translations:
                          - name: Newsletters
                            description: Lorem ipsum dolor sit amet
                            locale: en
                        content_types:
                          - email
              schema:
                '$ref': '#/components/schemas/subscription_type_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7c62cfef-e04c-44bc-a19f-07941561885f
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/phone_call_redirects':
    post:
      x-fern-sdk-group-name:
        - phone
      x-fern-sdk-method-name: createSwitch
      summary: Create a phone Switch
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Switch
      operationId: createPhoneSwitch
      description: |
        You can use the API to deflect phone calls to the Intercom Messenger.
        Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.

        If custom attributes are specified, they will be added to the user or lead's custom data attributes.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    url: http://via.intercom.io/msgr/24f320ac-246f-4386-a94e-f04821314dc1
                    type: phone_call_redirect
              schema:
                '$ref': '#/components/schemas/phone_switch'
        '400':
          description: bad request - invalid number
          content:
            application/json:
              examples:
                bad request - exception sending sms:
                  value:
                    error_key: sms_failed
                    message: SMS was not sent due to an unknown error
                bad request - invalid number:
                  value:
                    error_key: invalid_phone_number
                    message: Invalid phone number
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                unprocessable entity:
                  value:
                    error_key: some_error
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 937454ce-d9af-4b74-8763-8cfe11dce51c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_phone_switch_request'
            examples:
              successful:
                summary: successful
                value:
                  phone: '+353832345678'
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_exception_sending_sms:
                summary: bad request - exception sending sms
                value:
                  phone: '+353832345678'
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_invalid_number:
                summary: bad request - invalid number
                value:
                  phone: '+353832345678'
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              unprocessable_entity:
                summary: unprocessable entity
                value:
                  phone: '+40241100100'
                  custom_attributes:
                    issue_type: Billing
                    priority: High
  '/tags':
    get:
      x-fern-sdk-group-name:
        - tags
      x-fern-sdk-method-name: list
      summary: List all tags
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Tags
      operationId: listTags
      description: "You can fetch a list of all tags for a given workspace.\n\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: tag
                        id: '69'
                        name: Manual tag 1
              schema:
                '$ref': '#/components/schemas/tag_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 728e6de8-83df-4466-a83f-0dbd68d87b12
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      summary: Create or update a tag, Tag or untag companies, Tag contacts
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Tags
      operationId: createTag
      description: |
        You can use this endpoint to perform the following operations:

          **1. Create a new tag:** You can create a new tag by passing in the tag name as specified in "Create or Update Tag Request Payload" described below.

          **2. Update an existing tag:** You can update an existing tag by passing the id of the tag as specified in "Create or Update Tag Request Payload" described below.

          **3. Tag Companies:** You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in "Tag Company Request Payload" described below. Also, if the tag doesn't exist then a new one will be created automatically.

          **4. Untag Companies:** You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in "Untag Company Request Payload" described below.

          **5. Tag Multiple Users:** You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in "Tag Users Request Payload" described below.

        Each operation will return a tag object.
      responses:
        '200':
          description: Action successful
          content:
            application/json:
              examples:
                Action successful:
                  value:
                    type: tag
                    id: '72'
                    name: test
              schema:
                '$ref': '#/components/schemas/tag'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                Invalid parameters:
                  value:
                    type: error.list
                    request_id: 47e1978a-ce1c-40f2-91c6-dc7df400667a
                    errors:
                      - code: parameter_invalid
                        message: invalid tag parameters
              schema:
                '$ref': '#/components/schemas/error'
        '404':
          description: User  not found
          content:
            application/json:
              examples:
                Company not found:
                  value:
                    type: error.list
                    request_id: c09821b3-0d4c-48cd-b098-bec827484232
                    errors:
                      - code: company_not_found
                        message: Company Not Found
                User  not found:
                  value:
                    type: error.list
                    request_id: c2658060-aa56-47ef-a501-c69a480dc7d4
                    errors:
                      - code: not_found
                        message: User Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b221bfd5-2423-4365-892b-c8766ad97701
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/create_or_update_tag_request'
                - '$ref': '#/components/schemas/tag_company_request'
                - '$ref': '#/components/schemas/untag_company_request'
                - '$ref': '#/components/schemas/tag_multiple_users_request'
            examples:
              action_successful:
                summary: Action successful
                value:
                  name: test
              invalid_parameters:
                summary: Invalid parameters
                value:
                  test: invalid
              company_not_found:
                summary: Company not found
                value:
                  name: test
                  companies:
                    - company_id: '123'
              user_not_found:
                summary: User  not found
                value:
                  name: test
                  users:
                    - id: '123'
  '/tags/{id}':
    get:
      x-fern-sdk-group-name:
        - tags
      x-fern-sdk-method-name: find
      summary: Find a specific tag
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: The unique identifier of a given tag
          example: '123'
          required: true
          schema:
            type: string
      tags:
        - Tags
      operationId: findTag
      description: |
        You can fetch the details of tags that are on the workspace by their id.
        This will return a tag object.
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              examples:
                Tag found:
                  value:
                    type: tag
                    id: '80'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Tag not found:
                  value:
                    type: error.list
                    request_id: d016c66d-e66c-4574-9d6e-d5523444d8a2
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 75ecbc66-a998-4d5d-9450-44fc56846a54
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    delete:
      x-fern-sdk-group-name:
        - tags
      x-fern-sdk-method-name: delete
      summary: Delete tag
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          description: The unique identifier of a given tag
          example: '123'
          required: true
          schema:
            type: string
      tags:
        - Tags
      operationId: deleteTag
      description: You can delete the details of tags that are on the workspace by
        passing in the id.
      responses:
        '200':
          description: Successful
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Resource not found:
                  value:
                    type: error.list
                    request_id: 5b4fe9e5-b5bb-4249-ae2b-0d8d87cf0490
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '400':
          description: Tag has dependent objects
          content:
            application/json:
              examples:
                Tag has dependent objects:
                  value:
                    type: error.list
                    request_id: 05547561-8902-4734-a1d1-67e9019d1847
                    errors:
                      - code: tag_has_dependent_objects
                        message: 'Unable to delete Tag with dependent objects. Segments:
                          Seg 1.'
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 89c8f6cd-9ee0-403b-b42e-605022cbb921
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/teams':
    get:
      x-fern-sdk-group-name:
        - teams
      x-fern-sdk-method-name: list
      summary: List all teams
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Teams
      operationId: listTeams
      description: This will return a list of team objects for the App.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team.list
                    teams: []
              schema:
                '$ref': '#/components/schemas/team_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 55d69964-d923-4702-ae43-dd82b459469c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/teams/{id}':
    get:
      x-fern-sdk-group-name:
        - teams
      x-fern-sdk-method-name: get
      summary: Get a team
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier of a given team.
          example: '123'
          schema:
            type: string
      tags:
        - Teams
      operationId: retrieveTeam
      description: You can fetch the details of a single team, containing an array
        of admins that belong to this team.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team
                    id: '991267265'
                    name: team 1
                    admin_ids: []
              schema:
                '$ref': '#/components/schemas/team'
        '404':
          description: Team not found
          content:
            application/json:
              examples:
                Team not found:
                  value:
                    type: error.list
                    request_id: 37abcb7a-7e0f-4c09-a1a6-5d27bc16708c
                    errors:
                      - code: team_not_found
                        message: Team not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: effb9bb2-e20b-444c-810a-ef8e3840ee6c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/ticket_states':
    get:
      x-fern-sdk-group-name:
        - ticketStates
      x-fern-sdk-method-name: list
      summary: List all ticket states
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Ticket States
      operationId: listTicketStates
      description: You can get a list of all ticket states for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: ticket_state
                        id: '5413'
                        category: submitted
                        internal_label: Submitted
                        external_label: Submitted
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '51'
                              name: feature-request
                              description: product feature requests.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '52'
                              name: bug
                              description: something in-product isn't working.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '54'
                              name: product-question
                              description: need support understanding product capabilities.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
                      - type: ticket_state
                        id: '5414'
                        category: in_progress
                        internal_label: In progress
                        external_label: In progress
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '51'
                              name: my-ticket-type-3
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '52'
                              name: my-ticket-type-4
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '54'
                              name: my-ticket-type-6
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
                      - type: ticket_state
                        id: '5415'
                        category: waiting_on_customer
                        internal_label: Waiting on customer
                        external_label: Waiting on you
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '51'
                              name: my-ticket-type-3
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '52'
                              name: my-ticket-type-4
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '54'
                              name: my-ticket-type-6
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
                      - type: ticket_state
                        id: '5416'
                        category: resolved
                        internal_label: Resolved
                        external_label: Resolved
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '51'
                              name: my-ticket-type-3
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '52'
                              name: my-ticket-type-4
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '54'
                              name: my-ticket-type-6
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
                      - type: ticket_state
                        id: '5417'
                        category: submitted
                        internal_label: Admin label 1
                        external_label: User label
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '51'
                              name: my-ticket-type-3
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                            - type: ticket_type
                              id: '52'
                              name: my-ticket-type-4
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
                      - type: ticket_state
                        id: '5418'
                        category: submitted
                        internal_label: Admin label 2
                        external_label: User label
                        ticket_types:
                          type: list
                          data:
                            - type: ticket_type
                              id: '54'
                              name: my-ticket-type-6
                              description: my ticket type description is awesome.
                              icon: "\U0001F981"
                              archived: false
                              is_internal: false
                              category: Back-office
                        archived: false
              schema:
                '$ref': '#/components/schemas/ticket_state_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dbd44320-b1c6-4a0f-a798-2b0f61a7716d
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/ticket_types/{ticket_type_id}/attributes':
    post:
      x-fern-sdk-group-name:
        - ticketTypes
        - attributes
      x-fern-sdk-method-name: create
      summary: Create a new attribute for a ticket type
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: ticket_type_id
          in: path
          required: true
          description: The unique identifier for the ticket type which is given by Intercom.
          schema:
            type: string
      tags:
        - Ticket Type Attributes
      description: You can create a new attribute for a ticket type.
      operationId: createTicketTypeAttribute
      responses:
        '200':
          description: Ticket Type Attribute created
          content:
            application/json:
              examples:
                Ticket Type Attribute created:
                  value:
                    type: ticket_type_attribute
                    id: '106'
                    workspace_id: this_is_an_id640_that_should_be_at_least_
                    name: Attribute Title
                    description: Attribute Description
                    data_type: string
                    input_options:
                      multiline: false
                    order: 2
                    required_to_create: false
                    required_to_create_for_contacts: false
                    visible_on_create: true
                    visible_to_contacts: true
                    default: false
                    ticket_type_id: 59
                    archived: false
                    created_at: 1727857320
                    updated_at: 1727857320
              schema:
                '$ref': '#/components/schemas/ticket_type_attribute'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 94f6ab96-e21f-408c-a8b3-11737aa7ce3c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_ticket_type_attribute_request'
            examples:
              ticket_type_attribute_created:
                summary: Ticket Type Attribute created
                value:
                  name: Attribute Title
                  description: Attribute Description
                  data_type: string
                  required_to_create: false
  '/ticket_types/{ticket_type_id}/attributes/{id}':
    put:
      x-fern-sdk-group-name:
        - ticketTypes
        - attributes
      x-fern-sdk-method-name: update
      summary: Update an existing attribute for a ticket type
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: ticket_type_id
          in: path
          required: true
          description: The unique identifier for the ticket type which is given by Intercom.
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket type attribute which is
            given by Intercom.
          schema:
            type: string
      tags:
        - Ticket Type Attributes
      description: You can update an existing attribute for a ticket type.
      operationId: updateTicketTypeAttribute
      responses:
        '200':
          description: Ticket Type Attribute updated
          content:
            application/json:
              examples:
                Ticket Type Attribute updated:
                  value:
                    type: ticket_type_attribute
                    id: '111'
                    workspace_id: this_is_an_id644_that_should_be_at_least_
                    name: name
                    description: New Attribute Description
                    data_type: string
                    order: 0
                    required_to_create: false
                    required_to_create_for_contacts: false
                    visible_on_create: false
                    visible_to_contacts: false
                    default: false
                    ticket_type_id: 61
                    archived: false
                    created_at: 1727857322
                    updated_at: 1727857322
              schema:
                '$ref': '#/components/schemas/ticket_type_attribute'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7fb51e03-1418-41c8-8439-0a70b46f8d2b
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_ticket_type_attribute_request'
            examples:
              ticket_type_attribute_updated:
                summary: Ticket Type Attribute updated
                value:
                  description: New Attribute Description
  '/ticket_types':
    get:
      x-fern-sdk-group-name:
        - ticketTypes
      x-fern-sdk-method-name: list
      summary: List all ticket types
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Ticket Types
      operationId: listTicketTypes
      description: You can get a list of all ticket types for a workspace.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                      - type: ticket_type
                        id: '63'
                        name: Bug Report
                        description: Bug Report Template
                        icon: "\U0001F39F️"
                        workspace_id: this_is_an_id648_that_should_be_at_least_
                        archived: false
                        created_at: 1727857323
                        updated_at: 1727857323
                        is_internal: false
                        ticket_type_attributes:
                          type: list
                          data:
                            - type: ticket_type_attribute
                              id: '114'
                              workspace_id: this_is_an_id648_that_should_be_at_least_
                              name: _default_title_
                              description: ''
                              data_type: string
                              input_options:
                                multiline: false
                              order: 0
                              required_to_create: false
                              required_to_create_for_contacts: false
                              visible_on_create: true
                              visible_to_contacts: true
                              default: true
                              ticket_type_id: 63
                              archived: false
                              created_at: 1727857323
                              updated_at: 1727857323
                            - type: ticket_type_attribute
                              id: '116'
                              workspace_id: this_is_an_id648_that_should_be_at_least_
                              name: name
                              description: description
                              data_type: string
                              input_options:
                              order: 0
                              required_to_create: false
                              required_to_create_for_contacts: false
                              visible_on_create: false
                              visible_to_contacts: false
                              default: false
                              ticket_type_id: 63
                              archived: false
                              created_at: 1727857324
                              updated_at: 1727857324
                            - type: ticket_type_attribute
                              id: '115'
                              workspace_id: this_is_an_id648_that_should_be_at_least_
                              name: _default_description_
                              description: ''
                              data_type: string
                              input_options:
                                multiline: true
                              order: 1
                              required_to_create: false
                              required_to_create_for_contacts: false
                              visible_on_create: true
                              visible_to_contacts: true
                              default: true
                              ticket_type_id: 63
                              archived: false
                              created_at: 1727857323
                              updated_at: 1727857323
                        category: Customer
                        ticket_states:
                          type: list
                          data:
                            - type: ticket_state
                              id: '5465'
                              category: submitted
                              internal_label: Submitted
                              external_label: Submitted
                            - type: ticket_state
                              id: '5466'
                              category: in_progress
                              internal_label: In progress
                              external_label: In progress
                            - type: ticket_state
                              id: '5467'
                              category: waiting_on_customer
                              internal_label: Waiting on customer
                              external_label: Waiting on you
                            - type: ticket_state
                              id: '5468'
                              category: resolved
                              internal_label: Resolved
                              external_label: Resolved
              schema:
                '$ref': '#/components/schemas/ticket_type_list'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c8086fd8-b402-4c44-a87e-11fbea550dea
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    post:
      x-fern-sdk-group-name:
        - ticketTypes
      x-fern-sdk-method-name: create
      summary: Create a ticket type
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Ticket Types
      operationId: createTicketType
      description: "You can create a new ticket type.\n> \U0001F4D8 Creating ticket
        types.\n>\n> Every ticket type will be created with two default attributes:
        _default_title_ and _default_description_.\n> For the `icon` propery, use
        an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)\n"
      responses:
        '200':
          description: Ticket type created
          content:
            application/json:
              examples:
                Ticket type created:
                  value:
                    type: ticket_type
                    id: '66'
                    name: Customer Issue
                    description: Customer Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id652_that_should_be_at_least_
                    archived: false
                    created_at: 1727857326
                    updated_at: 1727857326
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                        - type: ticket_type_attribute
                          id: '123'
                          workspace_id: this_is_an_id652_that_should_be_at_least_
                          name: _default_title_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: false
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 66
                          archived: false
                          created_at: 1727857326
                          updated_at: 1727857326
                        - type: ticket_type_attribute
                          id: '124'
                          workspace_id: this_is_an_id652_that_should_be_at_least_
                          name: _default_description_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: true
                          order: 1
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 66
                          archived: false
                          created_at: 1727857326
                          updated_at: 1727857326
                    category: Customer
                    ticket_states:
                      type: list
                      data:
                        - type: ticket_state
                          id: '5481'
                          category: submitted
                          internal_label: Submitted
                          external_label: Submitted
                        - type: ticket_state
                          id: '5482'
                          category: in_progress
                          internal_label: In progress
                          external_label: In progress
                        - type: ticket_state
                          id: '5483'
                          category: waiting_on_customer
                          internal_label: Waiting on customer
                          external_label: Waiting on you
                        - type: ticket_state
                          id: '5484'
                          category: resolved
                          internal_label: Resolved
                          external_label: Resolved
              schema:
                '$ref': '#/components/schemas/ticket_type'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b83bb13d-ae98-4163-91c3-b067c573bbe2
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/create_ticket_type_request'
            examples:
              ticket_type_created:
                summary: Ticket type created
                value:
                  name: Customer Issue
                  description: Customer Report Template
                  icon: "\U0001F39F️"
                  category: Customer
  '/ticket_types/{id}':
    get:
      x-fern-sdk-group-name:
        - ticketTypes
      x-fern-sdk-method-name: get
      summary: Get a ticket type
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket type which is given by Intercom.
          schema:
            type: string
      tags:
        - Ticket Types
      operationId: getTicketType
      description: You can fetch the details of a single ticket type.
      responses:
        '200':
          description: Ticket type found
          content:
            application/json:
              examples:
                Ticket type found:
                  value:
                    type: ticket_type
                    id: '68'
                    name: Bug Report
                    description: Bug Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id656_that_should_be_at_least_
                    archived: false
                    created_at: 1727857327
                    updated_at: 1727857327
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                        - type: ticket_type_attribute
                          id: '128'
                          workspace_id: this_is_an_id656_that_should_be_at_least_
                          name: _default_title_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: false
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 68
                          archived: false
                          created_at: 1727857327
                          updated_at: 1727857327
                        - type: ticket_type_attribute
                          id: '130'
                          workspace_id: this_is_an_id656_that_should_be_at_least_
                          name: name
                          description: description
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: false
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 68
                          archived: false
                          created_at: 1727857328
                          updated_at: 1727857328
                        - type: ticket_type_attribute
                          id: '129'
                          workspace_id: this_is_an_id656_that_should_be_at_least_
                          name: _default_description_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: true
                          order: 1
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 68
                          archived: false
                          created_at: 1727857327
                          updated_at: 1727857327
                    category: Customer
                    ticket_states:
                      type: list
                      data:
                        - type: ticket_state
                          id: '5497'
                          category: submitted
                          internal_label: Submitted
                          external_label: Submitted
                        - type: ticket_state
                          id: '5498'
                          category: in_progress
                          internal_label: In progress
                          external_label: In progress
                        - type: ticket_state
                          id: '5499'
                          category: waiting_on_customer
                          internal_label: Waiting on customer
                          external_label: Waiting on you
                        - type: ticket_state
                          id: '5500'
                          category: resolved
                          internal_label: Resolved
                          external_label: Resolved
              schema:
                '$ref': '#/components/schemas/ticket_type'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fcd072d9-9d08-4ec8-8e0e-1b539b66bd02
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    put:
      x-fern-sdk-group-name:
        - ticketTypes
      x-fern-sdk-method-name: update
      summary: Update a ticket type
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket type which is given by Intercom.
          schema:
            type: string
      tags:
        - Ticket Types
      operationId: updateTicketType
      description: "\nYou can update a ticket type.\n\n> \U0001F4D8 Updating a ticket
        type.\n>\n> For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)\n"
      responses:
        '200':
          description: Ticket type updated
          content:
            application/json:
              examples:
                Ticket type updated:
                  value:
                    type: ticket_type
                    id: '70'
                    name: Bug Report 2
                    description: Bug Report Template
                    icon: "\U0001F39F️"
                    workspace_id: this_is_an_id660_that_should_be_at_least_
                    archived: false
                    created_at: 1727857329
                    updated_at: 1727857330
                    is_internal: false
                    ticket_type_attributes:
                      type: list
                      data:
                        - type: ticket_type_attribute
                          id: '134'
                          workspace_id: this_is_an_id660_that_should_be_at_least_
                          name: _default_title_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: false
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 70
                          archived: false
                          created_at: 1727857329
                          updated_at: 1727857329
                        - type: ticket_type_attribute
                          id: '136'
                          workspace_id: this_is_an_id660_that_should_be_at_least_
                          name: name
                          description: description
                          data_type: string
                          input_options:
                          order: 0
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: false
                          visible_to_contacts: false
                          default: false
                          ticket_type_id: 70
                          archived: false
                          created_at: 1727857329
                          updated_at: 1727857329
                        - type: ticket_type_attribute
                          id: '135'
                          workspace_id: this_is_an_id660_that_should_be_at_least_
                          name: _default_description_
                          description: ''
                          data_type: string
                          input_options:
                            multiline: true
                          order: 1
                          required_to_create: false
                          required_to_create_for_contacts: false
                          visible_on_create: true
                          visible_to_contacts: true
                          default: true
                          ticket_type_id: 70
                          archived: false
                          created_at: 1727857329
                          updated_at: 1727857329
                    category: Customer
                    ticket_states:
                      type: list
                      data:
                        - type: ticket_state
                          id: '5513'
                          category: submitted
                          internal_label: Submitted
                          external_label: Submitted
                        - type: ticket_state
                          id: '5514'
                          category: in_progress
                          internal_label: In progress
                          external_label: In progress
                        - type: ticket_state
                          id: '5515'
                          category: waiting_on_customer
                          internal_label: Waiting on customer
                          external_label: Waiting on you
                        - type: ticket_state
                          id: '5516'
                          category: resolved
                          internal_label: Resolved
                          external_label: Resolved
              schema:
                '$ref': '#/components/schemas/ticket_type'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8fb6d693-a5a9-4cea-bf06-361fcbf8e3b9
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_ticket_type_request'
            examples:
              ticket_type_updated:
                summary: Ticket type updated
                value:
                  name: Bug Report 2
  '/tickets/{id}/reply':
    post:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: reply
      summary: Reply to a ticket
      operationId: replyTicket
      description: You can reply to a ticket with a message from an admin or on behalf
        of a contact, or with a note for admins.
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          schema:
            title: Ticket ID
            type: string
            description: The id of the ticket to target.
            example: '123'
      tags:
        - Tickets
      responses:
        '400':
          description: User reply
          content:
            application/json:
              examples:
                User reply:
                  value:
                    type: error.list
                    request_id: 97e531a7-65bf-4cb3-a108-ea68c7ec4f9a
                    errors:
                      - code: parameter_mismatch
                        message: User replies are not allowed on Backoffice tickets
              schema:
                '$ref': '#/components/schemas/error'
        '200':
          description: Admin quick_reply reply
          content:
            application/json:
              examples:
                Admin note reply:
                  value:
                    type: ticket_part
                    id: '92'
                    part_type: note
                    body: |-
                      <h2>An Unordered HTML List</h2>
                      <ul>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                      </ul>
                      <h2>An Ordered HTML List</h2>
                      <ol>
                      <li>Coffee</li>
                      <li>Tea</li>
                      <li>Milk</li>
                      </ol>
                    created_at: 1727857342
                    updated_at: 1727857342
                    author:
                      id: '991267306'
                      type: admin
                      name: Joe Example
                      email: email@example.com
                    attachments: []
                    redacted: false
                Admin quick_reply reply:
                  value:
                    type: ticket_part
                    id: '94'
                    part_type: quick_reply
                    created_at: 1727857348
                    updated_at: 1727857348
                    author:
                      id: '991267311'
                      type: admin
                      name: Jane Example
                      email: email@example.com
                    attachments: []
                    redacted: false
              schema:
                '$ref': '#/components/schemas/ticket_reply'
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: a0ee157b-43d6-4a68-902b-e32c13214566
                    errors:
                      - code: not_found
                        message: Resource Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1613ae6b-4f02-4134-a9a2-3087a5430fd0
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - '$ref': '#/components/schemas/contact_reply_ticket_request'
                - '$ref': '#/components/schemas/admin_reply_ticket_request'
              properties:
                skip_notifications:
                  type: boolean
                  description: Option to disable notifications when replying to a
                    Ticket.
                  example: true
            examples:
              user_reply:
                summary: User reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 66fd02b89ffbe52cc8b3ab2a
                  body: Thanks again :)
              admin_note_reply:
                summary: Admin note reply
                value:
                  message_type: note
                  type: admin
                  admin_id: 991267306
                  body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>
                    \  <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>
                    \ <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>
                    \  </body> </html>"
              admin_quick_reply_reply:
                summary: Admin quick_reply reply
                value:
                  message_type: quick_reply
                  type: admin
                  admin_id: 991267311
                  reply_options:
                    - text: 'Yes'
                      uuid: 992196aa-7c1e-4efa-b010-898e540e31e9
                    - text: 'No'
                      uuid: a2840bb0-6acc-42e5-9d14-f561ae7015f5
              not_found:
                summary: Not found
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 66fd02c69ffbe52cc8b3ab2d
                  body: Thanks again :)
  '/tickets/{ticket_id}/tags':
    post:
      x-fern-sdk-group-name:
        - tickets
        - tags
      x-fern-sdk-method-name: addTag
      summary: Add tag to a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: ticket_id
          in: path
          description: ticket_id
          example: '64619700005694'
          required: true
          schema:
            type: string
      tags:
        - Tags
        - Tickets
      operationId: attachTagToTicket
      description: You can tag a specific ticket. This will return a tag object for
        the tag that was added to the ticket.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '88'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Ticket not found
          content:
            application/json:
              examples:
                Ticket not found:
                  value:
                    type: error.list
                    request_id: 043502bf-c192-4bf5-bb44-0bf721135e17
                    errors:
                      - code: ticket_not_found
                        message: Ticket not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 35f4e126-b7db-40a5-8f83-c080bac87d9e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - admin_id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '780'
            examples:
              successful:
                summary: successful
                value:
                  id: 88
                  admin_id: 991267321
              ticket_not_found:
                summary: Ticket not found
                value:
                  id: 89
                  admin_id: 991267326
  '/tickets/{ticket_id}/tags/{id}':
    delete:
      x-fern-sdk-group-name:
        - tickets
        - tags
      x-fern-sdk-method-name: removeTag
      summary: Remove tag from a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: ticket_id
          in: path
          description: ticket_id
          example: '64619700005694'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The unique identifier for the tag which is given by Intercom
          example: '7522907'
          required: true
          schema:
            type: string
      tags:
        - Tags
        - Tickets
      operationId: detachTagFromTicket
      description: You can remove tag from a specific ticket. This will return a tag
        object for the tag that was removed from the ticket.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '91'
                    name: Manual tag
              schema:
                '$ref': '#/components/schemas/tag'
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Ticket not found:
                  value:
                    type: error.list
                    request_id: ddcaec90-16e4-4fda-8e90-9425950fbf69
                    errors:
                      - code: ticket_not_found
                        message: Ticket not found
                Tag not found:
                  value:
                    type: error.list
                    request_id: bb38ed23-9af4-4b6e-a7a8-5af78f1e79d8
                    errors:
                      - code: tag_not_found
                        message: Tag not found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4363447e-e266-4190-a81e-ccb30b700d2c
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - admin_id
              properties:
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '123'
            examples:
              successful:
                summary: successful
                value:
                  admin_id: 991267336
              ticket_not_found:
                summary: Ticket not found
                value:
                  admin_id: 991267341
              tag_not_found:
                summary: Tag not found
                value:
                  admin_id: 991267346
  '/tickets':
    post:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: create
      summary: Create a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Tickets
      description: You can create a new ticket.
      operationId: createTicket
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: ticket
                    id: '325'
                    ticket_id: '31'
                    ticket_attributes:
                      _default_title_: example
                      _default_description_: there is a problem
                    ticket_state:
                      type: ticket_state
                      id: '5625'
                      category: submitted
                      internal_label: Submitted
                      external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '84'
                      name: my-ticket-type-23
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id688_that_should_be_at_least_
                      archived: false
                      created_at: 1727857399
                      updated_at: 1727857399
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                          - type: ticket_type_attribute
                            id: '145'
                            workspace_id: this_is_an_id688_that_should_be_at_least_
                            name: _default_title_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 84
                            archived: false
                            created_at: 1727857399
                            updated_at: 1727857399
                          - type: ticket_type_attribute
                            id: '146'
                            workspace_id: this_is_an_id688_that_should_be_at_least_
                            name: _default_description_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 84
                            archived: false
                            created_at: 1727857399
                            updated_at: 1727857399
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd02f79ffbe52cc8b3ab35
                          external_id: '70'
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1727857400
                    updated_at: 1727857401
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                        - type: ticket_part
                          id: '109'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: submitted
                          previous_ticket_state: submitted
                          created_at: 1727857401
                          updated_at: 1727857401
                          author:
                            id: '991267362'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id688_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                      total_count: 1
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                '$ref': '#/components/schemas/ticket'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: '09018f45-6f49-485d-ada1-25a37a0e27a9'
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - '$ref': '#/components/schemas/create_ticket_request'
              properties:
                skip_notifications:
                  type: boolean
                  description: Option to disable notifications when a Ticket is created.
                  example: true
            examples:
              successful_response:
                summary: Successful response
                value:
                  ticket_type_id: 84
                  contacts:
                    - id: 66fd02f79ffbe52cc8b3ab35
                  ticket_attributes:
                    _default_title_: example
                    _default_description_: there is a problem
  '/tickets/{id}':
    put:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: update
      summary: Update a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket which is given by Intercom
          schema:
            type: string
      tags:
        - Tickets
      operationId: updateTicket
      description: You can update a ticket.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: ticket
                    id: '326'
                    ticket_id: '32'
                    ticket_attributes:
                      _default_title_: example
                      _default_description_: there is a problem
                    ticket_state:
                      type: ticket_state
                      id: '5642'
                      category: in_progress
                      internal_label: In progress
                      external_label: In progress
                    ticket_type:
                      type: ticket_type
                      id: '86'
                      name: my-ticket-type-25
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id692_that_should_be_at_least_
                      archived: false
                      created_at: 1727857403
                      updated_at: 1727857403
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                          - type: ticket_type_attribute
                            id: '149'
                            workspace_id: this_is_an_id692_that_should_be_at_least_
                            name: _default_title_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 86
                            archived: false
                            created_at: 1727857403
                            updated_at: 1727857403
                          - type: ticket_type_attribute
                            id: '150'
                            workspace_id: this_is_an_id692_that_should_be_at_least_
                            name: _default_description_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 86
                            archived: false
                            created_at: 1727857404
                            updated_at: 1727857404
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd02fc9ffbe52cc8b3ab36
                          external_id: 5541ee93-e8b8-4b09-b084-1e0b30d7e06b
                    admin_assignee_id: '991267376'
                    team_assignee_id: '0'
                    created_at: 1727857404
                    updated_at: 1727857410
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                        - type: ticket_part
                          id: '110'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: submitted
                          previous_ticket_state: submitted
                          created_at: 1727857405
                          updated_at: 1727857405
                          author:
                            id: '991267374'
                            type: admin
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '111'
                          part_type: ticket_attribute_updated_by_admin
                          created_at: 1727857408
                          updated_at: 1727857408
                          author:
                            id: '991267375'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id692_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '112'
                          part_type: ticket_attribute_updated_by_admin
                          created_at: 1727857408
                          updated_at: 1727857408
                          author:
                            id: '991267375'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id692_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '113'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: in_progress
                          previous_ticket_state: submitted
                          created_at: 1727857408
                          updated_at: 1727857408
                          author:
                            id: '991267375'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id692_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '114'
                          part_type: assignment
                          created_at: 1727857409
                          updated_at: 1727857409
                          assigned_to:
                            type: admin
                            id: '991267376'
                          author:
                            id: '991267374'
                            type: admin
                            name: Jane Example
                            email: email@example.com
                          attachments: []
                          redacted: false
                        - type: ticket_part
                          id: '115'
                          part_type: snoozed
                          created_at: 1727857410
                          updated_at: 1727857410
                          author:
                            id: '991267375'
                            type: bot
                            name: Operator
                            email: operator+this_is_an_id692_that_should_be_at_least_@intercom.io
                          attachments: []
                          redacted: false
                      total_count: 6
                    open: true
                    snoozed_until: 1727971200
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                '$ref': '#/components/schemas/ticket'
        '404':
          description: Assignee not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: da26b7c9-6e36-4c8b-b9bd-4e49ba0c7188
                    errors:
                      - code: assignee_not_found
                        message: Assignee not found
                Assignee not found:
                  value:
                    type: error.list
                    request_id: 1da0e75f-fa8a-4510-bdb9-26ce477d205f
                    errors:
                      - code: assignee_not_found
                        message: Assignee not found
        '400':
          description: Ticket state id is not valid or is not associated with the
            ticket type.
          content:
            application/json:
              examples:
                Ticket state id is not valid or is not associated with the ticket type.:
                  value:
                    type: error.list
                    request_id: e182c683-6225-46af-9240-89f82130cd45
                    errors:
                      - code: ticket_state_id_invalid
                        message: Ticket state id is not valid or is not associated with
                          the ticket type
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4e23008e-87a3-4702-9917-517c9fd6da1f
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_ticket_request'
            examples:
              successful_response:
                summary: Successful response
                value:
                  ticket_attributes:
                    _default_title_: example
                    _default_description_: there is a problem
                  assignment:
                    admin_id: '991267374'
                    assignee_id: '991267376'
                  open: true
                  snoozed_until: 1673609604
                  ticket_state_id: 5642
              admin_not_found:
                summary: Admin not found
                value:
                  ticket_attributes:
                    _default_title_: example
                    _default_description_: there is a problem
                  assignment:
                    admin_id: '123'
                    assignee_id: '991267384'
                  ticket_state_id: 5650
              assignee_not_found:
                summary: Assignee not found
                value:
                  ticket_attributes:
                    _default_title_: example
                    _default_description_: there is a problem
                  assignment:
                    admin_id: '991267390'
                    assignee_id: '456'
                  ticket_state_id: 5658
              ticket_state_id_is_not_valid_or_is_not_associated_with_the_ticket_type:
                summary: Ticket state id is not valid or is not associated with the
                  ticket type.
                value:
                  ticket_state_id: 0
    get:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: get
      summary: Get a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket which is given by Intercom.
          schema:
            type: string
      tags:
        - Tickets
      operationId: getTicket
      description: You can fetch the details of a single ticket.
      responses:
        '200':
          description: Ticket found
          content:
            application/json:
              examples:
                Ticket found:
                  value:
                    type: ticket
                    id: '330'
                    ticket_id: '36'
                    ticket_attributes:
                      _default_title_: attribute_value
                      _default_description_:
                    ticket_state:
                      type: ticket_state
                      id: '5681'
                      category: submitted
                      internal_label: Submitted
                      external_label: Submitted
                    ticket_type:
                      type: ticket_type
                      id: '91'
                      name: my-ticket-type-30
                      description: my ticket type description is awesome.
                      icon: "\U0001F981"
                      workspace_id: this_is_an_id702_that_should_be_at_least_
                      archived: false
                      created_at: 1727857428
                      updated_at: 1727857428
                      is_internal: false
                      ticket_type_attributes:
                        type: list
                        data:
                          - type: ticket_type_attribute
                            id: '159'
                            workspace_id: this_is_an_id702_that_should_be_at_least_
                            name: _default_title_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 91
                            archived: false
                            created_at: 1727857428
                            updated_at: 1727857428
                          - type: ticket_type_attribute
                            id: '160'
                            workspace_id: this_is_an_id702_that_should_be_at_least_
                            name: _default_description_
                            description: ola
                            data_type: string
                            input_options:
                            order: 0
                            required_to_create: true
                            required_to_create_for_contacts: false
                            visible_on_create: true
                            visible_to_contacts: false
                            default: false
                            ticket_type_id: 91
                            archived: false
                            created_at: 1727857428
                            updated_at: 1727857428
                      category: Back-office
                    contacts:
                      type: contact.list
                      contacts:
                        - type: contact
                          id: 66fd03159ffbe52cc8b3ab3a
                          external_id: 152a82f6-36b2-484b-a049-a02b530561d4
                    admin_assignee_id: '0'
                    team_assignee_id: '0'
                    created_at: 1727857429
                    updated_at: 1727857431
                    ticket_parts:
                      type: ticket_part.list
                      ticket_parts:
                        - type: ticket_part
                          id: '119'
                          part_type: ticket_state_updated_by_admin
                          ticket_state: submitted
                          previous_ticket_state: submitted
                          created_at: 1727857429
                          updated_at: 1727857429
                          author:
                            id: '991267410'
                            type: admin
                            name: Joe Example
                            email: email@example.com
                          attachments: []
                          redacted: false
                      total_count: 1
                    open: true
                    linked_objects:
                      type: list
                      data: []
                      total_count: 0
                      has_more: false
                    category: Back-office
                    is_shared: false
              schema:
                '$ref': '#/components/schemas/ticket'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e64cf768-c096-4660-a10f-3e4576552dcf
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
    delete:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: delete
      summary: Delete a ticket
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: id
          in: path
          required: true
          description: The unique identifier for the ticket which is given by Intercom.
          schema:
            type: string
      tags:
        - Tickets
      operationId: deleteTicket
      description: You can delete a ticket using the Intercom provided ID.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '331'
                    object: ticket
                    deleted: true
              schema:
                title: Ticket Deleted
                type: object
                description: Response when a ticket is deleted.
                properties:
                  id:
                    type: string
                    description: The unique identifier for the ticket.
                    example: '42'
                  object:
                    type: string
                    description: always ticket
                    enum:
                      - ticket
                    example: ticket
                  deleted:
                    type: boolean
                    description: Whether the ticket is deleted or not.
                    example: true
        '404':
          description: Ticket not found
          content:
            application/json:
              examples:
                Ticket not found:
                  value:
                    type: error.list
                    request_id: 0734062a-278f-4d71-b9eb-95d3d0836e88
                    errors:
                      - code: ticket_not_found
                        message: Ticket not found
              schema:
                type: object
                title: Ticket not found error
                properties:
                  type:
                    type: string
                    description: The type is error.list
                    example: error.list
                  request_id:
                    type: string
                    nullable: true
                    format: uuid
                    description: ''
                    example: f93ecfa8-d08a-4325-8694-89aeb89c8f85
                  errors:
                    type: array
                    description: An array of one or more error objects
                    items:
                      properties:
                        code:
                          type: string
                          description: ticket_not_found
                          example: ticket_not_found
                        message:
                          type: string
                          nullable: true
                          description: Ticket not found
                          example: Ticket not found
                      required:
                        - code
                required:
                  - type
                  - errors
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 392d5127-e1e3-4e2a-b2b3-99c2fd576c07
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/tickets/search':
    post:
      x-fern-sdk-group-name:
        - tickets
      x-fern-sdk-method-name: search
      summary: Search tickets
      operationId: searchTickets
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Tickets
      description: |
        You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.

        {% admonition type="warning" name="Optimizing search queries" %}
          Search queries can be complex, so optimizing them can help the performance of your search.
          Use the `AND` and `OR` operators to combine multiple filters to get the exact results you need and utilize
          pagination to limit the number of results returned. The default is `20` results per page.
          See the [pagination section](https://developers.intercom.com/docs/build-an-integration/learn-more/rest-apis/pagination/#example-search-conversations-request) for more details on how to use the `starting_after` param.
        {% /admonition %}

        ### Nesting & Limitations

        You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
        There are some limitations to the amount of multiples there can be:
        - There's a limit of max 2 nested filters
        - There's a limit of max 15 filters for each AND or OR group

        ### Accepted Fields

        Most keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foobar"`).

        | Field                                     | Type                                                                                     |
        | :---------------------------------------- | :--------------------------------------------------------------------------------------- |
        | id                                        | String                                                                                   |
        | created_at                                | Date (UNIX timestamp)                                                                    |
        | updated_at                                | Date (UNIX timestamp)                                                                    |
        | _default_title_                           | String                                                                                   |
        | _default_description_                     | String                                                                                   |
        | category                                  | String                                                                                   |
        | ticket_type_id                            | String                                                                                   |
        | contact_ids                               | String                                                                                   |
        | teammate_ids                              | String                                                                                   |
        | admin_assignee_id                         | String                                                                                   |
        | team_assignee_id                          | String                                                                                   |
        | open                                      | Boolean                                                                                  |
        | state                                     | String                                                                                   |
        | snoozed_until                             | Date (UNIX timestamp)                                                                    |
        | ticket_attribute.{id}                     | String or Boolean or Date (UNIX timestamp) or Float or Integer                           |

        ### Accepted Operators

        {% admonition type="info" name="Searching based on `created_at`" %}
          You may use the `<=` or `>=` operators to search by `created_at`.
        {% /admonition %}

        The table below shows the operators you can use to define how you want to search for the value.  The operator should be put in as a string (`"="`). The operator has to be compatible with the field's type  (eg. you cannot search with `>` for a given string value as it's only compatible for integer's and dates).

        | Operator | Valid Types                    | Description                                                  |
        | :------- | :----------------------------- | :----------------------------------------------------------- |
        | =        | All                            | Equals                                                       |
        | !=       | All                            | Doesn't Equal                                                |
        | IN       | All                            | In  Shortcut for `OR` queries  Values most be in Array       |
        | NIN      | All                            | Not In  Shortcut for `OR !` queries  Values must be in Array |
        | >        | Integer  Date (UNIX Timestamp) | Greater (or equal) than                                      |
        | <       | Integer  Date (UNIX Timestamp) | Lower (or equal) than                                        |
        | ~        | String                         | Contains                                                     |
        | !~       | String                         | Doesn't Contain                                              |
        | ^        | String                         | Starts With                                                  |
        | $        | String                         | Ends With                                                    |
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: ticket.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 5
                      total_pages: 1
                    total_count: 1
                    tickets:
                      - type: ticket
                        id: '332'
                        ticket_id: '38'
                        ticket_attributes:
                          _default_title_: attribute_value
                          _default_description_:
                        ticket_state:
                          type: ticket_state
                          id: '5721'
                          category: submitted
                          internal_label: Submitted
                          external_label: Submitted
                        ticket_type:
                          type: ticket_type
                          id: '96'
                          name: my-ticket-type-35
                          description: my ticket type description is awesome.
                          icon: "\U0001F981"
                          workspace_id: this_is_an_id712_that_should_be_at_least_
                          archived: false
                          created_at: 1727857444
                          updated_at: 1727857444
                          is_internal: false
                          ticket_type_attributes:
                            type: list
                            data:
                              - type: ticket_type_attribute
                                id: '169'
                                workspace_id: this_is_an_id712_that_should_be_at_least_
                                name: _default_title_
                                description: ola
                                data_type: string
                                input_options:
                                order: 0
                                required_to_create: true
                                required_to_create_for_contacts: false
                                visible_on_create: true
                                visible_to_contacts: false
                                default: false
                                ticket_type_id: 96
                                archived: false
                                created_at: 1727857444
                                updated_at: 1727857444
                              - type: ticket_type_attribute
                                id: '170'
                                workspace_id: this_is_an_id712_that_should_be_at_least_
                                name: _default_description_
                                description: ola
                                data_type: string
                                input_options:
                                order: 0
                                required_to_create: true
                                required_to_create_for_contacts: false
                                visible_on_create: true
                                visible_to_contacts: false
                                default: false
                                ticket_type_id: 96
                                archived: false
                                created_at: 1727857445
                                updated_at: 1727857445
                          category: Back-office
                        contacts:
                          type: contact.list
                          contacts:
                            - type: contact
                              id: 66fd03259ffbe52cc8b3ab3c
                              external_id: db14385b-0bfc-4275-ba1c-d4cad2293516
                        admin_assignee_id: '0'
                        team_assignee_id: '0'
                        created_at: 1727857445
                        updated_at: 1727857447
                        ticket_parts:
                          type: ticket_part.list
                          ticket_parts:
                            - type: ticket_part
                              id: '122'
                              part_type: ticket_state_updated_by_admin
                              ticket_state: submitted
                              previous_ticket_state: submitted
                              created_at: 1727857446
                              updated_at: 1727857446
                              author:
                                id: '991267442'
                                type: admin
                                name: Joe Example
                                email: email@example.com
                              attachments: []
                              redacted: false
                          total_count: 1
                        open: true
                        linked_objects:
                          type: list
                          data: []
                          total_count: 0
                          has_more: false
                        category: Back-office
                        is_shared: false
              schema:
                '$ref': '#/components/schemas/ticket_list'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/search_request'
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                      - field: created_at
                        operator: '>'
                        value: '1306054154'
                  pagination:
                    per_page: 5
  '/visitors':
    put:
      x-fern-sdk-group-name:
        - visitors
      x-fern-sdk-method-name: update
      summary: Update a visitor
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Visitors
      operationId: updateVisitor
      description: |
        Sending a PUT request to `/visitors` will update an existing Visitor.

        **Option 1.** You can update a visitor by passing in the `user_id` of the visitor in the Request body.

        **Option 2.** You can update a visitor by passing in the `id` of the visitor in the Request body.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 66fd032b9ffbe52cc8b3ab3f
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone:
                    name: Gareth Bale
                    pseudonym: Green Lamp
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/app/pseudonym_avatars_2019/green-lamp.png
                    app_id: this_is_an_id716_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at:
                    created_at: 1727857451
                    remote_created_at: 1727857451
                    signed_up_at: 1727857451
                    updated_at: 1727857452
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id:
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer:
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    do_not_track:
              schema:
                '$ref': '#/components/schemas/visitor'
        '404':
          description: visitor Not Found
          content:
            application/json:
              examples:
                visitor Not Found:
                  value:
                    type: error.list
                    request_id: 9f8a197d-d8bd-425a-a09a-d09afc9ac9c3
                    errors:
                      - code: not_found
                        message: Visitor Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5e7fe5b0-cf18-4034-a284-ea8ecb989d6a
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/update_visitor_request'
            examples:
              successful:
                summary: successful
                value:
                  id: 66fd032b9ffbe52cc8b3ab3f
                  name: Gareth Bale
              visitor_not_found:
                summary: visitor Not Found
                value:
                  user_id: fail
                  name: Christian Fail
    get:
      x-fern-sdk-group-name:
        - visitors
      x-fern-sdk-method-name: getByUserId
      summary: Retrieve a visitor with User ID
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
        - name: user_id
          in: query
          description: The user_id of the Visitor you want to retrieve.
          required: true
          schema:
            type: string
      tags:
        - Visitors
      operationId: retrieveVisitorWithUserId
      description: You can fetch the details of a single visitor.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 66fd032e9ffbe52cc8b3ab45
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone:
                    name:
                    pseudonym:
                    avatar:
                      type: avatar
                      image_url:
                    app_id: this_is_an_id722_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at:
                    created_at: 1727857454
                    remote_created_at: 1727857454
                    signed_up_at: 1727857454
                    updated_at: 1727857454
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id:
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer:
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    do_not_track:
              schema:
                '$ref': '#/components/schemas/visitor'
        '404':
          description: Visitor not found
          content:
            application/json:
              examples:
                Visitor not found:
                  value:
                    type: error.list
                    request_id: 312d4805-5369-47e3-b73e-f7c3bdbb8743
                    errors:
                      - code: not_found
                        message: Visitor Not Found
              schema:
                '$ref': '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b9f098b2-bdb5-4260-8ceb-78aa84f22c59
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
  '/visitors/convert':
    post:
      x-fern-sdk-group-name:
        - visitors
        - contacts
      x-fern-sdk-method-name: convert
      summary: Convert a visitor
      parameters:
        - name: Intercom-Version
          in: header
          schema:
            '$ref': '#/components/schemas/intercom_version'
      tags:
        - Visitors
      operationId: convertVisitor
      description: "You can merge a Visitor to a Contact of role type `lead` or `user`.\n
        If the User exists, then the Visitor will be merged and deleted.
        If the User does not exist, the Visitor will be converted to a User,
        with the User identifiers replacing it's Visitor identifiers.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 66fd03319ffbe52cc8b3ab4c
                    workspace_id: this_is_an_id728_that_should_be_at_least_
                    external_id:
                    role: user
                    email: foo@bar.com
                    phone:
                    formatted_phone:
                    name:
                    avatar:
                    owner_id:
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1727857457
                    updated_at: 1727857458
                    signed_up_at: 1727857457
                    last_seen_at:
                    last_replied_at:
                    last_contacted_at:
                    last_email_opened_at:
                    last_email_clicked_at:
                    language_override:
                    browser:
                    browser_version:
                    browser_language:
                    os:
                    location:
                      type: location
                      country:
                      region:
                      city:
                      country_code:
                      continent_code:
                    android_app_name:
                    android_app_version:
                    android_device:
                    android_os_version:
                    android_sdk_version:
                    android_last_seen_at:
                    ios_app_name:
                    ios_app_version:
                    ios_device:
                    ios_os_version:
                    ios_sdk_version:
                    ios_last_seen_at:
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: '/contacts/66fd03319ffbe52cc8b3ab4c/tags'
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: '/contacts/66fd03319ffbe52cc8b3ab4c/notes'
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: '/contacts/66fd03319ffbe52cc8b3ab4c/companies'
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd03319ffbe52cc8b3ab4c/subscriptions'
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: '/contacts/66fd03319ffbe52cc8b3ab4c/subscriptions'
                      total_count: 0
                      has_more: false
                    utm_campaign:
                    utm_content:
                    utm_medium:
                    utm_source:
                    utm_term:
                    referrer:
              schema:
                '$ref': '#/components/schemas/contact'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 632444f2-db4e-421d-916f-1f229ca2ea1e
                    errors:
                      - code: unauthorized
                        message: Access Token Invalid
              schema:
                '$ref': '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/convert_visitor_request'
            examples:
              successful:
                summary: successful
                value:
                  visitor:
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                  user:
                    email: foo@bar.com
                  type: user
components:
  schemas:
    activity_log:
      title: Activity Log
      type: object
      description: Activities performed by Admins.
      nullable: true
      properties:
        id:
          type: string
          description: The id representing the activity.
          example: '6'
        performed_by:
          type: object
          description: Details about the Admin involved in the activity.
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `admin`.
              example: admin
            id:
              type: string
              description: The id representing the admin.
              example: '1295'
            email:
              type: string
              description: The email of the admin.
              example: john@example.com
            ip:
              type: string
              description: The IP address of the admin.
              example: 198.51.100.255
        metadata:
          '$ref': '#/components/schemas/activity_log_metadata'
        created_at:
          type: integer
          format: date-time
          description: The time the activity was created.
          example: 1671028894
        activity_type:
          type: string
          enum:
            - admin_assignment_limit_change
            - admin_away_mode_change
            - admin_deletion
            - admin_deprovisioned
            - admin_impersonation_end
            - admin_impersonation_start
            - admin_invite_change
            - admin_invite_creation
            - admin_invite_deletion
            - admin_login_failure
            - admin_login_success
            - admin_logout
            - admin_password_reset_request
            - admin_password_reset_success
            - admin_permission_change
            - admin_provisioned
            - admin_two_factor_auth_change
            - admin_unauthorized_sign_in_method
            - app_admin_join
            - app_authentication_method_change
            - app_data_deletion
            - app_data_export
            - app_google_sso_domain_change
            - app_identity_verification_change
            - app_name_change
            - app_outbound_address_change
            - app_package_installation
            - app_package_token_regeneration
            - app_package_uninstallation
            - app_team_creation
            - app_team_deletion
            - app_team_membership_modification
            - app_timezone_change
            - app_webhook_creation
            - app_webhook_deletion
            - articles_in_messenger_enabled_change
            - bulk_delete
            - bulk_export
            - campaign_deletion
            - campaign_state_change
            - conversation_part_deletion
            - conversation_topic_change
            - conversation_topic_creation
            - conversation_topic_deletion
            - help_center_settings_change
            - inbound_conversations_change
            - inbox_access_change
            - message_deletion
            - message_state_change
            - messenger_look_and_feel_change
            - messenger_search_required_change
            - messenger_spaces_change
            - office_hours_change
            - role_change
            - role_creation
            - role_deletion
            - ruleset_activation_title_preview
            - ruleset_creation
            - ruleset_deletion
            - search_browse_enabled_change
            - search_browse_required_change
            - seat_change
            - seat_revoke
            - security_settings_change
            - temporary_expectation_change
            - upfront_email_collection_change
            - welcome_message_change
          example: app_name_change
        activity_description:
          type: string
          description: A sentence or two describing the activity.
          example: Admin updated the app's name to "My App".
    activity_log_list:
      title: Paginated Response
      type: object
      description: A paginated list of activity logs.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `activity_log.list`.
          example: activity_log.list
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        activity_logs:
          type: array
          description: An array of activity logs
          items:
            '$ref': '#/components/schemas/activity_log'
    activity_log_metadata:
      title: Activity Log Metadata
      type: object
      description: Additional data provided about Admin activity.
      nullable: true
      properties:
        sign_in_method:
          type: string
          nullable: true
          description: The way the admin signed in.
          example: email_password
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        away_mode:
          type: boolean
          nullable: true
          description: The away mode status which is set to true when away and false
            when returned.
          example: true
        away_status_reason:
          type: string
          nullable: true
          description: The reason the Admin is away.
          example: "\U0001F60C On a break"
        reassign_conversations:
          type: boolean
          nullable: true
          description: Indicates if conversations should be reassigned while an Admin
            is away.
          example: false
        source:
          type: string
          nullable: true
          description: The action that initiated the status change.
          example: 'admin update from web - Admin id: 93'
        auto_changed:
          type: string
          nullable: true
          description: Indicates if the status was changed automatically or manually.
          example: false
        update_by:
          type: integer
          nullable: true
          description: The ID of the Admin who initiated the activity.
          example: 93
        update_by_name:
          type: string
          nullable: true
          description: The name of the Admin who initiated the activity.
          example: Joe Bloggs
    addressable_list:
      title: Addressable List
      type: object
      nullable: false
      description: A list used to access other resources from a parent model.
      properties:
        type:
          type: string
          format: uri
          description: The addressable object type
          example: note
        id:
          type: string
          description: The id of the addressable object
          example: '123'
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: '/contacts/5ba682d23d7cf92bef87bfd4/notes'
    admin:
      title: Admin
      type: object
      x-tags:
        - Admins
      description: Admins are teammate accounts that have access to a workspace.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Joe Example
        email:
          type: string
          description: The email of the admin.
          example: email@example.com
        job_title:
          type: string
          description: The job title of the admin.
          example: Associate
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This object represents the avatar associated with the admin.
          example:
            - 814865
          items:
            type: integer
        avatar:
          type: string
          format: uri
          nullable: true
          description: Image for the associated team or teammate
          example: https://example.photos/200/300
        team_priority_level:
          '$ref': '#/components/schemas/team_priority_level'
    admin_list:
      title: Admins
      type: object
      description: A list of admins associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin.list`.
          example: admin.list
        admins:
          type: array
          description: A list of admins associated with a given workspace.
          items:
            '$ref': '#/components/schemas/admin'
    admin_priority_level:
      title: Admin Priority Level
      type: object
      nullable: true
      description: Admin priority levels for the team
      properties:
        primary_admin_ids:
          type: array
          description: The primary admin ids for the team
          nullable: true
          example:
            - 493881
          items:
            type: integer
        secondary_admin_ids:
          type: array
          description: The secondary admin ids for the team
          nullable: true
          example:
            - 814865
          items:
            type: integer
    admin_reply_conversation_request:
      title: Admin Reply
      type: object
      description: Payload of the request to reply on behalf of an admin
      properties:
        message_type:
          type: string
          enum:
            - comment
            - note
            - quick_reply
          example: comment
        type:
          type: string
          enum:
            - admin
          example: admin
        body:
          type: string
          description: The text body of the reply. Notes accept some HTML formatting.
            Must be present for comment and note message types.
          example: Hello there!
        admin_id:
          type: string
          description: The id of the admin who is authoring the comment.
          example: '3156780'
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        reply_options:
          title: Quick Reply Options
          type: array
          description: The quick reply options to display. Must be present for quick_reply
            message types.
          items:
            title: Quick Reply Option
            type: object
            properties:
              text:
                type: string
                description: The text to display in this quick reply option.
              uuid:
                type: string
                format: uuid
                description: A unique identifier for this quick reply option. This
                  value will be available within the metadata of the comment conversation
                  part that is created when a user clicks on this reply option.
            required:
              - text
              - uuid
        attachment_urls:
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
        attachment_files:
          type: array
          description: A list of files that will be added as attachments. You can
            include up to 10 files
          items:
            '$ref': '#/components/schemas/conversation_attachment_files'
          maxItems: 10
      required:
        - message_type
        - type
        - admin_id
    admin_reply_ticket_request:
      title: Admin Reply on ticket
      type: object
      description: Payload of the request to reply on behalf of an admin
      properties:
        message_type:
          type: string
          enum:
            - comment
            - note
            - quick_reply
          example: comment
        type:
          type: string
          enum:
            - admin
          example: admin
        body:
          type: string
          description: The text body of the reply. Notes accept some HTML formatting.
            Must be present for comment and note message types.
          example: Hello there!
        admin_id:
          type: string
          description: The id of the admin who is authoring the comment.
          example: '3156780'
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        reply_options:
          title: Quick Reply Options
          type: array
          description: The quick reply options to display. Must be present for quick_reply
            message types.
          items:
            title: Quick Reply Option
            type: object
            properties:
              text:
                type: string
                description: The text to display in this quick reply option.
              uuid:
                type: string
                format: uuid
                description: A unique identifier for this quick reply option. This
                  value will be available within the metadata of the comment ticket
                  part that is created when a user clicks on this reply option.
            required:
              - text
              - uuid
        attachment_urls:
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
      required:
        - message_type
        - type
        - admin_id
    admin_with_app:
      title: Admin
      type: object
      description: Admins are the teammate accounts that have access to a workspace
      required:
        - type
        - id
        - name
        - email_verified
        - app
        - avatar
        - has_inbox_seat
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Jane Example
        email:
          type: string
          description: The email of the admin.
          example: email@example.com
        job_title:
          type: string
          description: The job title of the admin.
          example: Associate
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This is a list of ids of the teams that this admin is part
            of.
          example:
            - 814865
          items:
            type: integer
        avatar:
          type: object
          description: This object represents the avatar associated with the admin.
          properties:
            type:
              type: string
              description: This is a string that identifies the type of the object.
                It will always have the value `avatar`.
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the admin.
              example: https://example.com/avatar.png
        email_verified:
          type: boolean
          description: Identifies if this admin's email is verified.
          nullable: true
          example: true
        app:
          '$ref': '#/components/schemas/app'
          nullable: true
          description: App that the admin belongs to.
    ai_agent:
      title: AI Agent
      type: object
      x-tags:
        - Ai Agent
      description: Data related to AI Agent involvement in the conversation.
      properties:
        source_type:
          type: string
          description: The type of the source that triggered AI Agent involvement
            in the conversation.
          enum:
            - essentials_plan_setup
            - profile
            - workflow
            - workflow_preview
            - fin_preview
          example: workflow
        source_title:
          type: string
          description: The title of the source that triggered AI Agent involvement
            in the conversation. If this is `essentials_plan_setup` then it will return
            `null`.
          example: My AI Workflow
          nullable: true
        last_answer_type:
          type: string
          description: The type of the last answer delivered by AI Agent. If no answer
            was delivered then this will return `null`
          enum:
            - null
            - ai_answer
            - custom_answer
          example: ai_answer
          nullable: true
        resolution_state:
          type: string
          description: The resolution state of AI Agent. If no AI or custom answer
            has been delivered then this will return `null`.
          enum:
            - assumed_resolution
            - confirmed_resolution
            - routed_to_team
            - abandoned
            - null
          example: assumed_resolution
          nullable: true
        rating:
          type: integer
          description: The customer satisfaction rating given to AI Agent, from 1-5.
          example: 4
          nullable: true
        rating_remark:
          type: string
          description: The customer satisfaction rating remark given to AI Agent.
          example: Very helpful!
          nullable: true
        content_sources:
          '$ref': '#/components/schemas/content_sources_list'
    app:
      title: App
      type: object
      description: App is a workspace on Intercom
      nullable: true
      properties:
        type:
          type: string
          description: ''
          default: app
          example: app
        id_code:
          type: string
          description: The id of the app.
          example: xyz789
        name:
          type: string
          description: The name of the app.
          example: ACME
        region:
          type: string
          description: The Intercom region the app is located in.
          example: US
        timezone:
          type: string
          description: The timezone of the region where the app is located.
          example: America/Los_Angeles
        created_at:
          type: integer
          description: When the app was created.
          example: 1671465577
        identity_verification:
          type: boolean
          description: Whether or not the app uses identity verification.
          example: false
    article:
      title: Article
      type: object
      x-tags:
        - Articles
      description: The Articles API is a central place to gather all information and
        take actions on your articles. Articles can live within collections and sections,
        or alternatively they can stand alone.
      properties:
        statistics:
          nullable: true
          '$ref': '#/components/schemas/article_statistics'
      allOf:
        - '$ref': '#/components/schemas/article_list_item'
    article_content:
      title: Article Content
      type: object
      description: The Content of an Article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_content` .
          enum:
            - null
            - article_content
          example: article_content
          nullable: true
        title:
          type: string
          description: The title of the article.
          example: How to create a new article
        description:
          type: string
          description: The description of the article.
          example: This article will show you how to create a new article.
        body:
          type: string
          description: The body of the article.
          example: This is the body of the article.
        author_id:
          type: integer
          description: The ID of the author of the article.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft` .
          enum:
            - published
            - draft
          example: draft
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created (seconds).
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated (seconds).
          example: 1663597260
        url:
          type: string
          description: The URL of the article.
          example: http://intercom.test/help/en/articles/3-default-language
    article_list:
      title: Articles
      type: object
      description: This will return a list of articles for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        total_count:
          type: integer
          description: A count of the total number of articles.
          example: 1
        data:
          type: array
          description: An array of Article objects
          items:
            '$ref': '#/components/schemas/article_list_item'
    article_list_item:
      title: Articles
      type: object
      x-tags:
        - Articles
      description: The data returned about your articles when you list them.
      properties:
        type:
          type: string
          description: The type of object - `article`.
          enum:
            - article
          default: article
          example: article
        id:
          type: string
          description: The unique identifier for the article which is given by Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the article belongs to.
          example: hfi1bx4l
        title:
          type: string
          description: The title of the article. For multilingual articles, this will
            be the title of the default language's content.
          example: Default language title
        description:
          type: string
          nullable: true
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Default language description
        body:
          type: string
          nullable: true
          description: The body of the article in HTML. For multilingual articles,
            this will be the body of the default language's content.
          example: Default language body in html
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft`. For multilingual
            articles, this will be the state of the default language's content.
          enum:
            - published
            - draft
          default: draft
          example: published
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created. For multilingual articles,
            this will be the timestamp of creation of the default language's content
            in seconds.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated. For multilingual
            articles, this will be the timestamp of last update of the default language's
            content in seconds.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the article. For multilingual articles, this will
            be the URL of the default language's content.
          example: http://intercom.test/help/en/articles/3-default-language
        parent_id:
          type: integer
          nullable: true
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '125685'
        parent_ids:
          type: array
          description: The ids of the article's parent collections or sections. An
            article without this field stands alone.
          items:
            type: integer
          example:
            - 18
            - 19
        parent_type:
          type: string
          nullable: true
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          '$ref': '#/components/schemas/article_translated_content'
    article_search_highlights:
      title: Article Search Highlights
      type: object
      x-tags:
        - Articles
      description: The highlighted results of an Article search. In the examples provided
        my search query is always "my query".
      properties:
        article_id:
          type: string
          description: The ID of the corresponding article.
          example: '123'
        highlighted_title:
          type: array
          description: An Article title highlighted.
          items:
            type: object
            x-fern-type-name: HighlightedTitle
            description: A highlighted article title.
            properties:
              type:
                type: string
                description: The type of text - `highlight` or `plain`.
                enum:
                  - highlight
                  - plain
                example: 'The highlight is '
              text:
                type: string
                description: The text of the title.
                example: my query
        highlighted_summary:
          type: array
          description: An Article description and body text highlighted.
          x-fern-type-name: HighlightedSummary
          items:
            type: array
            description: An array containing the highlighted summary text split into
              chunks of plain and highlighted text.
            items:
              type: object
              description: An instance of highlighted summary text.
              x-fern-type-name: HighlightedSummary
              properties:
                type:
                  type: string
                  description: The type of text - `highlight` or `plain`.
                  x-fern-type-name: HighlightedType
                  enum:
                    - highlight
                    - plain
                  example: 'How to highlight '
                text:
                  type: string
                  description: The text of the title.
                  x-fern-type-name: HighlightedText
                  example: my query
    article_search_response:
      title: Article Search Response
      type: object
      x-tags:
        - Articles
      description: The results of an Article search
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        total_count:
          type: integer
          description: The total number of Articles matching the search query
          example: 5
        data:
          type: object
          description: An object containing the results of the search.
          properties:
            articles:
              type: array
              description: An array of Article objects
              items:
                '$ref': '#/components/schemas/article'
            highlights:
              type: array
              description: A corresponding array of highlighted Article content
              items:
                '$ref': '#/components/schemas/article_search_highlights'
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    article_statistics:
      title: Article Statistics
      type: object
      description: The statistics of an article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_statistics`.
          enum:
            - article_statistics
          default: article_statistics
          example: article_statistics
        views:
          type: integer
          description: The number of total views the article has received.
          example: 10
        conversions:
          type: integer
          description: The number of conversations started from the article.
          example: 0
        reactions:
          type: integer
          description: The number of total reactions the article has received.
          example: 10
        happy_reaction_percentage:
          type: number
          format: float
          description: The percentage of happy reactions the article has received
            against other types of reaction.
          example: 40.0
        neutral_reaction_percentage:
          type: number
          format: float
          description: The percentage of neutral reactions the article has received
            against other types of reaction.
          example: 40.0
        sad_reaction_percentage:
          type: number
          format: float
          description: The percentage of sad reactions the article has received against
            other types of reaction.
          example: 20.0
    article_translated_content:
      title: Article Translated Content
      type: object
      description: The Translated Content of an Article. The keys are the locale codes
        and the values are the translated content of the article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - article_translated_content.
          enum:
            - null
            - article_translated_content
          example: article_translated_content
          nullable: true
        ar:
          description: The content of the article in Arabic
          '$ref': '#/components/schemas/article_content'
        bg:
          description: The content of the article in Bulgarian
          '$ref': '#/components/schemas/article_content'
        bs:
          description: The content of the article in Bosnian
          '$ref': '#/components/schemas/article_content'
        ca:
          description: The content of the article in Catalan
          '$ref': '#/components/schemas/article_content'
        cs:
          description: The content of the article in Czech
          '$ref': '#/components/schemas/article_content'
        da:
          description: The content of the article in Danish
          '$ref': '#/components/schemas/article_content'
        de:
          description: The content of the article in German
          '$ref': '#/components/schemas/article_content'
        el:
          description: The content of the article in Greek
          '$ref': '#/components/schemas/article_content'
        en:
          description: The content of the article in English
          '$ref': '#/components/schemas/article_content'
        es:
          description: The content of the article in Spanish
          '$ref': '#/components/schemas/article_content'
        et:
          description: The content of the article in Estonian
          '$ref': '#/components/schemas/article_content'
        fi:
          description: The content of the article in Finnish
          '$ref': '#/components/schemas/article_content'
        fr:
          description: The content of the article in French
          '$ref': '#/components/schemas/article_content'
        he:
          description: The content of the article in Hebrew
          '$ref': '#/components/schemas/article_content'
        hr:
          description: The content of the article in Croatian
          '$ref': '#/components/schemas/article_content'
        hu:
          description: The content of the article in Hungarian
          '$ref': '#/components/schemas/article_content'
        id:
          description: The content of the article in Indonesian
          '$ref': '#/components/schemas/article_content'
        it:
          description: The content of the article in Italian
          '$ref': '#/components/schemas/article_content'
        ja:
          description: The content of the article in Japanese
          '$ref': '#/components/schemas/article_content'
        ko:
          description: The content of the article in Korean
          '$ref': '#/components/schemas/article_content'
        lt:
          description: The content of the article in Lithuanian
          '$ref': '#/components/schemas/article_content'
        lv:
          description: The content of the article in Latvian
          '$ref': '#/components/schemas/article_content'
        mn:
          description: The content of the article in Mongolian
          '$ref': '#/components/schemas/article_content'
        nb:
          description: The content of the article in Norwegian
          '$ref': '#/components/schemas/article_content'
        nl:
          description: The content of the article in Dutch
          '$ref': '#/components/schemas/article_content'
        pl:
          description: The content of the article in Polish
          '$ref': '#/components/schemas/article_content'
        pt:
          description: The content of the article in Portuguese (Portugal)
          '$ref': '#/components/schemas/article_content'
        ro:
          description: The content of the article in Romanian
          '$ref': '#/components/schemas/article_content'
        ru:
          description: The content of the article in Russian
          '$ref': '#/components/schemas/article_content'
        sl:
          description: The content of the article in Slovenian
          '$ref': '#/components/schemas/article_content'
        sr:
          description: The content of the article in Serbian
          '$ref': '#/components/schemas/article_content'
        sv:
          description: The content of the article in Swedish
          '$ref': '#/components/schemas/article_content'
        tr:
          description: The content of the article in Turkish
          '$ref': '#/components/schemas/article_content'
        vi:
          description: The content of the article in Vietnamese
          '$ref': '#/components/schemas/article_content'
        pt-BR:
          description: The content of the article in Portuguese (Brazil)
          '$ref': '#/components/schemas/article_content'
        zh-CN:
          description: The content of the article in Chinese (China)
          '$ref': '#/components/schemas/article_content'
        zh-TW:
          description: The content of the article in Chinese (Taiwan)
          '$ref': '#/components/schemas/article_content'
    assign_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        message_type:
          type: string
          enum:
            - assignment
          example: assignment
        type:
          type: string
          enum:
            - admin
            - team
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        assignee_id:
          type: string
          description: The `id` of the `admin` or `team` which will be assigned the
            conversation. A conversation can be assigned both an admin and a team.\nSet
            `0` if you want this assign to no admin or team (ie. Unassigned).
          example: '4324241'
        body:
          type: string
          description: Optionally you can send a response in the conversation when
            it is assigned.
          example: Let me pass you over to one of my colleagues.
      required:
        - message_type
        - type
        - admin_id
        - assignee_id
    attach_contact_to_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is adding the new participant.
          example: '12345'
        customer:
          type: object
          oneOf:
            - title: Intercom User ID
              properties:
                intercom_user_id:
                  type: string
                  description: The identifier for the contact as given by Intercom.
                  example: 6329bd9ffe4e2e91dac76188
                customer:
                  '$ref': '#/components/schemas/customer_request'
              required:
                - intercom_user_id
            - title: User ID
              properties:
                user_id:
                  type: string
                  description: The external_id you have defined for the contact who
                    is being added as a participant.
                  example: 6329bd9ffe4e2e91dac76188
                customer:
                  '$ref': '#/components/schemas/customer_request'
              required:
                - user_id
            - title: Email
              properties:
                email:
                  type: string
                  description: The email you have defined for the contact who is being
                    added as a participant.
                  example: winstonsmith@truth.org
                customer:
                  '$ref': '#/components/schemas/customer_request'
              required:
                - email
    close_conversation_request:
      title: Close Conversation Request
      type: object
      description: Payload of the request to close a conversation
      properties:
        message_type:
          type: string
          enum:
            - close
          example: close
        type:
          type: string
          enum:
            - admin
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        body:
          type: string
          description: Optionally you can leave a message in the conversation to provide
            additional context to the user and other teammates.
          example: ' This conversation is now closed!'
      required:
        - message_type
        - type
        - admin_id
    collection:
      title: Collection
      type: object
      x-tags:
        - Help Center
      description: Collections are top level containers for Articles within the Help
        Center.
      properties:
        id:
          type: string
          description: The unique identifier for the collection which is given by
            Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the collection belongs to.
          example: hfi1bx4l
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: Default language name
        description:
          type: string
          nullable: true
          description: The description of the collection. For multilingual help centers,
            this will be the description of the collection for the default language.
          example: Default language description
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created (seconds). For multilingual
            articles, this will be the timestamp of creation of the default language's
            content.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated (seconds). For multilingual
            articles, this will be the timestamp of last update of the default language's
            content.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the collection. For multilingual help centers, this
            will be the URL of the collection for the default language.
          example: http://intercom.test/help/collection/name
        icon:
          type: string
          nullable: true
          description: The icon of the collection.
          example: book-bookmark
        order:
          type: integer
          description: The order of the section in relation to others sections within
            a collection. Values go from `0` upwards. `0` is the default if there's
            no order.
          example: '1'
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          '$ref': '#/components/schemas/group_translated_content'
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it is the first
            level collection.
          example: '6871118'
        help_center_id:
          type: integer
          nullable: true
          description: The id of the help center the collection is in.
          example: '123'
    collection_list:
      title: Collections
      type: object
      description: This will return a list of Collections for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        total_count:
          type: integer
          description: A count of the total number of collections.
          example: 1
        data:
          type: array
          description: An array of collection objects
          items:
            '$ref': '#/components/schemas/collection'
    company:
      title: Company
      type: object
      x-tags:
        - Companies
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      properties:
        type:
          type: string
          description: Value is `company`
          enum:
            - company
          example: company
        id:
          type: string
          description: The Intercom defined id representing the company.
          example: 531ee472cce572a6ec000006
        name:
          type: string
          description: The name of the company.
          example: Blue Sun
        app_id:
          type: string
          description: The Intercom defined code of the workspace the company is associated
            to.
          example: ecahpwf5
        plan:
          type: object
          properties:
            type:
              type: string
              description: Value is always "plan"
              example: plan
            id:
              type: string
              description: The id of the plan
              example: '269315'
            name:
              type: string
              description: The name of the plan
              example: Pro
        company_id:
          type: string
          description: The company id you have defined for the company.
          example: '6'
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1663597223
        created_at:
          type: integer
          description: The time the company was added in Intercom.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the company was updated.
          example: 1663597223
        last_request_at:
          type: integer
          description: The time the company last recorded making a request.
          example: 1663597223
        size:
          type: integer
          description: The number of employees in the company.
          example: 100
        website:
          type: string
          description: The URL for the company website.
          example: https://www.intercom.com
        industry:
          type: string
          description: The industry that the company operates in.
          example: Software
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business.
          example: 100
        session_count:
          type: integer
          description: How many sessions the company has recorded.
          example: 100
        user_count:
          type: integer
          description: The number of users in the company.
          example: 100
        custom_attributes:
          type: object
          description: The custom attributes you have set on the company.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        tags:
          type: object
          description: The list of tags associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - tag.list
            tags:
              type: array
              items:
                items:
                  '$ref': '#/components/schemas/tag'
        segments:
          type: object
          description: The list of segments associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - segment.list
            segments:
              type: array
              items:
                '$ref': '#/components/schemas/segment'
    company_attached_contacts:
      title: Company Attached Contacts
      type: object
      description: A list of Contact Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
            - list
          example: list
        data:
          type: array
          description: An array containing Contact Objects
          items:
            '$ref': '#/components/schemas/contact'
        total_count:
          type: integer
          description: The total number of contacts
          example: 100
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    company_attached_segments:
      title: Company Attached Segments
      type: object
      description: A list of Segment Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
            - list
          example: list
        data:
          type: array
          description: An array containing Segment Objects
          items:
            '$ref': '#/components/schemas/segment'
    company_list:
      title: Companies
      type: object
      description: This will return a list of companies for the App.
      properties:
        type:
          type: string
          description: The type of object - `list`.
          enum:
            - list
          example: list
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        total_count:
          type: integer
          description: The total number of companies.
          example: 100
        data:
          type: array
          description: An array containing Company Objects.
          items:
            '$ref': '#/components/schemas/company'
    company_scroll:
      title: Company Scroll
      type: object
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
            - list
          example: list
        data:
          type: array
          items:
            '$ref': '#/components/schemas/company'
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        total_count:
          type: integer
          description: The total number of companies
          nullable: true
          example: 100
        scroll_param:
          type: string
          description: The scroll parameter to use in the next request to fetch the
            next page of results.
          example: 25b649f7-4d33-4ef6-88f5-60e5b8244309
    contact:
      title: Contact
      type: object
      x-tags:
        - Contacts
      description: Contact are the objects that represent your leads and users in
        Intercom.
      properties:
        type:
          type: string
          description: The type of object.
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        workspace_id:
          type: string
          description: The id of the workspace which the contact belongs to.
          example: ecahpwf5
        role:
          type: string
          description: The role of the contact.
          example: user
        email:
          type: string
          description: The contact's email.
          example: joe@example.com
        email_domain:
          type: string
          description: The contact's email domain.
          example: example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone.
          example: '+1123456789'
        formatted_phone:
          type: string
          nullable: true
          description: The contacts phone number normalized to the E164 format
          example: '+1123456789'
        name:
          type: string
          nullable: true
          description: The contacts name.
          example: John Doe
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact.
          example: 123
        has_hard_bounced:
          type: boolean
          description: Whether the contact has had an email sent to them hard bounce.
          example: true
        marked_email_as_spam:
          type: boolean
          description: Whether the contact has marked an email sent to them as spam.
          example: true
        unsubscribed_from_emails:
          type: boolean
          description: Whether the contact is unsubscribed from emails.
          example: true
        created_at:
          type: integer
          format: date-time
          description: '(UNIX timestamp) The time when the contact was created.'
          example: 1571672154
        updated_at:
          type: integer
          format: date-time
          description: '(UNIX timestamp) The time when the contact was last updated.'
          example: 1571672154
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time specified for when a contact signed
            up.'
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time when the contact was last seen (either
            where the Intercom Messenger was installed or when specified manually).'
          example: 1571672154
        last_replied_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time when the contact last messaged in.'
          example: 1571672154
        last_contacted_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time when the contact was last messaged.'
          example: 1571672154
        last_email_opened_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time when the contact last opened an
            email.'
          example: 1571672154
        last_email_clicked_at:
          type: integer
          format: date-time
          nullable: true
          description: '(UNIX timestamp) The time when the contact last clicked a
            link in an email.'
          example: 1571672154
        language_override:
          type: string
          nullable: true
          description: A preferred language setting for the contact, used by the Intercom
            Messenger even if their browser settings change.
          example: en
        browser:
          type: string
          nullable: true
          description: The name of the browser which the contact is using.
          example: Chrome
        browser_version:
          type: string
          nullable: true
          description: The version of the browser which the contact is using.
          example: 80.0.3987.132
        browser_language:
          type: string
          nullable: true
          description: The language set by the browser which the contact is using.
          example: en-US
        os:
          type: string
          nullable: true
          description: The operating system which the contact is using.
          example: Mac OS X
        android_app_name:
          type: string
          nullable: true
          description: The name of the Android app which the contact is using.
          example: Intercom
        android_app_version:
          type: string
          nullable: true
          description: The version of the Android app which the contact is using.
          example: 5.0.0
        android_device:
          type: string
          nullable: true
          description: The Android device which the contact is using.
          example: Pixel 3
        android_os_version:
          type: string
          nullable: true
          description: The version of the Android OS which the contact is using.
          example: '10'
        android_sdk_version:
          type: string
          nullable: true
          description: The version of the Android SDK which the contact is using.
          example: '28'
        android_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: '(UNIX timestamp) The time when the contact was last seen on
            an Android device.'
          example: 1571672154
        ios_app_name:
          type: string
          nullable: true
          description: The name of the iOS app which the contact is using.
          example: Intercom
        ios_app_version:
          type: string
          nullable: true
          description: The version of the iOS app which the contact is using.
          example: 5.0.0
        ios_device:
          type: string
          nullable: true
          description: The iOS device which the contact is using.
          example: iPhone 11
        ios_os_version:
          type: string
          nullable: true
          description: The version of iOS which the contact is using.
          example: 13.3.1
        ios_sdk_version:
          type: string
          nullable: true
          description: The version of the iOS SDK which the contact is using.
          example: 13.3.1
        ios_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: '(UNIX timestamp) The last time the contact used the iOS app.'
          example: 1571672154
        custom_attributes:
          type: object
          description: The custom attributes which are set for the contact.
        avatar:
          type: object
          nullable: true
          properties:
            type:
              type: string
              description: The type of object
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: An image URL containing the avatar of a contact.
              example: https://example.org/128Wash.jpg
        tags:
          '$ref': '#/components/schemas/contact_tags'
        notes:
          '$ref': '#/components/schemas/contact_notes'
        companies:
          '$ref': '#/components/schemas/contact_companies'
        location:
          '$ref': '#/components/schemas/contact_location'
        social_profiles:
          '$ref': '#/components/schemas/contact_social_profiles'
    contact_archived:
      title: Contact Archived
      type: object
      description: archived contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
            - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        archived:
          type: boolean
          description: Whether the contact is archived or not.
          example: true
    contact_attached_companies:
      title: Contact Attached Companies
      type: object
      description: A list of Company Objects
      properties:
        type:
          type: string
          description: The type of object
          enum:
            - list
          example: list
        companies:
          type: array
          description: An array containing Company Objects
          items:
            '$ref': '#/components/schemas/company'
        total_count:
          type: integer
          description: The total number of companies associated to this contact
          example: 100
        pages:
          '$ref': '#/components/schemas/pages_link'
    contact_companies:
      title: Contact companies
      type: object
      nullable: false
      description: An object containing companies meta data about the companies that
        a contact has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: '/contacts/5ba682d23d7cf92bef87bfd4/companies'
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_deleted:
      title: Contact Deleted
      type: object
      description: deleted contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
            - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        deleted:
          type: boolean
          description: Whether the contact is deleted or not.
          example: true
    contact_list:
      title: Contact List
      type: object
      description: Contacts are your users in Intercom.
      properties:
        type:
          type: string
          description: Always list
          enum:
            - list
          example: list
        data:
          type: array
          description: The list of contact objects
          items:
            '$ref': '#/components/schemas/contact'
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 100
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    contact_location:
      title: Contact Location
      type: object
      nullable: false
      description: An object containing location meta data about a Intercom contact.
      properties:
        type:
          type: string
          nullable: true
          description: Always location
          example: location
        country:
          type: string
          nullable: true
          description: The country that the contact is located in
          example: Ireland
        region:
          type: string
          nullable: true
          description: The overal region that the contact is located in
          example: Dublin
        city:
          type: string
          nullable: true
          description: The city that the contact is located in
          example: Dublin
    contact_notes:
      title: Contact notes
      type: object
      nullable: false
      description: An object containing notes meta data about the notes that a contact
        has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        data:
          type: array
          description: This object represents the notes attached to a contact.
          items:
            '$ref': '#/components/schemas/addressable_list'
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: '/contacts/5ba682d23d7cf92bef87bfd4/notes'
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_reference:
      title: Contact Reference
      type: object
      description: reference to contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
            - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
    contact_reply_base_request:
      title: Contact Reply Base Object
      type: object
      properties:
        message_type:
          type: string
          enum:
            - comment
        type:
          type: string
          enum:
            - user
        body:
          type: string
          description: The text body of the comment.
        created_at:
          type: integer
          description: The time the reply was created. If not provided, the current
            time will be used.
          example: 1590000000
        attachment_urls:
          title: Attachment URLs
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 10 URLs.
          items:
            type: string
            format: uri
          maxItems: 10
      required:
        - message_type
        - type
        - body
    contact_reply_conversation_request:
      title: Contact Reply
      oneOf:
        - '$ref': '#/components/schemas/contact_reply_intercom_user_id_request'
        - '$ref': '#/components/schemas/contact_reply_email_request'
        - '$ref': '#/components/schemas/contact_reply_user_id_request'
    contact_reply_email_request:
      title: Email
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `email`
      properties:
        email:
          type: string
          description: The email you have defined for the user.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments.
          items:
            '$ref': '#/components/schemas/conversation_attachment_files'
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      required:
        - email
    contact_reply_intercom_user_id_request:
      title: Intercom User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `intercom_user_id`
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      properties:
        intercom_user_id:
          type: string
          description: The identifier for the contact as given by Intercom.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments.
          items:
            '$ref': '#/components/schemas/conversation_attachment_files'
      required:
        - intercom_user_id
    contact_reply_ticket_email_request:
      title: Email
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `email`
      properties:
        email:
          type: string
          description: The email you have defined for the user.
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      required:
        - email
    contact_reply_ticket_intercom_user_id_request:
      title: Intercom User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `intercom_user_id`
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      properties:
        intercom_user_id:
          type: string
          description: The identifier for the contact as given by Intercom.
      required:
        - intercom_user_id
    contact_reply_ticket_request:
      title: Contact Reply on ticket
      oneOf:
        - '$ref': '#/components/schemas/contact_reply_ticket_intercom_user_id_request'
        - '$ref': '#/components/schemas/contact_reply_ticket_user_id_request'
        - '$ref': '#/components/schemas/contact_reply_ticket_email_request'
    contact_reply_ticket_user_id_request:
      title: User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `user_id`
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      properties:
        user_id:
          type: string
          description: The external_id you have defined for the contact.
      required:
        - user_id
    contact_reply_user_id_request:
      title: User ID
      type: object
      description: Payload of the request to reply on behalf of a contact using their
        `user_id`
      allOf:
        - '$ref': '#/components/schemas/contact_reply_base_request'
      properties:
        user_id:
          type: string
          description: The external_id you have defined for the contact.
        attachment_files:
          type: array
          description: A list of files that will be added as attachments. You can
            include up to 10 files.
          items:
            '$ref': '#/components/schemas/conversation_attachment_files'
          maxItems: 10
      required:
        - user_id
    contact_segments:
      title: Segments
      type: object
      description: A list of segments objects attached to a specific contact.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - list
          example: list
        data:
          type: array
          description: Segment objects associated with the contact.
          items:
            '$ref': '#/components/schemas/segment'
    contact_social_profiles:
      title: Social Profile
      type: object
      nullable: false
      description: An object containing social profiles that a contact has.
      properties:
        data:
          type: array
          description: A list of social profiles objects associated with the contact.
          items:
            '$ref': '#/components/schemas/social_profile'
    contact_subscription_types:
      title: Contact Subscription Types
      type: object
      nullable: false
      description: An object containing Subscription Types meta data about the SubscriptionTypes
        that a contact has.
      properties:
        data:
          type: array
          description: This object represents the subscriptions attached to a contact.
          items:
            '$ref': '#/components/schemas/addressable_list'
        url:
          type: string
          format: uri
          description: Url to get more subscription type resources for this contact
          example: '/contacts/5ba682d23d7cf92bef87bfd4/subscriptions'
        total_count:
          type: integer
          description: Int representing the total number of subscription types attached
            to this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_tags:
      title: Contact Tags
      type: object
      nullable: true
      description: An object containing tags meta data about the tags that a contact
        has. Up to 10 will be displayed here. Use the url to get more.
      properties:
        data:
          type: array
          description: This object represents the tags attached to a contact.
          items:
            '$ref': '#/components/schemas/addressable_list'
        url:
          type: string
          format: uri
          description: url to get more tag resources for this contact
          example: '/contacts/5ba682d23d7cf92bef87bfd4/tags'
        total_count:
          type: integer
          description: Int representing the total number of tags attached to this
            contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_unarchived:
      title: Contact Unarchived
      type: object
      description: unarchived contact object
      properties:
        type:
          type: string
          description: always contact
          enum:
            - contact
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        external_id:
          type: string
          nullable: true
          description: The unique identifier for the contact which is provided by
            the Client.
          example: f3b87a2e09d514c6c2e79b9a
        archived:
          type: boolean
          description: Whether the contact is archived or not.
          example: false
    content_import_source:
      title: Content Import Source
      type: object
      x-tags:
        - AI Content
      description: An external source for External Pages that you add to your Fin
        Content Library.
      nullable: false
      properties:
        type:
          type: string
          description: Always content_import_source
          enum:
            - content_import_source
          default: content_import_source
          example: content_import_source
        id:
          type: integer
          description: The unique identifier for the content import source which is
            given by Intercom.
          example: 1234
        last_synced_at:
          type: integer
          format: date-time
          description: The time when the content import source was last synced.
          example: 1672928610
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`.
          enum:
            - api
            - automatic
            - manual
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
            - active
            - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the root of the external source.
          example: https://help.example.com/
        created_at:
          type: integer
          format: date-time
          description: The time when the content import source was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the content import source was last updated.
          example: 1672928610
      required:
        - id
        - type
        - url
        - sync_behavior
        - status
        - created_at
        - updated_at
        - last_synced_at
    content_import_sources_list:
      title: Content Import Sources
      type: object
      x-tags:
        - AI Content
      description: This will return a list of the content import sources for the App.
      nullable: false
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        pages:
          '$ref': '#/components/schemas/pages_link'
        total_count:
          type: integer
          description: A count of the total number of content import sources.
          example: 1
        data:
          type: array
          description: An array of Content Import Source objects
          items:
            '$ref': '#/components/schemas/content_import_source'
    content_source:
      title: Content Source
      type: object
      x-tags:
        - AI Content Source
      description: The content source used by AI Agent in the conversation.
      properties:
        content_type:
          type: string
          description: The type of the content source.
          example: content_snippet
          enum:
            - file
            - article
            - external_content
            - content_snippet
            - workflow_connector_action
        url:
          type: string
          description: The internal URL linking to the content source for teammates.
          example: '/fin-ai-agent/content?content=content_snippet&id=3234924'
        title:
          type: string
          description: The title of the content source.
          example: My internal content snippet
        locale:
          type: string
          description: The ISO 639 language code of the content source.
          example: en
    content_sources_list:
      title: Content Source List
      nullable: false
      properties:
        type:
          type: string
          enum:
            - content_source.list
          example: content_source.list
        total_count:
          type: integer
          description: The total number of content sources used by AI Agent in the
            conversation.
          example: 1
        content_sources:
          type: array
          description: The content sources used by AI Agent in the conversation.
          items:
            '$ref': '#/components/schemas/content_source'
    conversation:
      title: Conversation
      type: object
      x-tags:
        - Conversations
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.
          example: conversation
        id:
          type: string
          description: The id representing the conversation.
          example: '1295'
        title:
          type: string
          nullable: true
          description: The title given to the conversation.
          example: Conversation Title
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation was updated.
          example: 1663597260
        waiting_since:
          type: integer
          format: date-time
          nullable: true
          description: The last time a Contact responded to an Admin. In other words,
            the time a customer started waiting for a response. Set to null if last
            reply is from an Admin.
          example: 1663597260
        snoozed_until:
          type: integer
          format: date-time
          nullable: true
          description: If set this is the time in the future when this conversation
            will be marked as open. i.e. it will be in a snoozed state until this
            time. i.e. it will be in a snoozed state until this time.
          example: 1663597260
        open:
          type: boolean
          description: Indicates whether a conversation is open (true) or closed (false).
          example: true
        state:
          type: string
          enum:
            - open
            - closed
            - snoozed
          description: Can be set to "open", "closed" or "snoozed".
          example: open
        read:
          type: boolean
          description: Indicates whether a conversation has been read.
          example: true
        priority:
          type: string
          enum:
            - priority
            - not_priority
          description: If marked as priority, it will return priority or else not_priority.
          example: priority
        admin_assignee_id:
          type: integer
          nullable: true
          description: The id of the admin assigned to the conversation. If it's not
            assigned to an admin it will return null.
          example: 0
        team_assignee_id:
          type: string
          nullable: true
          description: The id of the team assigned to the conversation. If it's not
            assigned to a team it will return null.
          example: '5017691'
        tags:
          '$ref': '#/components/schemas/tags'
        conversation_rating:
          '$ref': '#/components/schemas/conversation_rating'
        source:
          '$ref': '#/components/schemas/conversation_source'
        contacts:
          '$ref': '#/components/schemas/conversation_contacts'
        teammates:
          '$ref': '#/components/schemas/conversation_teammates'
        custom_attributes:
          '$ref': '#/components/schemas/custom_attributes'
        first_contact_reply:
          '$ref': '#/components/schemas/conversation_first_contact_reply'
        sla_applied:
          '$ref': '#/components/schemas/sla_applied'
        statistics:
          '$ref': '#/components/schemas/conversation_statistics'
        conversation_parts:
          '$ref': '#/components/schemas/conversation_parts'
        linked_objects:
          '$ref': '#/components/schemas/linked_object_list'
        ai_agent_participated:
          type: boolean
          description: Indicates whether the AI Agent participated in the conversation.
          example: true
        ai_agent:
          '$ref': '#/components/schemas/ai_agent'
          nullable: true
    conversation_attachment_files:
      title: Conversation attachment files
      type: object
      description: Properties of the attachment files in a conversation part
      properties:
        content_type:
          type: string
          description: The content type of the file
          example: application/json
        data:
          type: string
          description: The base64 encoded file data.
          example: ewogICJ0ZXN0IjogMQp9
        name:
          type: string
          description: The name of the file.
          example: test.json
    conversation_contacts:
      title: Contacts
      type: object
      description: The list of contacts (users or leads) involved in this conversation.
        This will only contain one customer unless more were added via the group conversation
        feature.
      properties:
        type:
          type: string
          description: ''
          enum:
            - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts (users or leads) involved in this conversation.
            This will only contain one customer unless more were added via the group
            conversation feature.
          items:
            '$ref': '#/components/schemas/contact_reference'
    conversation_deleted:
      title: Conversation Deleted
      type: object
      description: deleted conversation object
      properties:
        id:
          type: string
          description: The unique identifier for the conversation.
          example: 5ba682d23d7cf92bef87bfd4
        object:
          type: string
          description: always conversation
          enum:
            - conversation
          example: conversation
        deleted:
          type: boolean
          description: Whether the conversation is deleted or not.
          example: true
    conversation_first_contact_reply:
      title: First contact reply
      type: object
      nullable: true
      description: An object containing information on the first users message. For
        a contact initiated message this will represent the users original message.
      properties:
        created_at:
          type: integer
          format: date-time
          description: ''
          example: 1663597223
        type:
          type: string
          description: ''
          example: conversation
        url:
          type: string
          nullable: true
          description: ''
          example: https://developers.intercom.com/
    conversation_list:
      title: Conversation List
      type: object
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.list
          enum:
            - conversation.list
          example: conversation.list
        conversations:
          type: array
          description: The list of conversation objects
          items:
            '$ref': '#/components/schemas/conversation'
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 12345
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    conversation_part:
      title: Conversation Part
      type: object
      description: A Conversation Part represents a message in the conversation.
      properties:
        type:
          type: string
          description: Always conversation_part
          example: conversation_part
        id:
          type: string
          description: The id representing the conversation part.
          example: '3'
        part_type:
          type: string
          description: The type of conversation part.
          example: comment
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: '<p>Okay!</p>'
        created_at:
          type: integer
          format: date-time
          description: The time the conversation part was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation part was updated.
          example: 1663597260
        notified_at:
          type: integer
          format: date-time
          description: The time the user was notified with the conversation part.
          example: 1663597260
        assigned_to:
          '$ref': '#/components/schemas/reference'
          nullable: true
          description: The id of the admin that was assigned the conversation by this
            conversation_part (null if there has been no change in assignment.)
        author:
          '$ref': '#/components/schemas/conversation_part_author'
        attachments:
          title: Conversation part attachments
          type: array
          description: A list of attachments for the part.
          items:
            '$ref': '#/components/schemas/part_attachment'
        external_id:
          type: string
          nullable: true
          description: The external id of the conversation part
          example: abcd1234
        redacted:
          type: boolean
          description: Whether or not the conversation part has been redacted.
          example: false
        email_message_metadata:
          '$ref': '#/components/schemas/email_message_metadata'
          nullable: true
    conversation_part_author:
      title: Conversation part author
      type: object
      description: The object who initiated the conversation, which can be a Contact,
        Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.
        For Twitter, this will be blank.
      properties:
        type:
          type: string
          description: The type of the author
          example: admin
        id:
          type: string
          description: The id of the author
          example: '274'
        name:
          type: string
          description: The name of the author
          example: Operator
        email:
          type: string
          format: email
          description: The email of the author
          example: operator+abcd1234@intercom.io
    conversation_parts:
      title: Conversation Parts
      type: object
      description: A list of Conversation Part objects for each part message in the
        conversation. This is only returned when Retrieving a Conversation, and ignored
        when Listing all Conversations. There is a limit of 500 parts.
      properties:
        type:
          type: string
          description: ''
          enum:
            - conversation_part.list
          example: conversation_part.list
        conversation_parts:
          title: Conversation Parts
          type: array
          description: A list of Conversation Part objects for each part message in
            the conversation. This is only returned when Retrieving a Conversation,
            and ignored when Listing all Conversations. There is a limit of 500 parts.
          items:
            '$ref': '#/components/schemas/conversation_part'
        total_count:
          type: integer
          description: ''
          example: 2
    conversation_rating:
      title: Conversation Rating
      type: object
      nullable: true
      description: The Conversation Rating object which contains information on the
        rating and/or remark added by a Contact and the Admin assigned to the conversation.
      properties:
        rating:
          type: integer
          description: The rating, between 1 and 5, for the conversation.
          example: 5
        remark:
          type: string
          description: An optional field to add a remark to correspond to the number
            rating
          example: ''
        created_at:
          type: integer
          format: date-time
          description: The time the rating was requested in the conversation being
            rated.
          example: 1671028894
        contact:
          '$ref': '#/components/schemas/contact_reference'
        teammate:
          '$ref': '#/components/schemas/reference'
    conversation_response_time:
      title: Conversation response time
      type: object
      description: Details of first response time of assigned team in seconds.
      properties:
        team_id:
          type: integer
          description: Id of the assigned team.
          example: 100
        team_name:
          type: string
          description: Name of the assigned Team, null if team does not exist, Unassigned
            if no team is assigned.
          example: Team One
        response_time:
          type: integer
          description: First response time of assigned team in seconds.
          example: 2310
    conversation_source:
      title: Conversation source
      type: object
      description: The Conversation Part that originated this conversation, which
        can be Contact, Admin, Campaign, Automated or Operator initiated.
      properties:
        type:
          type: string
          description: This includes conversation, email, facebook, instagram, phone_call,
            phone_switch, push, sms, twitter and whatsapp.
          example: conversation
        id:
          type: string
          description: The id representing the message.
          example: '3'
        delivered_as:
          type: string
          description: The conversation's initiation type. Possible values are customer_initiated,
            campaigns_initiated (legacy campaigns), operator_initiated (Custom bot),
            automated (Series and other outbounds with dynamic audience message) and
            admin_initiated (fixed audience message, ticket initiated by an admin,
            group email).
          example: operator_initiated
        subject:
          type: string
          description: Optional. The message subject. For Twitter, this will show
            a generic message regarding why the subject is obscured.
          example: ''
        body:
          type: string
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: '<p>Hey there!</p>'
        author:
          '$ref': '#/components/schemas/conversation_part_author'
        attachments:
          type: array
          description: A list of attachments for the part.
          items:
            '$ref': '#/components/schemas/part_attachment'
        url:
          type: string
          nullable: true
          description: The URL where the conversation was started. For Twitter, Email,
            and Bots, this will be blank.
          example:
        redacted:
          type: boolean
          description: Whether or not the source message has been redacted. Only applicable
            for contact initiated messages.
          example: false
    conversation_statistics:
      title: Conversation statistics
      type: object
      nullable: true
      description: A Statistics object containing all information required for reporting,
        with timestamps and calculated metrics.
      properties:
        type:
          type: string
          description: ''
          example: conversation_statistics
        time_to_assignment:
          type: integer
          description: Duration until last assignment before first admin reply. In
            seconds.
          example: 2310
        time_to_admin_reply:
          type: integer
          description: Duration until first admin reply. Subtracts out of business
            hours. In seconds.
          example: 2310
        time_to_first_close:
          type: integer
          description: Duration until conversation was closed first time. Subtracts
            out of business hours. In seconds.
          example: 2310
        time_to_last_close:
          type: integer
          description: Duration until conversation was closed last time. Subtracts
            out of business hours. In seconds.
          example: 2310
        median_time_to_reply:
          type: integer
          description: Median based on all admin replies after a contact reply. Subtracts
            out of business hours. In seconds.
          example: 2310
        first_contact_reply_at:
          type: integer
          format: date-time
          description: Time of first text conversation part from a contact.
          example: 1663597233
        first_assignment_at:
          type: integer
          format: date-time
          description: Time of first assignment after first_contact_reply_at.
          example: 1663597233
        first_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply after first_contact_reply_at.
          example: 1663597233
        first_close_at:
          type: integer
          format: date-time
          description: Time of first close after first_contact_reply_at.
          example: 1663597233
        last_assignment_at:
          type: integer
          format: date-time
          description: Time of last assignment after first_contact_reply_at.
          example: 1663597233
        last_assignment_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply since most recent assignment.
          example: 1663597233
        last_contact_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from a contact.
          example: 1663597233
        last_admin_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from an admin.
          example: 1663597233
        last_close_at:
          type: integer
          format: date-time
          description: Time of the last conversation close.
          example: 1663597233
        last_closed_by_id:
          type: string
          description: The last admin who closed the conversation. Returns a reference
            to an Admin object.
          example: c3po
        count_reopens:
          type: integer
          description: Number of reopens after first_contact_reply_at.
          example: 1
        count_assignments:
          type: integer
          description: Number of assignments after first_contact_reply_at.
          example: 1
        count_conversation_parts:
          type: integer
          description: Total number of conversation parts.
          example: 1
        assigned_team_first_response_time_by_team:
          type: array
          description: An array of conversation response time objects
          items:
            '$ref': '#/components/schemas/conversation_response_time'
        assigned_team_first_response_time_in_office_hours:
          type: array
          description: An array of conversation response time objects within office
            hours
          items:
            '$ref': '#/components/schemas/conversation_response_time'
        handling_time:
          type: integer
          description: Time from conversation assignment to conversation close in
            seconds.
          example: 2310
    conversation_teammates:
      title: Conversation teammates
      type: object
      nullable: true
      description: The list of teammates who participated in the conversation (wrote
        at least one conversation part).
      properties:
        type:
          type: string
          description: The type of the object - `admin.list`.
          example: admin.list
        teammates:
          type: array
          description: The list of teammates who participated in the conversation
            (wrote at least one conversation part).
          items:
            '$ref': '#/components/schemas/reference'
    convert_conversation_to_ticket_request:
      description: You can convert a Conversation to a Ticket
      type: object
      title: Convert Ticket Request Payload
      properties:
        ticket_type_id:
          type: string
          description: The ID of the type of ticket you want to convert the conversation
            to
          example: '1234'
        attributes:
          '$ref': '#/components/schemas/ticket_request_custom_attributes'
      required:
        - ticket_type_id
    convert_visitor_request:
      description: You can merge a Visitor to a Contact of role type lead or user.
      type: object
      title: Convert Visitor Request Payload
      properties:
        type:
          type: string
          description: Represents the role of the Contact model. Accepts `lead` or
            `user`.
          example: user
        user:
          type: object
          description: The unique identifiers retained after converting or merging.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom,
                which will be represented as external_id.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The contact's email, retained by default if one is present.
              example: winstonsmith@truth.org
          anyOf:
            - required:
                - id
            - required:
                - user_id
        visitor:
          type: object
          description: The unique identifiers to convert a single Visitor.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The visitor's email.
              example: winstonsmith@truth.org
          anyOf:
            - required:
                - id
            - required:
                - user_id
            - required:
                - email
      required:
        - type
        - user
        - visitor
    create_article_request:
      description: You can create an Article
      type: object
      title: Create Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: '<p>This is the body in html</p>'
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
            - published
            - draft
          example: draft
        parent_id:
          type: integer
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: 18
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          '$ref': '#/components/schemas/article_translated_content'
      required:
        - title
        - author_id
    create_collection_request:
      description: You can create a collection
      type: object
      title: Create Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          '$ref': '#/components/schemas/group_translated_content'
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it will be
            created as the first level collection.
          example: '6871118'
        help_center_id:
          type: integer
          nullable: true
          description: The id of the help center where the collection will be created.
            If `null` then it will be created in the default help center.
          example: '123'
      required:
        - name
    create_contact_request:
      description: Payload to create a contact
      type: object
      title: Create Contact Request Payload
      properties:
        role:
          type: string
          description: The role of the contact.
        external_id:
          type: string
          description: A unique identifier for the contact which is given to Intercom
        email:
          type: string
          description: The contacts email
          example: jdoe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone
          example: '+353871234567'
        name:
          type: string
          nullable: true
          description: The contacts name
          example: John Doe
        avatar:
          type: string
          nullable: true
          description: An image URL containing the avatar of a contact
          example: https://www.example.com/avatar_image.jpg
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: The time specified for when a contact signed up
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the contact was last seen (either where the Intercom
            Messenger was installed or when specified manually)
          example: 1571672154
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact
          example: 123
        unsubscribed_from_emails:
          type: boolean
          nullable: true
          description: Whether the contact is unsubscribed from emails
          example: true
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the contact
      anyOf:
        - required:
            - email
          title: Create contact with email
        - required:
            - external_id
          title: Create contact with external_id
        - required:
            - role
          title: Create contact with role
    create_content_import_source_request:
      title: Create Content Import Source Payload
      type: object
      description: You can add an Content Import Source to your Fin Content Library.
      nullable: false
      properties:
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`.
          enum:
            - api
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
            - active
            - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the content import source.
          example: https://help.example.com
      required:
        - sync_behavior
        - url
    create_conversation_request:
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      type: object
      title: Create Conversation Request Payload
      properties:
        from:
          type: object
          properties:
            type:
              type: string
              enum:
                - lead
                - user
                - contact
              description: The role associated to the contact - user or lead.
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              format: uuid
              minLength: 24
              maxLength: 24
              example: 536e564f316c83104c000020
          required:
            - type
            - id
        body:
          type: string
          description: The content of the message. HTML is not supported.
          example: Hello
      required:
        - from
        - body
    create_data_attribute_request:
      description: ''
      type: object
      title: Create Data Attribute Request
      properties:
        name:
          type: string
          description: The name of the data attribute.
          example: My Data Attribute
        model:
          type: string
          description: The model that the data attribute belongs to.
          enum:
            - contact
            - company
          example: contact
        data_type:
          type: string
          description: The type of data stored for this attribute.
          enum:
            - string
            - integer
            - float
            - boolean
            - datetime
            - date
          example: string
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
            - option1
            - option2
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
      required:
        - name
        - model
        - data_type
    create_data_event_request:
      description: ''
      type: object
      title: Create Data Event Request
      properties:
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: The unique identifier for the contact (lead or user) which
            is given by Intercom.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      anyOf:
        - title: id required
          required:
            - event_name
            - created_at
            - id
        - title: user_id required
          required:
            - event_name
            - created_at
            - user_id
        - title: email required
          required:
            - event_name
            - created_at
            - email
    create_data_event_summaries_request:
      description: You can send a list of event summaries for a user. Each event summary
        should contain the event name, the time the event occurred, and the number
        of times the event occurred. The event name should be a past tense "verb-noun"
        combination, to improve readability, for example `updated-plan`.
      type: object
      title: Create Data Event Summaries Request
      properties:
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        event_summaries:
          type: object
          description: A list of event summaries for the user. Each event summary
            should contain the event name, the time the event occurred, and the number
            of times the event occurred. The event name should be a past tense 'verb-noun'
            combination, to improve readability, for example `updated-plan`.
          properties:
            event_name:
              type: string
              description: The name of the event that occurred. A good event name
                is typically a past tense 'verb-noun' combination, to improve readability,
                for example `updated-plan`.
              example: invited-friend
            count:
              type: integer
              description: The number of times the event occurred.
              example: 1
            first:
              type: integer
              format: date-time
              description: The first time the event was sent
              example: 1671028894
            last:
              type: integer
              format: date-time
              description: The last time the event was sent
              example: 1671028894
    create_data_exports_request:
      description: Request for creating a data export
      type: object
      title: Create Data Export Request
      properties:
        created_at_after:
          type: integer
          description: The start date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
        created_at_before:
          type: integer
          description: The end date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
      required:
        - created_at_after
        - created_at_before
    create_external_page_request:
      title: Create External Page Payload
      type: object
      description: You can add an External Page to your Fin Content Library.
      nullable: false
      properties:
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: '<p>Hello world!</p>'
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        fin_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by Fin.
          default: true
          example: true
        locale:
          type: string
          description: Always en
          enum:
            - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
      required:
        - title
        - html
        - url
        - locale
        - source_id
    create_message_request:
      description: You can create a message
      type: object
      title: Create Message Request Payload
      nullable: true
      properties:
        message_type:
          type: string
          description: 'The kind of message being created. Values: `in_app` or `email`.'
          enum:
            - in_app
            - email
          example: in_app
        subject:
          type: string
          description: The title of the email.
          example: Thanks for everything
        body:
          type: string
          description: The content of the message. HTML and plaintext are supported.
          example: Hello there
        template:
          type: string
          description: The style of the outgoing message. Possible values `plain`
            or `personal`.
          example: plain
        from:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: Always `admin`.
              enum:
                - admin
              example: admin
            id:
              type: integer
              description: The identifier for the admin which is given by Intercom.
              example: 394051
          required:
            - type
            - id
        to:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: The role associated to the contact - `user` or `lead`.
              enum:
                - user
                - lead
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              example: 536e564f316c83104c000020
          required:
            - type
            - id
        created_at:
          type: integer
          description: The time the message was created. If not provided, the current
            time will be used.
          example: 1590000000
        create_conversation_without_contact_reply:
          type: boolean
          description: Whether a conversation should be opened in the inbox for the
            message without the contact replying. Defaults to false if not provided.
          default: false
          example: true
      anyOf:
        - title: 'message_type: `email`.'
          required:
            - message_type
            - subject
            - body
            - template
            - from
            - to
        - title: 'message_type: `inapp`.'
          required:
            - message_type
            - body
            - from
            - to
    create_or_update_company_request:
      type: object
      title: Create Or Update Company Request Payload
      description: You can create or update a Company
      nullable: true
      properties:
        name:
          type: string
          description: The name of the Company
          example: Intercom
        company_id:
          type: string
          description: The company id you have defined for the company. Can't be updated
          example: 625e90fc55ab113b6d92175f
        plan:
          type: string
          description: The name of the plan you have associated with the company.
          example: Enterprise
        size:
          type: integer
          description: The number of employees in this company.
          example: '100'
        website:
          type: string
          description: The URL for this company's website. Please note that the value
            specified here is not validated. Accepts any string.
          example: https://www.example.com
        industry:
          type: string
          description: The industry that this company operates in.
          example: Manufacturing
        custom_attributes:
          type: object
          description: A hash of key/value pairs containing any other data about the
            company you want Intercom to store.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1394531169
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business. Note
            that this will truncate floats. i.e. it only allow for whole integers,
            155.98 will be truncated to 155. Note that this has an upper limit of
            2**31-1 or 2147483647..
          example: 1000
    create_or_update_custom_object_instance_request:
      description: Payload to create or update a Custom Object instance
      type: object
      title: Create Or Update Custom Object Instance Request Payload
      properties:
        external_id:
          type: string
          description: A unique identifier for the Custom Object instance in the external
            system it originated from.
        external_created_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the Custom Object instance was created in the
            external system it originated from.
          example: 1571672154
        external_updated_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the Custom Object instance was last updated in
            the external system it originated from.
          example: 1571672154
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the Custom Object instance.
    create_or_update_tag_request:
      description: You can create or update an existing tag.
      type: object
      title: Create or Update Tag Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found, or
            the new name for the tag if this is an update request. Names are case
            insensitive.
          example: Independent
        id:
          type: string
          description: The id of tag to updates.
          example: '656452352'
      required:
        - name
    create_phone_switch_request:
      description: You can create an phone switch
      type: object
      title: Create Phone Switch Request Payload
      nullable: true
      properties:
        phone:
          type: string
          description: Phone number in E.164 format, that will receive the SMS to
            continue the conversation in the Messenger.
          example: '+1 1234567890'
        custom_attributes:
          '$ref': '#/components/schemas/custom_attributes'
      required:
        - phone
    create_ticket_reply_with_comment_request:
      title: Create Ticket Reply Request Payload
      oneOf:
        - '$ref': '#/components/schemas/contact_reply_ticket_request'
        - '$ref': '#/components/schemas/admin_reply_ticket_request'
    create_ticket_request:
      description: You can create a Ticket
      type: object
      title: Create Ticket Request Payload
      properties:
        ticket_type_id:
          type: string
          description: The ID of the type of ticket you want to create
          example: '1234'
        contacts:
          type: array
          description: The list of contacts (users or leads) affected by this ticket.
            Currently only one is allowed
          items:
            type: object
            oneOf:
              - title: ID
                properties:
                  id:
                    type: string
                    description: The identifier for the contact as given by Intercom.
                required:
                  - id
              - title: External ID
                properties:
                  external_id:
                    type: string
                    description: The external_id you have defined for the contact who
                      is being added as a participant.
                required:
                  - external_id
              - title: Email
                properties:
                  email:
                    type: string
                    description: The email you have defined for the contact who is being
                      added as a participant. If a contact with this email does not
                      exist, one will be created.
                required:
                  - email
          example:
            - id: '1234'
        company_id:
          type: string
          description: The ID of the company that the ticket is associated with. The
            unique identifier for the company which is given by Intercom
          example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        created_at:
          type: integer
          description: The time the ticket was created. If not provided, the current
            time will be used.
          example: 1590000000
        ticket_attributes:
          '$ref': '#/components/schemas/ticket_request_custom_attributes'
      required:
        - ticket_type_id
        - contacts
    create_ticket_type_attribute_request:
      description: You can create a Ticket Type Attribute
      type: object
      title: Create Ticket Type Attribute Request Payload
      properties:
        name:
          type: string
          description: The name of the ticket type attribute
          example: Bug Priority
        description:
          type: string
          description: The description of the attribute presented to the teammate
            or contact
          example: Priority level of the bug
        data_type:
          type: string
          description: The data type of the attribute
          enum:
            - string
            - list
            - integer
            - decimal
            - boolean
            - datetime
            - files
          example: string
        required_to_create:
          type: boolean
          description: Whether the attribute is required to be filled in when teammates
            are creating the ticket in Inbox.
          default: false
          example: false
        required_to_create_for_contacts:
          type: boolean
          description: Whether the attribute is required to be filled in when contacts
            are creating the ticket in Messenger.
          default: false
          example: false
        visible_on_create:
          type: boolean
          description: Whether the attribute is visible to teammates when creating
            a ticket in Inbox.
          default: true
          example: true
        visible_to_contacts:
          type: boolean
          description: Whether the attribute is visible to contacts when creating
            a ticket in Messenger.
          default: true
          example: true
        multiline:
          type: boolean
          description: Whether the attribute allows multiple lines of text (only applicable
            to string attributes)
          example: false
        list_items:
          type: string
          description: A comma delimited list of items for the attribute value (only
            applicable to list attributes)
          example: Low Priority,Medium Priority,High Priority
        allow_multiple_values:
          type: boolean
          description: Whether the attribute allows multiple files to be attached
            to it (only applicable to file attributes)
          example: false
      required:
        - name
        - description
        - data_type
    create_ticket_type_request:
      description: |
        The request payload for creating a ticket type.
          You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
      type: object
      title: Create Ticket Type Request Payload
      nullable: true
      properties:
        name:
          type: string
          description: The name of the ticket type.
          example: Bug
        description:
          type: string
          description: The description of the ticket type.
          example: Used for tracking bugs
        category:
          type: string
          description: Category of the Ticket Type.
          enum:
            - Customer
            - Back-office
            - Tracker
          example: Customer
        icon:
          type: string
          description: The icon of the ticket type.
          example: "\U0001F41E"
          default: "\U0001F39F️"
        is_internal:
          type: boolean
          description: Whether the tickets associated with this ticket type are intended
            for internal use only or will be shared with customers. This is currently
            a limited attribute.
          example: false
          default: false
      required:
        - name
    cursor_pages:
      title: Cursor based pages
      type: object
      description: |
        Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data.
        A "cursor" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or "pages" as needed.
      nullable: true
      properties:
        type:
          type: string
          description: the type of object `pages`.
          example: pages
          enum:
            - pages
        page:
          type: integer
          description: The current page
          example: 1
        next:
          '$ref': '#/components/schemas/starting_after_paging'
        per_page:
          type: integer
          description: Number of results per page
          example: 2
        total_pages:
          type: integer
          description: Total number of pages
          example: 13
    custom_attributes:
      title: Custom Attributes
      type: object
      description: An object containing the different custom attributes associated
        to the conversation as key-value pairs. For relationship attributes the value
        will be a list of custom object instance models.
      additionalProperties:
        anyOf:
          - type: string
          - '$ref': '#/components/schemas/custom_object_instance'
    custom_object_instance:
      title: Custom Object Instance
      type: object
      x-tags:
        - Custom Object Instances
      nullable: true
      description: A Custom Object Instance represents an instance of a custom object
        type. This allows you to create and set custom attributes to store data about
        your customers that is not already captured by Intercom. The parent object
        includes recommended default attributes and you can add your own custom attributes.
      properties:
        id:
          type: string
          description: The Intercom defined id representing the custom object instance.
          example: 5a7a19e9f59ae20001d1c1e6
        external_id:
          type: string
          description: The id you have defined for the custom object instance.
          example: 0001d1c1e65a7a19e9f59ae2
        type:
          type: string
          description: The identifier of the custom object type that defines the structure
            of the custom object instance.
          example: Order
        custom_attributes:
          type: object
          description: The custom attributes you have set on the custom object instance.
          additionalProperties:
            type: string
    custom_object_instance_deleted:
      title: Custom Object Instance Deleted
      type: object
      description: deleted custom object instance object
      properties:
        object:
          type: string
          description: The unique identifier of the Custom Object type that defines
            the structure of the Custom Object instance.
          example: Order
        id:
          type: string
          description: The Intercom defined id representing the Custom Object instance.
          example: '123'
        deleted:
          type: boolean
          description: Whether the Custom Object instance is deleted or not.
          example: true
    customer_request:
      type: object
      nullable: true
      oneOf:
        - title: Intercom User ID
          properties:
            intercom_user_id:
              type: string
              description: The identifier for the contact as given by Intercom.
              example: 6329bd9ffe4e2e91dac76188
          required:
            - intercom_user_id
        - title: User ID
          properties:
            user_id:
              type: string
              description: The external_id you have defined for the contact who is being
                added as a participant.
              example: 2e91dac761886329bd9ffe4e
          required:
            - user_id
        - title: Email
          properties:
            email:
              type: string
              description: The email you have defined for the contact who is being added
                as a participant.
              example: sam.sung@example.com
          required:
            - email
    data_attribute:
      title: Data Attribute
      type: object
      x-tags:
        - Data Attributes
      description: Data Attributes are metadata used to describe your contact, company
        and conversation models. These include standard and custom attributes. By
        using the data attributes endpoint, you can get the global list of attributes
        for your workspace, as well as create and archive custom attributes.
      properties:
        type:
          type: string
          description: Value is `data_attribute`.
          enum:
            - data_attribute
          example: data_attribute
        id:
          type: integer
          description: The unique identifier for the data attribute which is given
            by Intercom. Only available for custom attributes.
          example: 12878
        model:
          type: string
          description: Value is `contact` for user/lead attributes and `company` for
            company attributes.
          enum:
            - contact
            - company
          example: contact
        name:
          type: string
          description: Name of the attribute.
          example: paid_subscriber
        full_name:
          type: string
          description: Full name of the attribute. Should match the name unless it's
            a nested attribute. We can split full_name on `.` to access nested user
            object values.
          example: custom_attributes.paid_subscriber
        label:
          type: string
          description: Readable name of the attribute (i.e. name you see in the UI)
          example: Paid Subscriber
        description:
          type: string
          description: Readable description of the attribute.
          example: Whether the user is a paid subscriber.
        data_type:
          type: string
          description: The data type of the attribute.
          enum:
            - string
            - integer
            - float
            - boolean
            - date
          example: boolean
        options:
          type: array
          description: List of predefined options for attribute value.
          items:
            type: string
          example:
            - 'true'
            - 'false'
        api_writable:
          type: boolean
          description: Can this attribute be updated through API
          example: true
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
        ui_writable:
          type: boolean
          description: Can this attribute be updated in the UI
          example: true
        custom:
          type: boolean
          description: Set to true if this is a CDA
          example: true
        archived:
          type: boolean
          description: Is this attribute archived. (Only applicable to CDAs)
          example: false
        created_at:
          type: integer
          format: date-time
          description: The time the attribute was created as a UTC Unix timestamp
          example: 1671028894
        updated_at:
          type: integer
          format: date-time
          description: The time the attribute was last updated as a UTC Unix timestamp
          example: 1671028894
        admin_id:
          type: string
          description: Teammate who created the attribute. Only applicable to CDAs
          example: '5712945'
    data_attribute_list:
      title: Data Attribute List
      type: object
      description: A list of all data attributes belonging to a workspace for contacts,
        companies or conversations.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - list
          example: list
        data:
          type: array
          description: A list of data attributes
          items:
            '$ref': '#/components/schemas/data_attribute'
    data_event:
      title: Data Event
      type: object
      x-tags:
        - Data Events
      description: Data events are used to notify Intercom of changes to your data.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - event
          example: event
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: Your identifier for a lead or a user.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        intercom_user_id:
          type: string
          description: The Intercom identifier for the user.
          example: 63a0979a5eeebeaf28dd56ba
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      required:
        - event_name
        - created_at
    data_event_list:
      title: Data Event List
      type: object
      description: This will return a list of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - event.list
          example: event.list
        events:
          type: array
          description: A list of data events
          items:
            '$ref': '#/components/schemas/data_event'
        pages:
          type: object
          description: Pagination
          properties:
            next:
              type: string
              example: https://api.intercom.io/events?per_page=2&before=1389913941064&intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user"
            since:
              type: string
              example: https://api.intercom.io/events?intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user&since=1389913941065
    data_event_summary:
      title: Data Event Summary
      type: object
      description: This will return a summary of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - event.summary
          example: event.summary
        email:
          type: string
          description: The email address of the user
          example: Sam.Sung@example.com
        intercom_user_id:
          type: string
          description: The Intercom user ID of the user
          example: 63a0979a5eeebeaf28dd56ba
        user_id:
          type: string
          description: The user ID of the user
          example: 62b997f288e14803c5006932
        events:
          type: array
          description: A summary of data events
          items:
            '$ref': '#/components/schemas/data_event_summary_item'
    data_event_summary_item:
      title: Data Event Summary Item
      type: object
      description: This will return a summary of a data event for the App.
      nullable: true
      properties:
        name:
          type: string
          description: The name of the event
          example: placed-order
        first:
          type: string
          description: The first time the event was sent
          example: '2014-01-16T23:12:21.000+00:00'
        last:
          type: string
          description: The last time the event was sent
          example: '2014-01-16T23:12:21.000+00:00 '
        count:
          type: integer
          description: The number of times the event was sent
          example: 1
        description:
          type: string
          description: The description of the event
          example: A user placed an order
    data_export:
      title: Data Export
      type: object
      x-tags:
        - Data Export
      description: The data export api is used to view all message sent & viewed in
        a given timeframe.
      properties:
        job_identfier:
          type: string
          description: The identifier for your job.
          example: orzzsbd7hk67xyu
        status:
          type: string
          enum:
            - pending
            - in_progress
            - failed
            - completed
            - no_data
            - canceled
          description: The current state of your job.
          example: pending
        download_expires_at:
          type: string
          description: The time after which you will not be able to access the data.
          example: '1674917488'
        download_url:
          type: string
          description: The location where you can download your data.
          example: https://api.intercom.test/download/messages/data/example
    data_export_csv:
      title: Data Export CSV
      type: object
      description: A CSV output file
      properties:
        user_id:
          type: string
          description: The user_id of the user who was sent the message.
        user_external_id:
          type: string
          description: The external_user_id of the user who was sent the message
        company_id:
          type: string
          description: The company ID of the user in relation to the message that
            was sent. Will return -1 if no company is present.
        email:
          type: string
          description: The users email who was sent the message.
        name:
          type: string
          description: The full name of the user receiving the message
        ruleset_id:
          type: string
          description: The id of the message.
        content_id:
          type: string
          description: The specific content that was received. In an A/B test each
            version has its own Content ID.
        content_type:
          type: string
          description: Email, Chat, Post etc.
        content_title:
          type: string
          description: The title of the content you see in your Intercom workspace.
        ruleset_version_id:
          type: string
          description: As you edit content we record new versions. This ID can help
            you determine which version of a piece of content that was received.
        receipt_id:
          type: string
          description: ID for this receipt. Will be included with any related stats
            in other files to identify this specific delivery of a message.
        received_at:
          type: integer
          description: Timestamp for when the receipt was recorded.
        series_id:
          type: string
          description: The id of the series that this content is part of. Will return
            -1 if not part of a series.
        series_title:
          type: string
          description: The title of the series that this content is part of.
        node_id:
          type: string
          description: The id of the series node that this ruleset is associated with.
            Each block in a series has a corresponding node_id.
        first_reply:
          type: integer
          description: The first time a user replied to this message if the content
            was able to receive replies.
        first_completion:
          type: integer
          description: The first time a user completed this message if the content
            was able to be completed e.g. Tours, Surveys.
        first_series_completion:
          type: integer
          description: The first time the series this message was a part of was completed
            by the user.
        first_series_disengagement:
          type: integer
          description: The first time the series this message was a part of was disengaged
            by the user.
        first_series_exit:
          type: integer
          description: The first time the series this message was a part of was exited
            by the user.
        first_goal_success:
          type: integer
          description: The first time the user met this messages associated goal if
            one exists.
        first_open:
          type: integer
          description: The first time the user opened this message.
        first_click:
          type: integer
          description: The first time the series the user clicked on a link within
            this message.
        first_dismisall:
          type: integer
          description: The first time the series the user dismissed this message.
        first_unsubscribe:
          type: integer
          description: The first time the user unsubscribed from this message.
        first_hard_bounce:
          type: integer
          description: The first time this message hard bounced for this user
    deleted_article_object:
      title: Deleted Article Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the article which you provided in
            the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - article
          enum:
            - article
          example: article
        deleted:
          type: boolean
          description: Whether the article was deleted successfully or not.
          example: true
    deleted_collection_object:
      title: Deleted Collection Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the collection which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - `collection`
          enum:
            - collection
          example: collection
        deleted:
          type: boolean
          description: Whether the collection was deleted successfully or not.
          example: true
    deleted_company_object:
      title: Deleted Company Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the company which is given by Intercom.
          example: 6634ab5eafff231757496dd7
        object:
          type: string
          description: The type of object which was deleted. - `company`
          enum:
            - company
          example: company
        deleted:
          type: boolean
          description: Whether the company was deleted successfully or not.
          example: true
    deleted_object:
      title: Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the news item which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted - news-item.
          enum:
            - news-item
          example: news-item
        deleted:
          type: boolean
          description: Whether the news item was deleted successfully or not.
          example: true
    detach_contact_from_conversation_request:
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is performing the action.
          example: '5017690'
      required:
        - admin_id
    email_address_header:
      title: Email Address Header
      type: object
      description: Contains data for an email address header for a conversation part
        that was sent as an email.
      properties:
        type:
          type: string
          description: The type of email address header
          example: from
        email_address:
          type: string
          description: The email address
          example: email@example.com
        name:
          type: string
          nullable: true
          description: The name associated with the email address
          example: Jane Example
    email_message_metadata:
      title: Email Message Metadata
      type: object
      description: Contains metadata if the message was sent as an email
      properties:
        subject:
          type: string
          description: The subject of the email
          example: Question about my order
        email_address_headers:
          title: Email Address Headers
          type: array
          description: A list of an email address headers.
          items:
            '$ref': '#/components/schemas/email_address_header'
    error:
      type: object
      title: Error
      description: The API will return an Error List for a failed request, which will
        contain one or more Error objects.
      properties:
        type:
          type: string
          description: The type is error.list
          example: error.list
        request_id:
          type: string
          nullable: true
          format: uuid
          description: ''
          example: f93ecfa8-d08a-4325-8694-89aeb89c8f85
        errors:
          type: array
          description: An array of one or more error objects
          items:
            properties:
              code:
                type: string
                description: A string indicating the kind of error, used to further
                  qualify the HTTP response code
                example: unauthorized
              message:
                type: string
                nullable: true
                description: Optional. Human readable description of the error.
                example: Access Token Invalid
              field:
                type: string
                nullable: true
                description: Optional. Used to identify a particular field or query
                  parameter that was in error.
                example: email
            required:
              - code
      required:
        - type
        - errors
    external_page:
      title: External Page
      type: object
      x-tags:
        - AI Content
      description: External pages that you have added to your Fin Content Library.
      nullable: false
      properties:
        type:
          type: string
          description: Always external_page
          enum:
            - external_page
          default: external_page
          example: external_page
        id:
          type: string
          description: The unique identifier for the external page which is given
            by Intercom.
          example: '1234'
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: '<p>Hello world!</p>'
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        ai_agent_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by AI Agent.
          example: true
        ai_copilot_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by AI Copilot.
          example: true
        fin_availability:
          type: boolean
          description: Deprecated. Use ai_agent_availability and ai_copilot_availability
            instead.
          example: true
        locale:
          type: string
          description: Always en
          enum:
            - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
        created_at:
          type: integer
          format: date-time
          description: The time when the external page was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the external page was last updated.
          example: 1672928610
        last_ingested_at:
          type: integer
          format: date-time
          description: The time when the external page was last ingested.
          example: 1672928610
      required:
        - id
        - type
        - title
        - html
        - url
        - ai_agent_availability
        - ai_copilot_availability
        - locale
        - source_id
        - created_at
        - updated_at
        - last_ingested_at
    external_pages_list:
      title: External Pages
      type: object
      x-tags:
        - AI Content
      description: This will return a list of external pages for the App.
      nullable: false
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        pages:
          '$ref': '#/components/schemas/pages_link'
        total_count:
          type: integer
          description: A count of the total number of external pages.
          example: 1
        data:
          type: array
          description: An array of External Page objects
          items:
            '$ref': '#/components/schemas/external_page'
    file_attribute:
      title: File
      type: object
      description: The value describing a file upload set for a custom attribute
      properties:
        type:
          type: string
          example: upload
        name:
          type: string
          description: The name of the file
          example: Screenshot.png
        url:
          type: string
          description: The url of the file. This is a temporary URL and will expire
            after 30 minutes.
          example: https://intercom-attachments-1.com/.../Screenshot.png
        content_type:
          type: string
          description: The type of file
          example: image/png
        filesize:
          type: integer
          description: The size of the file in bytes
          example: 11308309
        width:
          type: integer
          description: The width of the file in pixels, if applicable
          example: 3024
        height:
          type: integer
          description: The height of the file in pixels, if applicable
          example: 1964
    group_content:
      title: Group Content
      type: object
      description: The Content of a Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `group_content` .
          enum:
            - null
            - group_content
          example: group_content
          nullable: true
        name:
          type: string
          description: The name of the collection or section.
          example: Collection name
        description:
          type: string
          description: The description of the collection. Only available for collections.
          example: ' Collection description'
    group_translated_content:
      title: Group Translated Content
      type: object
      description: The Translated Content of an Group. The keys are the locale codes
        and the values are the translated content of the Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - group_translated_content.
          nullable: true
          enum:
            - null
            - group_translated_content
          example: group_translated_content
        ar:
          description: The content of the group in Arabic
          '$ref': '#/components/schemas/group_content'
        bg:
          description: The content of the group in Bulgarian
          '$ref': '#/components/schemas/group_content'
        bs:
          description: The content of the group in Bosnian
          '$ref': '#/components/schemas/group_content'
        ca:
          description: The content of the group in Catalan
          '$ref': '#/components/schemas/group_content'
        cs:
          description: The content of the group in Czech
          '$ref': '#/components/schemas/group_content'
        da:
          description: The content of the group in Danish
          '$ref': '#/components/schemas/group_content'
        de:
          description: The content of the group in German
          '$ref': '#/components/schemas/group_content'
        el:
          description: The content of the group in Greek
          '$ref': '#/components/schemas/group_content'
        en:
          description: The content of the group in English
          '$ref': '#/components/schemas/group_content'
        es:
          description: The content of the group in Spanish
          '$ref': '#/components/schemas/group_content'
        et:
          description: The content of the group in Estonian
          '$ref': '#/components/schemas/group_content'
        fi:
          description: The content of the group in Finnish
          '$ref': '#/components/schemas/group_content'
        fr:
          description: The content of the group in French
          '$ref': '#/components/schemas/group_content'
        he:
          description: The content of the group in Hebrew
          '$ref': '#/components/schemas/group_content'
        hr:
          description: The content of the group in Croatian
          '$ref': '#/components/schemas/group_content'
        hu:
          description: The content of the group in Hungarian
          '$ref': '#/components/schemas/group_content'
        id:
          description: The content of the group in Indonesian
          '$ref': '#/components/schemas/group_content'
        it:
          description: The content of the group in Italian
          '$ref': '#/components/schemas/group_content'
        ja:
          description: The content of the group in Japanese
          '$ref': '#/components/schemas/group_content'
        ko:
          description: The content of the group in Korean
          '$ref': '#/components/schemas/group_content'
        lt:
          description: The content of the group in Lithuanian
          '$ref': '#/components/schemas/group_content'
        lv:
          description: The content of the group in Latvian
          '$ref': '#/components/schemas/group_content'
        mn:
          description: The content of the group in Mongolian
          '$ref': '#/components/schemas/group_content'
        nb:
          description: The content of the group in Norwegian
          '$ref': '#/components/schemas/group_content'
        nl:
          description: The content of the group in Dutch
          '$ref': '#/components/schemas/group_content'
        pl:
          description: The content of the group in Polish
          '$ref': '#/components/schemas/group_content'
        pt:
          description: The content of the group in Portuguese (Portugal)
          '$ref': '#/components/schemas/group_content'
        ro:
          description: The content of the group in Romanian
          '$ref': '#/components/schemas/group_content'
        ru:
          description: The content of the group in Russian
          '$ref': '#/components/schemas/group_content'
        sl:
          description: The content of the group in Slovenian
          '$ref': '#/components/schemas/group_content'
        sr:
          description: The content of the group in Serbian
          '$ref': '#/components/schemas/group_content'
        sv:
          description: The content of the group in Swedish
          '$ref': '#/components/schemas/group_content'
        tr:
          description: The content of the group in Turkish
          '$ref': '#/components/schemas/group_content'
        vi:
          description: The content of the group in Vietnamese
          '$ref': '#/components/schemas/group_content'
        pt-BR:
          description: The content of the group in Portuguese (Brazil)
          '$ref': '#/components/schemas/group_content'
        zh-CN:
          description: The content of the group in Chinese (China)
          '$ref': '#/components/schemas/group_content'
        zh-TW:
          description: The content of the group in Chinese (Taiwan)
          '$ref': '#/components/schemas/group_content'
    help_center:
      title: Help Center
      type: object
      x-tags:
        - Help Center
      description: Help Centers contain collections
      properties:
        id:
          type: string
          description: The unique identifier for the Help Center which is given by
            Intercom.
          example: '123'
        workspace_id:
          type: string
          description: The id of the workspace which the Help Center belongs to.
          example: hfi1bx4l
        created_at:
          type: integer
          format: date-time
          description: The time when the Help Center was created.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the Help Center was last updated.
          example: 1672928610
        identifier:
          type: string
          description: The identifier of the Help Center. This is used in the URL
            of the Help Center.
          example: intercom
        website_turned_on:
          type: boolean
          description: Whether the Help Center is turned on or not. This is controlled
            in your Help Center settings.
          example: true
        display_name:
          type: string
          description: The display name of the Help Center only seen by teammates.
          example: Intercom Help Center
    help_center_list:
      title: Help Centers
      type: object
      x-tags:
        - Help Center
      description: A list of Help Centers belonging to the App
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
            - list
          example: list
        data:
          type: array
          description: An array of Help Center objects
          items:
            '$ref': '#/components/schemas/help_center'
    intercom_version:
      description: Intercom API version.</br>By default, it's equal to the version
        set in the app package.
      type: string
      example: Unstable
      default: Unstable
      enum:
        - '1.0'
        - '1.1'
        - '1.2'
        - '1.3'
        - '1.4'
        - '2.0'
        - '2.1'
        - '2.2'
        - '2.3'
        - '2.4'
        - '2.5'
        - '2.6'
        - '2.7'
        - '2.8'
        - '2.9'
        - '2.10'
        - '2.11'
        - Unstable
    linked_object:
      title: Linked Object
      type: object
      description: A linked conversation or ticket.
      properties:
        type:
          type: string
          description: ticket or conversation
          enum:
            - ticket
            - conversation
          example: ticket
        id:
          type: string
          description: The ID of the linked object
          example: '7583'
        category:
          type: string
          description: Category of the Linked Ticket Object.
          enum:
            - Customer
            - Back-office
            - Tracker
            - null
          example: Customer
          nullable: true
    linked_object_list:
      title: Linked Objects
      type: object
      description: An object containing metadata about linked conversations and linked
        tickets. Up to 1000 can be returned.
      properties:
        type:
          type: string
          description: Always list.
          enum:
            - list
          example: list
        total_count:
          type: integer
          description: The total number of linked objects.
          example: 100
        has_more:
          type: boolean
          description: Whether or not there are more linked objects than returned.
          example: false
        data:
          type: array
          description: An array containing the linked conversations and linked tickets.
          items:
            '$ref': '#/components/schemas/linked_object'
    merge_contacts_request:
      description: Merge contact data.
      type: object
      title: Merge contact data
      properties:
        from:
          type: string
          description: The unique identifier for the contact to merge away from. Must
            be a lead.
          example: 5d70dd30de4efd54f42fd526
        into:
          type: string
          description: The unique identifier for the contact to merge into. Must be
            a user.
          example: 5ba682d23d7cf92bef87bfd4
    message:
      type: object
      title: Message
      x-tags:
        - Messages
      description: Message are how you reach out to contacts in Intercom. They are
        created when an admin sends an outbound message to a contact.
      properties:
        type:
          type: string
          description: The type of the message
          example: user_message
        id:
          type: string
          description: The id representing the message.
          example: '1488971108'
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1667560812
        subject:
          type: string
          description: 'The subject of the message. Only present if message_type:
            email.'
          example: Greetings
        body:
          type: string
          description: The message body, which may contain HTML.
          example: Hello
        message_type:
          type: string
          enum:
            - email
            - inapp
            - facebook
            - twitter
          description: The type of message that was sent. Can be email, inapp, facebook
            or twitter.
          example: inapp
        conversation_id:
          type: string
          description: The associated conversation_id
          example: '64619700005570'
      required:
        - type
        - id
        - created_at
        - body
        - message_type
    multiple_filter_search_request:
      title: Multiple Filter Search Request
      description: Search using Intercoms Search APIs with more than one filter.
      type: object
      properties:
        operator:
          type: string
          enum:
            - AND
            - OR
          description: An operator to allow boolean inspection between multiple fields.
          example: AND
        value:
          oneOf:
            - type: array
              description: Add mutiple filters.
              title: multiple filter search request
              items:
                '$ref': '#/components/schemas/multiple_filter_search_request'
            - type: array
              description: Add a single filter field.
              title: single filter search request
              items:
                '$ref': '#/components/schemas/single_filter_search_request'
    news_item:
      title: News Item
      type: object
      x-tags:
        - News
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
            - news-item
          example: news-item
        id:
          type: string
          description: The unique identifier for the news item which is given by Intercom.
          example: '141'
        workspace_id:
          type: string
          description: The id of the workspace which the news item belongs to.
          example: t74hdn32
        title:
          type: string
          description: The title of the news item.
          example: 'New feature: News Items'
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: We are excited to announce the launch of News Items, a new content
            type in Intercom enabling you to announce product updates, company news,
            promotions, events and more with your customers.
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
            - draft
            - live
          example: live
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            '$ref': '#/components/schemas/newsfeed_assignment'
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
            nullable: true
            description: The label name.
            example: Product Update
        cover_image_url:
          type: string
          format: uri
          nullable: true
          description: URL of the image used as cover. Must have .jpg or .png extension.
          example: https://example.com/cover.jpg
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
            description: The emoji reaction to the news item.
            example: "\U0001F44D"
        deliver_silently:
          type: boolean
          description: When set to true, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was created.
          example: 1610589632
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was last updated.
          example: 1610589632
    news_item_request:
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      type: object
      title: Create News Item Request
      properties:
        title:
          type: string
          description: The title of the news item.
          example: Halloween is here!
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: '<p>New costumes in store for this spooky season</p>'
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
            - draft
            - live
          example: live
        deliver_silently:
          type: boolean
          description: When set to `true`, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
          example:
            - Product
            - Update
            - New
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
          example:
            - "\U0001F606"
            - "\U0001F605"
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            '$ref': '#/components/schemas/newsfeed_assignment'
      required:
        - title
        - sender_id
    newsfeed:
      title: Newsfeed
      type: object
      x-tags:
        - News
      description: |
        A newsfeed is a collection of news items, targeted to a specific audience.

        Newsfeeds currently cannot be edited through the API, please refer to [this article](https://www.intercom.com/help/en/articles/6362267-getting-started-with-news) to set up your newsfeeds in Intercom.
      properties:
        id:
          type: string
          description: The unique identifier for the newsfeed which is given by Intercom.
          example: '12312'
        type:
          type: string
          description: The type of object.
          enum:
            - newsfeed
          example: newsfeed
        name:
          type: string
          description: The name of the newsfeed. This name will never be visible to
            your users.
          example: My Newsfeed
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was created.
          example: 1674917488
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was last updated.
          example: 1674917488
    newsfeed_assignment:
      title: Newsfeed Assignment
      type: object
      x-tags:
        - News
      description: Assigns a news item to a newsfeed.
      properties:
        newsfeed_id:
          type: integer
          description: The unique identifier for the newsfeed which is given by Intercom.
            Publish dates cannot be in the future, to schedule news items use the
            dedicated feature in app (see this article).
          example: 198313
        published_at:
          type: integer
          format: timestamp
          description: Publish date of the news item on the newsfeed, use this field
            if you want to set a publish date in the past (e.g. when importing existing
            news items). On write, this field will be ignored if the news item state
            is "draft".
          example: 1674917488
    note:
      title: Note
      type: object
      x-tags:
        - Notes
      description: Notes allow you to annotate and comment on your contacts.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `note`.
          example: note
        id:
          type: string
          description: The id of the note.
          example: '17495962'
        created_at:
          type: integer
          format: timestamp
          description: The time the note was created.
          example: 1674589321
        contact:
          type: object
          description: Represents the contact that the note was created about.
          nullable: true
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `contact`.
            id:
              type: string
              description: The id of the contact.
              example: 214656d0c743eafcfde7f248
        author:
          '$ref': '#/components/schemas/admin'
          description: Optional. Represents the Admin that created the note.
        body:
          type: string
          description: The body text of the note.
          example: '<p>Text for the note.</p>'
    note_list:
      title: Paginated Response
      type: object
      description: A paginated list of notes associated with a contact.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `list`.
          example: list
        data:
          type: array
          description: An array of notes.
          items:
            '$ref': '#/components/schemas/note'
        total_count:
          type: integer
          description: A count of the total number of notes.
          example: 1
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    open_conversation_request:
      title: Open Conversation Request
      type: object
      description: Payload of the request to open a conversation
      properties:
        message_type:
          type: string
          enum:
            - open
          example: open
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017690'
      required:
        - message_type
        - admin_id
    pages_link:
      title: Pagination Object
      type: object
      description: |
        The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.

        Their responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.
      properties:
        type:
          type: string
          example: pages
          enum:
            - pages
        page:
          type: integer
          example: 1
        next:
          type: string
          format: uri
          description: A link to the next page of results. A response that does not
            contain a next link does not have further data to fetch.
          nullable: true
        per_page:
          type: integer
          example: 50
        total_pages:
          type: integer
          example: 1
    paginated_response:
      title: Paginated Response
      type: object
      description: Paginated Response
      properties:
        type:
          type: string
          description: The type of object
          enum:
            - list
            - conversation.list
          example: list
        pages:
          '$ref': '#/components/schemas/cursor_pages'
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 1
        data:
          type: array
          description: An array of Objects
          items:
            anyOf:
              - '$ref': '#/components/schemas/news_item'
              - '$ref': '#/components/schemas/newsfeed'
    part_attachment:
      title: Part attachment
      type: object
      description: The file attached to a part
      properties:
        type:
          type: string
          description: The type of attachment
          example: upload
        name:
          type: string
          description: The name of the attachment
          example: example.png
        url:
          type: string
          description: The URL of the attachment
          example: https://picsum.photos/200/300
        content_type:
          type: string
          description: The content type of the attachment
          example: image/png
        filesize:
          type: integer
          description: The size of the attachment
          example: 100
        width:
          type: integer
          description: The width of the attachment
          example: 100
        height:
          type: integer
          description: The height of the attachment
          example: 100
    phone_switch:
      title: Phone Switch
      type: object
      description: Phone Switch Response
      nullable: true
      properties:
        type:
          type: string
          description: ''
          enum:
            - phone_call_redirect
          default: phone_call_redirect
          example: phone_call_redirect
        phone:
          type: string
          description: Phone number in E.164 format, that has received the SMS to
            continue the conversation in the Messenger.
          example: '+1 1234567890'
    redact_conversation_request:
      oneOf:
        - title: Redact Conversation Part Request
          type: object
          description: Payload of the request to redact a conversation part
          properties:
            type:
              type: string
              enum:
                - conversation_part
              description: The type of resource being redacted.
              example: conversation_part
            conversation_id:
              type: string
              description: The id of the conversation.
              example: '19894788788'
            conversation_part_id:
              type: string
              description: The id of the conversation_part.
              example: '19381789428'
          required:
            - type
            - conversation_id
            - conversation_part_id
        - title: Redact Conversation Source Request
          type: object
          description: Payload of the request to redact a conversation source
          properties:
            type:
              type: string
              enum:
                - source
              description: The type of resource being redacted.
              example: source
            conversation_id:
              type: string
              description: The id of the conversation.
              example: '19894788788'
            source_id:
              type: string
              description: The id of the source.
              example: '19894781231'
          required:
            - type
            - conversation_id
            - source_id
    reference:
      title: Reference
      type: object
      description: reference to another object
      properties:
        type:
          type: string
          description: ''
          example: contact
        id:
          type: string
          nullable: true
          description: ''
          example: 1a2b3c
    reply_conversation_request:
      oneOf:
        - '$ref': '#/components/schemas/contact_reply_conversation_request'
        - '$ref': '#/components/schemas/admin_reply_conversation_request'
    search_request:
      description: Search using Intercoms Search APIs.
      type: object
      title: Search data
      properties:
        query:
          oneOf:
            - '$ref': '#/components/schemas/single_filter_search_request'
              title: Single filter search request
            - '$ref': '#/components/schemas/multiple_filter_search_request'
              title: multiple filter search request
        pagination:
          '$ref': '#/components/schemas/starting_after_paging'
      required:
        - query
    segment:
      title: Segment
      type: object
      x-tags:
        - Segments
      description: A segment is a group of your contacts defined by the rules that
        you set.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
            - segment
          example: segment
        id:
          type: string
          description: The unique identifier representing the segment.
          example: 56203d253cba154d39010062
        name:
          type: string
          description: The name of the segment.
          example: Active
        created_at:
          type: integer
          description: The time the segment was created.
          example: 1394621988
        updated_at:
          type: integer
          description: The time the segment was updated.
          example: 1394622004
        person_type:
          type: string
          description: 'Type of the contact: contact (lead) or user.'
          enum:
            - contact
            - user
          example: contact
        count:
          type: integer
          description: The number of items in the user segment. It's returned when
            `include_count=true` is included in the request.
          example: 3
          nullable: true
    segment_list:
      title: Segment List
      type: object
      description: This will return a list of Segment Objects. The result may also
        have a pages object if the response is paginated.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - segment.list
          example: segment.list
        segments:
          type: array
          description: A list of Segment objects
          items:
            '$ref': '#/components/schemas/segment'
        pages:
          type: object
          description: A pagination object, which may be empty, indicating no further
            pages to fetch.
    single_filter_search_request:
      title: Single Filter Search Request
      description: Search using Intercoms Search APIs with a single filter.
      type: object
      properties:
        field:
          type: string
          description: The accepted field that you want to search on.
          example: created_at
        operator:
          type: string
          enum:
            - '='
            - '!='
            - IN
            - NIN
            - '<'
            - '>'
            - '~'
            - '!~'
            - '^'
            - '$'
          description: The accepted operators you can use to define how you want to
            search for the value.
          example: '>'
        value:
          type: string
          description: The value that you want to search on.
          example: '73732934'
    sla_applied:
      title: Applied SLA
      type: object
      nullable: true
      description: |
        The SLA Applied object contains the details for which SLA has been applied to this conversation.
        Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null.
      properties:
        type:
          type: string
          description: object type
          example: conversation_sla_summary
        sla_name:
          type: string
          description: The name of the SLA as given by the teammate when it was created.
          example: ''
        sla_status:
          type: string
          enum:
            - hit
            - missed
            - cancelled
            - active
          description: |-
            SLA statuses:
                        - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.
                        - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.
                        - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.
          example: hit
    snooze_conversation_request:
      title: Snooze Conversation Request
      type: object
      description: Payload of the request to snooze a conversation
      properties:
        message_type:
          type: string
          enum:
            - snoozed
          example: snoozed
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017691'
        snoozed_until:
          type: integer
          format: timestamp
          description: The time you want the conversation to reopen.
          example: 1673609604
      required:
        - message_type
        - admin_id
        - snoozed_until
    social_profile:
      title: Social Profile
      type: object
      description: A Social Profile allows you to label your contacts, companies,
        and conversations and list them using that Social Profile.
      properties:
        type:
          type: string
          description: value is "social_profile"
          example: social_profile
        name:
          type: string
          description: The name of the Social media profile
          example: Facebook
        url:
          type: string
          format: uri
          description: The name of the Social media profile
          example: http://twitter.com/th1sland
    starting_after_paging:
      title: 'Pagination: Starting After'
      type: object
      nullable: true
      properties:
        per_page:
          type: integer
          description: The number of results to fetch per page.
          example: 2
        starting_after:
          type: string
          description: The cursor to use in the next request to get the next page
            of results.
          nullable: true
          example: your-cursor-from-response
    subscription_type:
      title: Subscription Types
      type: object
      x-tags:
        - Subscription Types
      description: A subscription type lets customers easily opt out of non-essential
        communications without missing what's important to them.
      properties:
        type:
          type: string
          description: The type of the object - subscription
          example: subscription
        id:
          type: string
          description: The unique identifier representing the subscription type.
          example: '123456'
        state:
          type: string
          description: The state of the subscription type.
          enum:
            - live
            - draft
            - archived
          example: live
        default_translation:
          '$ref': '#/components/schemas/translation'
        translations:
          type: array
          description: An array of translations objects with the localised version
            of the subscription type in each available locale within your translation
            settings.
          items:
            '$ref': '#/components/schemas/translation'
        consent_type:
          type: string
          description: Describes the type of consent.
          enum:
            - opt_out
            - opt_in
          example: opt_in
        content_types:
          type: array
          description: The message types that this subscription supports - can contain
            `email` or `sms_message`.
          items:
            type: string
            enum:
              - email
              - sms_message
            example: email
    subscription_type_list:
      title: Subscription Types
      type: object
      description: A list of subscription type objects.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - list
          example: list
        data:
          type: array
          description: A list of subscription type objects associated with the workspace
            .
          items:
            '$ref': '#/components/schemas/subscription_type'
    tag:
      title: Tag
      type: object
      x-tags:
        - Tags
      description: A tag allows you to label your contacts, companies, and conversations
        and list them using that tag.
      properties:
        type:
          type: string
          description: value is "tag"
          example: tag
        id:
          type: string
          description: The id of the tag
          example: '123456'
        name:
          type: string
          description: The name of the tag
          example: Test tag
        applied_at:
          type: integer
          format: date-time
          description: The time when the tag was applied to the object
          example: 1663597223
        applied_by:
          '$ref': '#/components/schemas/reference'
    tag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Tag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
        - name
        - companies
    tag_list:
      title: Tags
      type: object
      description: A list of tags objects in the workspace.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - list
          example: list
        data:
          type: array
          description: A list of tags objects associated with the workspace .
          items:
            '$ref': '#/components/schemas/tag'
    tag_multiple_users_request:
      description: You can tag a list of users.
      type: object
      title: Tag Users Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        users:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the user.
                example: 5f7f0d217289f8d2f4262080
      required:
        - name
        - users
    tags:
      title: Tags
      type: object
      description: A list of tags objects associated with a conversation
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - tag.list
          example: tag.list
        tags:
          type: array
          description: A list of tags objects associated with the conversation.
          items:
            '$ref': '#/components/schemas/tag'
    team:
      title: Team
      type: object
      x-tags:
        - Teams
      description: Teams are groups of admins in Intercom.
      properties:
        type:
          type: string
          description: Value is always "team"
          example: team
        id:
          type: string
          description: The id of the team
          example: '814865'
        name:
          type: string
          description: The name of the team
          example: Example Team
        admin_ids:
          type: array
          description: The list of admin IDs that are a part of the team.
          example:
            - 493881
          items:
            type: integer
        admin_priority_level:
          '$ref': '#/components/schemas/admin_priority_level'
    team_list:
      title: Team List
      type: object
      description: This will return a list of team objects for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
            - team.list
          example: team.list
        teams:
          type: array
          description: A list of team objects
          items:
            '$ref': '#/components/schemas/team'
    team_priority_level:
      title: Team Priority Level
      type: object
      nullable: true
      description: Admin priority levels for teams
      properties:
        primary_team_ids:
          type: array
          description: The primary team ids for the team
          nullable: true
          example:
            - 814865
          items:
            type: integer
        secondary_team_ids:
          type: array
          description: The secondary team ids for the team
          nullable: true
          example:
            - 493881
          items:
            type: integer
    ticket:
      title: Ticket
      type: object
      x-tags:
        - Tickets
      description: Tickets are how you track requests from your users.
      nullable: true
      properties:
        type:
          type: string
          description: Always ticket
          enum:
            - ticket
          default: ticket
          example: ticket
        id:
          type: string
          description: The unique identifier for the ticket which is given by Intercom.
          example: '1295'
        ticket_id:
          type: string
          description: The ID of the Ticket used in the Intercom Inbox and Messenger.
            Do not use ticket_id for API queries.
          example: '1390'
        category:
          type: string
          description: Category of the Ticket.
          enum:
            - Customer
            - Back-office
            - Tracker
          example: Customer
        ticket_attributes:
          '$ref': '#/components/schemas/ticket_custom_attributes'
        ticket_state:
          '$ref': '#/components/schemas/ticket_state'
        ticket_type:
          '$ref': '#/components/schemas/ticket_type'
        contacts:
          '$ref': '#/components/schemas/ticket_contacts'
        admin_assignee_id:
          type: string
          description: The id representing the admin assigned to the ticket.
          example: '1295'
        team_assignee_id:
          type: string
          description: The id representing the team assigned to the ticket.
          example: '1295'
        created_at:
          type: integer
          format: date-time
          description: The time the ticket was created as a UTC Unix timestamp.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the ticket was updated as a UTC Unix timestamp.
          example: 1663597260
        open:
          type: boolean
          description: Whether or not the ticket is open. If false, the ticket is
            closed.
          example: true
        snoozed_until:
          type: integer
          format: date-time
          description: The time the ticket will be snoozed until as a UTC Unix timestamp.
            If null, the ticket is not currently snoozed.
          example: 1663597260
        linked_objects:
          '$ref': '#/components/schemas/linked_object_list'
        ticket_parts:
          '$ref': '#/components/schemas/ticket_parts'
        is_shared:
          type: boolean
          description: Whether or not the ticket is shared with the customer.
          example: true
    ticket_contacts:
      title: Contacts
      type: object
      x-tags:
        - Tickets
      description: The list of contacts affected by a ticket.
      properties:
        type:
          type: string
          description: always contact.list
          enum:
            - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts affected by this ticket.
          items:
            '$ref': '#/components/schemas/contact_reference'
    ticket_custom_attributes:
      title: Ticket Attributes
      type: object
      description: An object containing the different attributes associated to the
        ticket as key-value pairs. For the default title and description attributes,
        the keys are `_default_title_` and `_default_description_`.
      additionalProperties:
        anyOf:
          - type: string
            nullable: true
          - type: number
          - type: boolean
          - type: array
          - '$ref': '#/components/schemas/file_attribute'
      example:
        _default_title_: Found a bug
        _default_description_: The button's not working
    ticket_list:
      title: Ticket List
      type: object
      description: Tickets are how you track requests from your users.
      properties:
        type:
          type: string
          description: Always ticket.list
          enum:
            - ticket.list
          example: ticket.list
        tickets:
          type: array
          description: The list of ticket objects
          items:
            '$ref': '#/components/schemas/ticket'
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 12345
        pages:
          '$ref': '#/components/schemas/cursor_pages'
    ticket_part:
      title: Ticket Part
      type: object
      x-tags:
        - Tickets
      description: A Ticket Part represents a message in the ticket.
      properties:
        type:
          type: string
          description: Always ticket_part
          example: ticket_part
        id:
          type: string
          description: The id representing the ticket part.
          example: '3'
        part_type:
          type: string
          description: The type of ticket part.
          example: comment
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML.
          example: '<p>Okay!</p>'
        previous_ticket_state:
          type: string
          enum:
            - submitted
            - in_progress
            - waiting_on_customer
            - resolved
          description: The previous state of the ticket.
          example: submitted
        ticket_state:
          type: string
          enum:
            - submitted
            - in_progress
            - waiting_on_customer
            - resolved
          description: The state of the ticket.
          example: submitted
        created_at:
          type: integer
          format: date-time
          description: The time the ticket part was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the ticket part was updated.
          example: 1663597260
        assigned_to:
          '$ref': '#/components/schemas/reference'
          nullable: true
          description: The id of the admin that was assigned the ticket by this ticket_part
            (null if there has been no change in assignment.)
        author:
          '$ref': '#/components/schemas/ticket_part_author'
        attachments:
          title: Ticket part attachments
          type: array
          description: A list of attachments for the part.
          items:
            '$ref': '#/components/schemas/part_attachment'
        external_id:
          type: string
          nullable: true
          description: The external id of the ticket part
          example: abcd1234
        redacted:
          type: boolean
          description: Whether or not the ticket part has been redacted.
          example: false
    ticket_part_author:
      title: Ticket part author
      type: object
      description: The author that wrote or triggered the part. Can be a bot, admin,
        team or user.
      properties:
        type:
          type: string
          description: The type of the author
          example: admin
          enum:
            - admin
            - bot
            - team
            - user
        id:
          type: string
          description: The id of the author
          example: '274'
        name:
          type: string
          nullable: true
          description: The name of the author
          example: Operator
        email:
          type: string
          format: email
          description: The email of the author
          example: operator+abcd1234@intercom.io
    ticket_parts:
      title: Ticket Parts
      type: object
      description: A list of Ticket Part objects for each note and event in the ticket.
        There is a limit of 500 parts.
      properties:
        type:
          type: string
          description: ''
          enum:
            - ticket_part.list
          example: ticket_part.list
        ticket_parts:
          title: Tickt Parts
          type: array
          description: A list of Ticket Part objects for each ticket. There is a limit
            of 500 parts.
          items:
            '$ref': '#/components/schemas/ticket_part'
        total_count:
          type: integer
          description: ''
          example: 2
    ticket_reply:
      title: A Ticket Part representing a note, comment, or quick_reply on a ticket
      type: object
      description: A Ticket Part representing a note, comment, or quick_reply on a
        ticket
      properties:
        type:
          type: string
          description: Always ticket_part
          example: ticket_part
          enum:
            - ticket_part
        id:
          type: string
          description: The id representing the part.
          example: '3'
        part_type:
          type: string
          description: Type of the part
          example: note
          enum:
            - note
            - comment
            - quick_reply
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML.
          example: '<p>Okay!</p>'
        created_at:
          type: integer
          format: date-time
          description: The time the note was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the note was updated.
          example: 1663597260
        author:
          '$ref': '#/components/schemas/ticket_part_author'
        attachments:
          title: Ticket part attachments
          type: array
          description: A list of attachments for the part.
          items:
            '$ref': '#/components/schemas/part_attachment'
        redacted:
          type: boolean
          description: Whether or not the ticket part has been redacted.
          example: false
    ticket_request_custom_attributes:
      title: Ticket Attributes
      type: object
      description: The attributes set on the ticket. When setting the default title
        and description attributes, the attribute keys that should be used are `_default_title_`
        and `_default_description_`. When setting ticket type attributes of the list
        attribute type, the key should be the attribute name and the value of the
        attribute should be the list item id, obtainable by [listing the ticket type](ref:get_ticket-types).
        For example, if the ticket type has an attribute called `priority` of type
        `list`, the key should be `priority` and the value of the attribute should
        be the guid of the list item (e.g. `de1825a0-0164-4070-8ca6-13e22462fa7e`).
      additionalProperties:
        anyOf:
          - type: string
            nullable: true
          - type: number
          - type: boolean
          - type: array
      example:
        _default_title_: Found a bug
        _default_description_: The button is not working
    ticket_state:
      title: Ticket State
      type: object
      x-tags:
        - Tickets
      description: A ticket state, used to define the state of a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_state`.
          example: ticket_state
        id:
          type: string
          description: The id of the ticket state
          example: '12'
        category:
          type: string
          description: The category of the ticket state
          example: in_progress
          enum:
            - submitted
            - in_progress
            - waiting_on_customer
            - resolved
        internal_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible in Intercom
          example: With Dev Team
        external_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible to customers, in the messenger, email and tickets portal.
          example: In Progress
    ticket_state_detailed:
      title: Ticket State
      type: object
      x-tags:
        - Tickets
      description: A ticket state, used to define the state of a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_state`.
          example: ticket_state
        id:
          type: string
          description: The id of the ticket state
          example: '12'
        category:
          type: string
          description: The category of the ticket state
          example: in_progress
          enum:
            - submitted
            - in_progress
            - waiting_on_customer
            - resolved
        internal_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible in Intercom
          example: With Dev Team
        external_label:
          type: string
          description: The state the ticket is currently in, in a human readable form
            - visible to customers, in the messenger, email and tickets portal.
          example: In Progress
        archived:
          type: boolean
          description: Whether the ticket state is archived
          example: false
        ticket_types:
          type: object
          description: A list of ticket types associated with a given ticket state.
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `list`.
              example: list
            data:
              type: array
              description: A list of ticket type attributes associated with a given
                ticket type.
              items:
                '$ref': '#/components/schemas/ticket_type'
    ticket_state_list:
      title: Ticket States
      type: object
      description: A list of ticket states associated with a given ticket type.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `list`.
          example: list
        data:
          type: array
          description: A list of ticket states associated with a given ticket type.
          items:
            '$ref': '#/components/schemas/ticket_state_detailed'
    ticket_type:
      title: Ticket Type
      type: object
      x-tags:
        - Tickets
      description: A ticket type, used to define the data fields to be captured in
        a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type`.
          example: ticket_type
        id:
          type: string
          description: The id representing the ticket type.
          example: '1295'
        category:
          type: string
          description: Category of the Ticket Type.
          enum:
            - Customer
            - Back-office
            - Tracker
          example: Customer
        name:
          type: string
          description: The name of the ticket type
          example: Bug
        description:
          type: string
          description: The description of the ticket type
          example: A bug that has been reported.
        icon:
          type: string
          description: The icon of the ticket type
          example: "\U0001F41E"
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type belongs to.
          example: ecahpwf5
        ticket_type_attributes:
          '$ref': '#/components/schemas/ticket_type_attribute_list'
        ticket_states:
          title: Ticket States
          type: object
          description: A list of ticket states associated with a given ticket type.
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `list`.
              example: list
            data:
              type: array
              description: A list of ticket states associated with a given ticket
                type.
              items:
                '$ref': '#/components/schemas/ticket_state'
        archived:
          type: boolean
          description: Whether the ticket type is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was last updated.
    ticket_type_attribute:
      title: Ticket Type Attribute
      type: object
      description: Ticket type attribute, used to define each data field to be captured
        in a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attribute`.
          example: ticket_type_attribute
        id:
          type: string
          description: The id representing the ticket type attribute.
          example: '1'
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type attribute belongs
            to.
          example: ecahpwf5
        name:
          type: string
          description: The name of the ticket type attribute
          example: Title
        description:
          type: string
          description: The description of the ticket type attribute
          example: Bug title.
        data_type:
          type: string
          description: The type of the data attribute
          enum:
            - string
            - integer
            - decimal
            - boolean
            - datetime
            - files
        input_options:
          type: object
          description: Multiline input option for the attribute
          properties:
            multiline:
              type: boolean
              example: true
        order:
          type: integer
          description: The order of the attribute against other attributes
          example: 1
        required_to_create:
          type: boolean
          description: Whether the attribute is required or not for teammates.
          default: false
          example: false
        required_to_create_for_contacts:
          type: boolean
          description: Whether the attribute is required or not for contacts.
          default: false
          example: false
        visible_on_create:
          type: boolean
          description: Whether the attribute is visible or not to teammates.
          default: true
          example: false
        visible_to_contacts:
          type: boolean
          description: Whether the attribute is visible or not to contacts.
          default: true
          example: false
        default:
          type: boolean
          description: Whether the attribute is built in or not.
          example: true
        ticket_type_id:
          type: integer
          description: The id of the ticket type that the attribute belongs to.
          example: 42
        archived:
          type: boolean
          description: Whether the ticket type attribute is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was last updated.
    ticket_type_attribute_list:
      title: Ticket Type Attributes
      type: object
      description: A list of attributes associated with a given ticket type.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attributes.list`.
        ticket_type_attributes:
          type: array
          description: A list of ticket type attributes associated with a given ticket
            type.
          items:
            '$ref': '#/components/schemas/ticket_type_attribute'
    ticket_type_list:
      title: Ticket Types
      type: object
      description: A list of ticket types associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `list`.
          example: list
        data:
          type: array
          description: A list of ticket_types associated with a given workspace.
          items:
            '$ref': '#/components/schemas/ticket_type'
    translation:
      title: Translation
      type: object
      description: A translation object contains the localised details of a subscription
        type.
      properties:
        name:
          type: string
          description: The localised name of the subscription type.
          example: Announcements
        description:
          type: string
          description: The localised description of the subscription type.
          example: Offers, product and feature announcements
        locale:
          type: string
          description: The two character identifier for the language of the translation
            object.
          example: en
    untag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Untag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag which will be untagged from the company
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
              untag:
                type: boolean
                description: Always set to true
                example: 'true'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
        - name
        - companies
    update_article_request:
      description: You can Update an Article
      type: object
      title: Update Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: '<p>This is the body in html</p>'
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
            - published
            - draft
          example: draft
        parent_id:
          type: string
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '18'
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          '$ref': '#/components/schemas/article_translated_content'
    update_collection_request:
      description: You can update a collection
      type: object
      title: Update Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          '$ref': '#/components/schemas/group_translated_content'
        parent_id:
          type: string
          nullable: true
          description: The id of the parent collection. If `null` then it will be
            updated as the first level collection.
          example: '6871118'
    update_contact_request:
      description: You can update a contact
      type: object
      title: Update Contact Request Payload
      properties:
        role:
          type: string
          description: The role of the contact.
        external_id:
          type: string
          description: A unique identifier for the contact which is given to Intercom
        email:
          type: string
          description: The contacts email
          example: jdoe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone
          example: '+353871234567'
        name:
          type: string
          nullable: true
          description: The contacts name
          example: John Doe
        avatar:
          type: string
          nullable: true
          description: An image URL containing the avatar of a contact
          example: https://www.example.com/avatar_image.jpg
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: The time specified for when a contact signed up
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the contact was last seen (either where the Intercom
            Messenger was installed or when specified manually)
          example: 1571672154
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact
          example: 123
        unsubscribed_from_emails:
          type: boolean
          nullable: true
          description: Whether the contact is unsubscribed from emails
          example: true
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the contact
    update_content_import_source_request:
      title: Create Content Import Source Payload
      type: object
      description: You can modify a Content Import Source of your Fin Content Library.
      nullable: false
      properties:
        sync_behavior:
          type: string
          description: If you intend to create or update External Pages via the API,
            this should be set to `api`. You can not change the value to or from api.
          enum:
            - api
            - automated
            - manual
          example: api
        status:
          type: string
          description: The status of the content import source.
          enum:
            - active
            - deactivated
          default: active
          example: active
        url:
          type: string
          description: The URL of the content import source. This may only be different
            from the existing value if the sync behavior is API.
          example: https://help.example.com
      required:
        - sync_behavior
        - url
    update_conversation_request:
      title: Update Conversation Request
      type: object
      description: Payload of the request to update a conversation
      properties:
        read:
          type: boolean
          description: Mark a conversation as read within Intercom.
          example: true
        custom_attributes:
          '$ref': '#/components/schemas/custom_attributes'
    update_data_attribute_request:
      description: ''
      type: object
      title: Update Data Attribute Request
      properties:
        archived:
          type: boolean
          description: Whether the attribute is to be archived or not.
          example: false
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
            - option1
            - option2
        messenger_writable:
          type: boolean
          description: Can this attribute be updated by the Messenger
          example: false
    update_external_page_request:
      title: Update External Page Payload
      type: object
      description: You can update an External Page in your Fin Content Library.
      nullable: false
      properties:
        title:
          type: string
          description: The title of the external page.
          example: Getting started with...
        html:
          type: string
          description: The body of the external page in HTML.
          example: '<p>Hello world!</p>'
        url:
          type: string
          description: The URL of the external page. This will be used by Fin to link
            end users to the page it based its answer on.
          example: https://help.example.com/en/articles/1234-getting-started
        fin_availability:
          type: boolean
          description: Whether the external page should be used to answer questions
            by Fin.
          default: true
          example: true
        locale:
          type: string
          description: Always en
          enum:
            - en
          default: en
          example: en
        source_id:
          type: integer
          description: The unique identifier for the source of the external page which
            was given by Intercom. Every external page must be associated with a Content
            Import Source which represents the place it comes from and from which
            it inherits a default audience (configured in the UI). For a new source,
            make a POST request to the Content Import Source endpoint and an ID for
            the source will be returned in the response.
          example: 1234
        external_id:
          type: string
          description: The identifier for the external page which was given by the
            source. Must be unique for the source.
          example: '5678'
      required:
        - title
        - html
        - url
        - locale
        - source_id
    update_ticket_request:
      description: You can update a Ticket
      type: object
      title: Update Ticket Request Payload
      properties:
        ticket_attributes:
          type: object
          description: The attributes set on the ticket.
          example:
            _default_title_: example
            _default_description_: having a problem
        ticket_state_id:
          type: string
          description: The ID of the ticket state associated with the ticket type.
          example: '123'
        open:
          type: boolean
          description: Specify if a ticket is open. Set to false to close a ticket.
            Closing a ticket will also unsnooze it.
          example: true
        is_shared:
          type: boolean
          description: Specify whether the ticket is visible to users.
          example: true
        snoozed_until:
          type: integer
          format: timestamp
          description: The time you want the ticket to reopen.
          example: 1673609604
        assignment:
          type: object
          properties:
            admin_id:
              type: string
              description: The ID of the admin performing the action.
              example: '123'
            assignee_id:
              type: string
              description: The ID of the admin or team to which the ticket is assigned.
                Set this 0 to unassign it.
              example: '123'
    update_ticket_type_attribute_request:
      description: You can update a Ticket Type Attribute
      type: object
      title: Update Ticket Type Attribute Request Payload
      properties:
        name:
          x-fern-type-name: AttributeName
          type: string
          description: The name of the ticket type attribute
          example: Bug Priority
        description:
          x-fern-type-name: AttributeDescription
          type: string
          description: The description of the attribute presented to the teammate
            or contact
          example: Priority level of the bug
        required_to_create:
          x-fern-type-name: Required
          type: boolean
          description: Whether the attribute is required to be filled in when teammates
            are creating the ticket in Inbox.
          default: false
          example: false
        required_to_create_for_contacts:
          x-fern-type-name: RequiredForContacts
          type: boolean
          description: Whether the attribute is required to be filled in when contacts
            are creating the ticket in Messenger.
          default: false
          example: false
        visible_on_create:
          x-fern-type-name: Visible
          type: boolean
          description: Whether the attribute is visible to teammates when creating
            a ticket in Inbox.
          default: true
          example: true
        visible_to_contacts:
          x-fern-type-name: VisibleToContacts
          type: boolean
          description: Whether the attribute is visible to contacts when creating
            a ticket in Messenger.
          default: true
          example: true
        multiline:
          x-fern-type-name: Multiline
          type: boolean
          description: Whether the attribute allows multiple lines of text (only applicable
            to string attributes)
          example: false
        list_items:
          x-fern-type-name: ListItems
          type: string
          description: A comma delimited list of items for the attribute value (only
            applicable to list attributes)
          example: Low Priority,Medium Priority,High Priority
        allow_multiple_values:
          x-fern-type-name: AllowMultipleValues
          type: boolean
          description: Whether the attribute allows multiple files to be attached
            to it (only applicable to file attributes)
          example: false
        archived:
          x-fern-type-name: Archived
          type: boolean
          description: Whether the attribute should be archived and not shown during
            creation of the ticket (it will still be present on previously created
            tickets)
          example: false
    update_ticket_type_request:
      description: |
        The request payload for updating a ticket type.
        You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
      type: object
      title: Update Ticket Type Request Payload
      nullable: true
      properties:
        name:
          x-fern-type-name: Name
          type: string
          description: The name of the ticket type.
          example: Bug
        description:
          x-fern-type-name: Description
          type: string
          description: The description of the ticket type.
          example: A bug has been occured
        category:
          x-fern-type-name: Category
          type: string
          description: Category of the Ticket Type.
          enum:
            - Customer
            - Back-office
            - Tracker
          example: Customer
        icon:
          x-fern-type-name: Icon
          type: string
          description: The icon of the ticket type.
          example: "\U0001F41E"
          default: "\U0001F39F️"
        archived:
          x-fern-type-name: Archived
          type: boolean
          description: The archived status of the ticket type.
          example: false
        is_internal:
          x-fern-type-name: Internal
          type: boolean
          description: Whether the tickets associated with this ticket type are intended
            for internal use only or will be shared with customers. This is currently
            a limited attribute.
          example: false
          default: false
    update_visitor_request:
      description: Update an existing visitor.
      type: object
      title: Update Visitor Request Payload
      properties:
        id:
          x-fern-type-name: Id
          type: string
          description: A unique identified for the visitor which is given by Intercom.
          example: 8a88a590-e
        user_id:
          x-fern-type-name: UserId
          type: string
          description: A unique identified for the visitor which is given by you.
          example: '123'
        name:
          x-fern-type-name: Name
          type: string
          description: The visitor's name.
          example: Christian Bale
        custom_attributes:
          x-fern-type-name: CustomAttributes
          type: object
          description: The custom attributes which are set for the visitor.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
      anyOf:
        - required:
            - id
        - required:
            - user_id
    visitor:
      title: Visitor
      type: object
      description: Visitors are useful for representing anonymous people that have
        not yet been identified. They usually represent website visitors. Visitors
        are not visible in Intercom platform. The Visitors resource provides methods
        to fetch, update, convert and delete.
      nullable: true
      properties:
        type:
          x-fern-type-name: Type
          type: string
          description: Value is 'visitor'
          default: visitor
          example: visitor
        id:
          x-fern-type-name: Id
          type: string
          description: The Intercom defined id representing the Visitor.
          example: 530370b477ad7120001d
        user_id:
          x-fern-type-name: UserId
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        anonymous:
          x-fern-type-name: Anonymous
          type: boolean
          description: Identifies if this visitor is anonymous.
          example: false
        email:
          x-fern-type-name: Email
          type: string
          format: email
          description: The email of the visitor.
          example: jane.doe@example.com
        phone:
          x-fern-type-name: Phone
          type: string
          nullable: true
          description: The phone number of the visitor.
          example: 555-555-5555
        name:
          x-fern-type-name: Name
          type: string
          nullable: true
          description: The name of the visitor.
          example: Jane Doe
        pseudonym:
          x-fern-type-name: Pseudonym
          type: string
          nullable: true
          description: The pseudonym of the visitor.
          example: Red Duck from Dublin
        avatar:
          x-fern-type-name: Avatar
          type: object
          properties:
            type:
              type: string
              description: ''
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the visitor.
              example: https://example.com/avatar.png
        app_id:
          type: string
          description: The id of the app the visitor is associated with.
          example: hfi1bx4l
        companies:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - company.list
              example: company.list
            companies:
              type: array
              items:
                '$ref': '#/components/schemas/company'
        location_data:
          type: object
          properties:
            type:
              type: string
              description: ''
              default: location_data
              example: location_data
            city_name:
              type: string
              description: The city name of the visitor.
              example: Dublin
            continent_code:
              type: string
              description: The continent code of the visitor.
              example: EU
            country_code:
              type: string
              description: The country code of the visitor.
              example: IRL
            country_name:
              type: string
              description: The country name of the visitor.
              example: Ireland
            postal_code:
              type: string
              description: The postal code of the visitor.
              example: D02 N960
            region_name:
              type: string
              description: The region name of the visitor.
              example: Leinster
            timezone:
              type: string
              description: The timezone of the visitor.
              example: Europe/Dublin
        las_request_at:
          type: integer
          description: The time the Lead last recorded making a request.
          example: 1663597260
        created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        remote_created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        signed_up_at:
          type: integer
          description: The time the Visitor signed up for your product.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the Visitor was updated.
          example: 1663597260
        session_count:
          type: integer
          description: The number of sessions the Visitor has had.
          example: 1
        social_profiles:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - social_profile.list
              example: social_profile.list
            social_profiles:
              type: array
              items:
                type: string
        owner_id:
          type: string
          nullable: true
          description: The id of the admin that owns the Visitor.
          example: '5169261'
        unsubscribed_from_emails:
          type: boolean
          description: Whether the Visitor is unsubscribed from emails.
          example: false
        marked_email_as_spam:
          type: boolean
          description: Identifies if this visitor has marked an email as spam.
          example: false
        has_hard_bounced:
          type: boolean
          description: Identifies if this visitor has had a hard bounce.
          example: false
        tags:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - tag.list
              example: tag.list
            tags:
              type: array
              items:
                properties:
                  type:
                    type: string
                    description: The type of the object
                    enum:
                      - tag
                    example: tag
                  id:
                    type: string
                    description: The id of the tag.
                    example: '8482'
                  name:
                    type: string
                    description: The name of the tag.
                    example: tag_name
        segments:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
                - segment.list
              example: segment.list
            segments:
              type: array
              items:
                type: string
        custom_attributes:
          type: object
          description: The custom attributes you have set on the Visitor.
          additionalProperties:
            type: string
        referrer:
          type: string
          nullable: true
          description: The referer of the visitor.
          example: https://www.google.com/
        utm_campaign:
          type: string
          nullable: true
          description: The utm_campaign of the visitor.
          example: intercom-link
        utm_content:
          type: string
          nullable: true
          description: The utm_content of the visitor.
          example: banner
        utm_medium:
          type: string
          nullable: true
          description: The utm_medium of the visitor.
          example: email
        utm_source:
          type: string
          nullable: true
          description: The utm_source of the visitor.
          example: Intercom
        utm_term:
          type: string
          nullable: true
          description: The utm_term of the visitor.
          example: messenger
        do_not_track:
          type: boolean
          nullable: true
          description: Identifies if this visitor has do not track enabled.
          example: false
    visitor_deleted_object:
      title: Visitor Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the visitor which is given by Intercom.
          example: 530370b477ad7120001d
        type:
          type: string
          description: The type of object which was deleted
          enum:
            - visitor
          example: visitor
        user_id:
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://api.intercom.io
    description: The production API server
  - url: https://api.eu.intercom.io
    description: The european API server
  - url: https://api.au.intercom.io
    description: The australian API server
security:
  - bearerAuth: []
tags:
  - name: Admins
    description: Everything about your Admins
  - name: AI Content
    description: |
      With the AI Content APIs, you can create and manage External Pages and Content Import Sources for your Fin Content Library.

      &nbsp;

      *External Pages* are pages that you want Fin to be able to answer questions about. The API for External Pages is a great way to ingest into your Fin Content Library pages that are not publicly accessible and hence can't be crawled by Intercom.

      &nbsp;

      *Content Import Sources* are the sources of those pages, and they are used to determine the default audience for the pages (configured via the UI). You should create a Content Import Source for each source of External Pages that you want to ingest into your Fin Content Library.

      &nbsp;

      You can then iterate through the content from that source via its API and POST it to the External Pages endpoint. That endpoint has an *external_id* parameter which allows you to specify the identifier from the source. The endpoint will then either create a new External Page or update an existing one as appropriate.",
  - name: Articles
    description: Everything about your Articles
  - name: Companies
    description: Everything about your Companies
  - name: Contacts
    description: Everything about your contacts
  - name: Conversations
    description: Everything about your Conversations
    externalDocs:
      description: What is a conversation?
      url: https://www.intercom.com/help/en/articles/4323904-what-is-a-conversation
  - name: Custom Object Instances
    description: Everything about your Custom Object instances.
  - name: Data Attributes
    description: Everything about your Data Attributes
  - name: Data Events
    description: Everything about your Data Events
  - name: Data Export
    description: Everything about your Data Exports
  - name: Help Center
    description: Everything about your Help Center
  - name: Messages
    description: Everything about your messages
  - name: News
    description: Everything about your News
    externalDocs:
      description: News explained
      url: https://www.intercom.com/help/en/articles/6362251-news-explained
  - name: Notes
    description: Everything about your Notes
  - name: Segments
    description: Everything about your Segments
  - name: Subscription Types
    description: Everything about subscription types
  - name: Switch
    description: Everything about Switch
    externalDocs:
      description: 'Meet Switch: from on hold to messaging in just a few taps'
      url: https://www.intercom.com/switch
  - name: Tags
    description: Everything about tags
  - name: Teams
    description: Everything about your Teams
  - name: Ticket States
    description: Everything about your ticket states
  - name: Ticket Type Attributes
    description: Everything about your ticket type attributes
  - name: Ticket Types
    description: Everything about your ticket types
  - name: Tickets
    description: Everything about your tickets
  - name: Visitors
    description: Everything about your Visitors
