---
openapi: 3.0.1
info:
  title: Intercom API
  version: '2.8'
  description: The intercom API reference.
  contact:
    name: Intercom Developer Hub
    url: https://developers.intercom.com
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
paths:
  "/me":
    get:
      summary: Identify an admin
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Admins
      operationId: identifyAdmin
      description: "\nYou can view the currently authorised admin along with the embedded
        app object (a \"workspace\" in legacy terminology).\n\n> \U0001F6A7 Single
        Sign On\n>\n> If you are building a custom \"Log in with Intercom\" flow for
        your site, and you call the `/me` endpoint to identify the logged-in user,
        you should not accept any sign-ins from users with unverified email addresses
        as it poses a potential impersonation security risk.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266675'
                    email: admin1@email.com
                    name: Ciaran1 Lee
                    email_verified: true
                    app:
                      type: app
                      id_code: this_is_an_id1_that_should_be_at_least_40
                      name: MyApp 1
                      created_at: 1677597281
                      secure: false
                      identity_verification: false
                      timezone: America/Los_Angeles
                      region: US
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/assets/default-avatars/admins/128.png
                    has_inbox_seat: true
              schema:
                "$ref": "#/components/schemas/admin_with_app"
  "/admins/{id}/away":
    put:
      summary: Set an admin to away
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given admin
        schema:
          type: integer
      tags:
      - Admins
      operationId: setAwayAdmin
      description: You can set an Admin as away for the Inbox.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin
                    id: '991266676'
                    name: Ciaran2 Lee
                    email: admin2@email.com
                    away_mode_enabled: true
                    away_mode_reassign: true
                    has_inbox_seat: true
                    team_ids: []
              schema:
                "$ref": "#/components/schemas/admin"
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: e3f8f3a9-3610-4f65-aad1-00740862891f
                    errors:
                    - code: admin_not_found
                      message: Admin for admin_id not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 196c1c34-c9ae-4527-b0e1-f381d0b8e7d9
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - away_mode_enabled
              - away_mode_reassign
              properties:
                away_mode_enabled:
                  type: boolean
                  description: Set to "true" to change the status of the admin to
                    away.
                  example: true
                  default: true
                away_mode_reassign:
                  type: boolean
                  description: Set to "true" to assign any new conversation replies
                    to your default inbox.
                  example: false
                  default: false
            examples:
              successful_response:
                summary: Successful response
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              admin_not_found:
                summary: Admin not found
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
              unauthorized:
                summary: Unauthorized
                value:
                  away_mode_enabled: true
                  away_mode_reassign: true
  "/admins/activity_logs":
    get:
      summary: List all activity logs
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: created_at_after
        in: query
        required: true
        description: The start date that you request data for. It must be formatted
          as a UNIX timestamp.
        example: '1676992477'
        schema:
          type: string
      - name: created_at_before
        in: query
        required: false
        description: The end date that you request data for. It must be formatted
          as a UNIX timestamp.
        example: '1677600877'
        schema:
          type: string
      tags:
      - Admins
      operationId: listActivityLogs
      description: You can get a log of activities by all admins in an app.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: activity_log.list
                    pages:
                      type: pages
                      next: 
                      page: 1
                      per_page: 20
                      total_pages: 1
                    activity_logs:
                    - id: bf15b10f-c217-42bb-9f6a-b593819a8db2
                      performed_by:
                        type: admin
                        id: '991266680'
                        email: admin5@email.com
                        ip: 127.0.0.1
                      metadata:
                        message:
                          id: 123
                          title: Initial message title
                        before: Initial message title
                        after: Eventual message title
                      created_at: 1677597288
                      activity_type: message_state_change
                      activity_description: Ciaran5 Lee changed your Initial message
                        title message from Initial message title to Eventual message
                        title.
                    - id: 7d698750-af76-4881-b704-0c73c5fa584f
                      performed_by:
                        type: admin
                        id: '991266680'
                        email: admin5@email.com
                        ip: 127.0.0.1
                      metadata:
                        before: before
                        after: after
                      created_at: 1677597288
                      activity_type: app_name_change
                      activity_description: Ciaran5 Lee changed your app name from
                        before to after.
              schema:
                "$ref": "#/components/schemas/activity_log_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: '09ff8cdf-0fde-4718-9428-51fa3eaceb1c'
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/admins":
    get:
      summary: List all admins
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Admins
      operationId: listAdmins
      description: You can fetch a list of admins for a given workspace.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: admin.list
                    admins:
                    - type: admin
                      email: admin7@email.com
                      id: '991266682'
                      name: Ciaran7 Lee
                      away_mode_enabled: false
                      away_mode_reassign: false
                      has_inbox_seat: true
                      team_ids: []
              schema:
                "$ref": "#/components/schemas/admin_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 807baa85-39f7-45ff-86cd-e6a1bab20354
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/admins/{id}":
    get:
      summary: Retrieve an admin
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given admin
        example: 123
        schema:
          type: integer
      tags:
      - Admins
      operationId: retrieveAdmin
      description: You can retrieve the details of a single admin.
      responses:
        '200':
          description: Admin found
          content:
            application/json:
              examples:
                Admin found:
                  value:
                    type: admin
                    id: '991266684'
                    name: Ciaran9 Lee
                    email: admin9@email.com
                    away_mode_enabled: false
                    away_mode_reassign: false
                    has_inbox_seat: true
                    team_ids: []
              schema:
                "$ref": "#/components/schemas/admin"
        '404':
          description: Admin not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: f944b986-1bcf-42df-b737-a450178e2780
                    errors:
                    - code: admin_not_found
                      message: Admin not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2324f3c6-0027-4b23-a507-b5c5a116e863
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/articles":
    get:
      summary: List all articles
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Articles
      operationId: listArticles
      description: "You can fetch a list of all articles by making a GET request to
        `https://api.intercom.io/articles`.\n\n> \U0001F4D8 How are the articles sorted
        and ordered?\n>\n> Articles will be returned in descending order on the `updated_at`
        attribute. This means if you need to iterate through results then we'll show
        the most recently updated articles first.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      type: pages
                      page: 1
                      per_page: 25
                      total_pages: 1
                    total_count: 1
                    data:
                    - id: '16'
                      type: article
                      workspace_id: this_is_an_id22_that_should_be_at_least_4
                      parent_id: 73
                      parent_type: collection
                      title: This is the article title
                      description: ''
                      body: ''
                      author_id: 991266687
                      state: published
                      created_at: 1677597294
                      updated_at: 1677597294
                      url: http://help-center.test/myapp-22/en/articles/16-this-is-the-article-title
              schema:
                "$ref": "#/components/schemas/article_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e476152f-df93-4ecc-b917-2ae24f57816f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Articles
      operationId: createArticle
      description: You can create a new article by making a POST request to `https://api.intercom.io/articles`.
      responses:
        '200':
          description: article created
          content:
            application/json:
              examples:
                article created:
                  value:
                    id: '19'
                    type: article
                    workspace_id: this_is_an_id26_that_should_be_at_least_4
                    parent_id: 75
                    parent_type: collection
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Thanks for everything
                    description: Description of the Article
                    body: <p class="no-margin">Body of the Article</p>
                    author_id: 991266695
                    state: published
                    created_at: 1677597296
                    updated_at: 1677597296
                    url: http://help-center.test/myapp-26/en/articles/19-thanks-for-everything
              schema:
                "$ref": "#/components/schemas/article"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 15a3e2f9-0eee-4791-b1fe-5b9126e31336
                    errors:
                    - code: parameter_not_found
                      message: author_id must be in the main body or default locale
                        translated_content object
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ccee8610-5720-4681-a548-25140d7c6cc9
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_article_request"
            examples:
              article_created:
                summary: article created
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  author_id: 991266695
                  state: published
                  parent_id: 75
                  parent_type: collection
                  translated_content:
                    fr:
                      title: Merci pour tout
                      description: Description de l'article
                      body: Corps de l'article
                      author_id: 991266695
                      state: published
              bad_request:
                summary: Bad Request
                value:
                  title: Thanks for everything
                  description: Description of the Article
                  body: Body of the Article
                  state: published
  "/articles/{id}":
    get:
      summary: Retrieve an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: retrieveArticle
      description: You can fetch the details of a single article by making a GET request
        to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: Article found
          content:
            application/json:
              examples:
                Article found:
                  value:
                    id: '22'
                    type: article
                    workspace_id: this_is_an_id32_that_should_be_at_least_4
                    parent_id: 78
                    parent_type: collection
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: This is the article title
                    description: ''
                    body: ''
                    author_id: 991266702
                    state: published
                    created_at: 1677597298
                    updated_at: 1677597298
                    url: http://help-center.test/myapp-32/en/articles/22-this-is-the-article-title
              schema:
                "$ref": "#/components/schemas/article"
        '404':
          description: Article not found
          content:
            application/json:
              examples:
                Article not found:
                  value:
                    type: error.list
                    request_id: 973885fc-b39b-47a2-887b-5445bb33caff
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9dc039e7-c7b0-4a69-8802-b8d8027f8108
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: updateArticle
      description: You can update the details of a single article by making a PUT
        request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '25'
                    type: article
                    workspace_id: this_is_an_id38_that_should_be_at_least_4
                    parent_id: 81
                    parent_type: collection
                    statistics:
                      type: article_statistics
                      views: 0
                      conversations: 0
                      reactions: 0
                      happy_reaction_percentage: 0
                      neutral_reaction_percentage: 0
                      sad_reaction_percentage: 0
                    title: Christmas is here!
                    description: ''
                    body: <p class="no-margin">New gifts in store for the jolly season</p>
                    author_id: 991266711
                    state: published
                    created_at: 1677597301
                    updated_at: 1677597302
                    url: http://help-center.test/myapp-38/en/articles/25-christmas-is-here
              schema:
                "$ref": "#/components/schemas/article"
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: 2ad7057c-e83a-4165-b487-0f31b5944e8f
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4ec65e4f-45eb-4b04-8b07-6dc52a5e8dcb
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_article_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
              article_not_found:
                summary: Article Not Found
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
    delete:
      summary: Delete an article
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the article which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Articles
      operationId: deleteArticle
      description: You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '28'
                    object: article
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_article_object"
        '404':
          description: Article Not Found
          content:
            application/json:
              examples:
                Article Not Found:
                  value:
                    type: error.list
                    request_id: f303a1a2-015b-40b7-8b25-d4b9673275ec
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: cc234998-55ac-485c-b201-471fe60fd31f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/help_center/collections":
    get:
      summary: List all collections
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: listAllCollections
      description: "You can fetch a list of all collections by making a GET request
        to `https://api.intercom.io/help_center/collections`.\n\n> \U0001F4D8 How
        are the collections sorted and ordered?\n>\n> Collections will be returned
        in descending order on the `updated_at` attribute. This means if you need
        to iterate through results then we'll show the most recently updated collections
        first.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - id: '87'
                      workspace_id: this_is_an_id50_that_should_be_at_least_4
                      name: English collection title
                      url: http://help-center.test/myapp-50/collection-15
                      order: 15
                      created_at: 1677597306
                      updated_at: 1677597306
                      description: english collection description
                      icon: bookmark
                      type: collection
                    total_count: 1
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
              schema:
                "$ref": "#/components/schemas/collection_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 699beff6-f6c3-4c4f-86fd-8fdd9c96eca1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: createCollection
      description: You can create a new collection by making a POST request to `https://api.intercom.io/help_center/collections.`
      responses:
        '200':
          description: collection created
          content:
            application/json:
              examples:
                collection created:
                  value:
                    id: '93'
                    workspace_id: this_is_an_id54_that_should_be_at_least_4
                    name: Thanks for everything
                    url: http://help-center.test/myapp-54/
                    order: 1
                    created_at: 1677597308
                    updated_at: 1677597308
                    description: 
                    icon: book-bookmark
                    type: collection
              schema:
                "$ref": "#/components/schemas/collection"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: '0623900f-c890-44ef-8cb5-d8eba8ad7aa2'
                    errors:
                    - code: parameter_not_found
                      message: Name is a required parameter.
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9d2cffbe-d1d0-432d-8293-1754602f9bcf
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_collection_request"
            examples:
              collection_created:
                summary: collection created
                value:
                  name: Thanks for everything
              bad_request:
                summary: Bad Request
                value:
                  description: Missing required parameter
  "/help_center/collections/{id}":
    get:
      summary: Retrieve a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: retrieveCollection
      description: You can fetch the details of a single collection by making a GET
        request to `https://api.intercom.io/help_center/collections/<id>`.
      responses:
        '200':
          description: Collection found
          content:
            application/json:
              examples:
                Collection found:
                  value:
                    id: '98'
                    workspace_id: this_is_an_id60_that_should_be_at_least_4
                    name: English collection title
                    url: http://help-center.test/myapp-60/collection-20
                    order: 20
                    created_at: 1677597309
                    updated_at: 1677597309
                    description: english collection description
                    icon: bookmark
                    type: collection
              schema:
                "$ref": "#/components/schemas/collection"
        '404':
          description: Collection not found
          content:
            application/json:
              examples:
                Collection not found:
                  value:
                    type: error.list
                    request_id: 4ebfee51-7017-4e2b-8b18-4224109aee51
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3c3befb0-40e8-4386-84d7-a1d403654549
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: updateCollection
      description: You can update the details of a single collection by making a PUT
        request to `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '104'
                    workspace_id: this_is_an_id66_that_should_be_at_least_4
                    name: Update collection name
                    url: http://help-center.test/myapp-66/collection-23
                    order: 23
                    created_at: 1677597311
                    updated_at: 1677597312
                    description: english collection description
                    icon: bookmark
                    type: collection
              schema:
                "$ref": "#/components/schemas/collection"
        '404':
          description: Collection Not Found
          content:
            application/json:
              examples:
                Collection Not Found:
                  value:
                    type: error.list
                    request_id: 25be6aa2-96ce-4fff-ad57-2fd7d2b6ce91
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f3cef84b-57f4-437c-a1f3-85817fdc894e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_collection_request"
            examples:
              successful:
                summary: successful
                value:
                  name: Update collection name
              collection_not_found:
                summary: Collection Not Found
                value:
                  name: Update collection name
    delete:
      summary: Delete a collection
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the collection which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: deleteCollection
      description: You can delete a single collection by making a DELETE request to
        `https://api.intercom.io/collections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '110'
                    object: collection
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_collection_object"
        '404':
          description: collection Not Found
          content:
            application/json:
              examples:
                collection Not Found:
                  value:
                    type: error.list
                    request_id: e4389156-1f82-4ac2-a5f7-2be213bb9f9a
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b1ac9e3d-f25c-46c1-87d7-0f53737f9928
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/help_center/sections":
    get:
      summary: List all sections
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: listAllSections
      description: "You can fetch a list of all sections by making a GET request to
        `https://api.intercom.io/help_center/sections`.\n> \U0001F4D8 How are the
        sections sorted and ordered?\n>\n> Sections will be returned in descending
        order on the `updated_at` attribute. This means if you need to iterate through
        results then we'll show the most recently updated sections first.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - id: '117'
                      workspace_id: this_is_an_id78_that_should_be_at_least_4
                      name: English section title
                      url: http://help-center.test/myapp-78/section-15
                      order: 15
                      created_at: 1677597315
                      updated_at: 1677597315
                      type: section
                      parent_id: 116
                    total_count: 1
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
              schema:
                "$ref": "#/components/schemas/section_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1d45cd99-fbb5-4370-8a9d-9fe23ebd4681
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a section
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Help Center
      operationId: createSection
      description: You can create a new section by making a POST request to `https://api.intercom.io/help_center/sections.`
      responses:
        '200':
          description: section created
          content:
            application/json:
              examples:
                section created:
                  value:
                    id: '122'
                    workspace_id: this_is_an_id82_that_should_be_at_least_4
                    name: Thanks for everything
                    url: http://help-center.test/myapp-82/
                    order: 1
                    created_at: 1677597316
                    updated_at: 1677597316
                    type: section
                    parent_id: '120'
              schema:
                "$ref": "#/components/schemas/section"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: e12ecff6-bbf2-4d56-819c-a031ff89c24e
                    errors:
                    - code: parameter_invalid
                      message: Parent ID can't be nil
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 888dcb8f-c0c5-4ca8-ab50-92a8cff0eef1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_section_request"
            examples:
              section_created:
                summary: section created
                value:
                  name: Thanks for everything
                  parent_id: 120
              bad_request:
                summary: Bad Request
                value:
                  name: Missing required parameter
  "/help_center/sections/{id}":
    get:
      summary: Retrieve a section
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the section which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: retrieveSection
      description: You can fetch the details of a single section by making a GET request
        to `https://api.intercom.io/help_center/sections/<id>`.
      responses:
        '200':
          description: Section found
          content:
            application/json:
              examples:
                Section found:
                  value:
                    id: '128'
                    workspace_id: this_is_an_id88_that_should_be_at_least_4
                    name: English section title
                    url: http://help-center.test/myapp-88/section-20
                    order: 20
                    created_at: 1677597318
                    updated_at: 1677597318
                    type: section
                    parent_id: 127
              schema:
                "$ref": "#/components/schemas/section"
        '404':
          description: Section not found
          content:
            application/json:
              examples:
                Section not found:
                  value:
                    type: error.list
                    request_id: ebb53c47-4d61-471f-b99f-f2b109d681b6
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ffe9629f-0710-4daf-a5dc-dddff823f570
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a section
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the section which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: updateSection
      description: You can update the details of a single section by making a PUT
        request to `https://api.intercom.io/sections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '134'
                    workspace_id: this_is_an_id94_that_should_be_at_least_4
                    name: Update section name
                    url: http://help-center.test/myapp-94/section-23
                    order: 23
                    created_at: 1677597319
                    updated_at: 1677597320
                    type: section
                    parent_id: '133'
              schema:
                "$ref": "#/components/schemas/section"
        '404':
          description: Section Not Found
          content:
            application/json:
              examples:
                Section Not Found:
                  value:
                    type: error.list
                    request_id: 2441363e-c8e1-452e-bf7c-b00d1b10ad97
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 05b60b88-3e20-4167-a5fe-10a0f902f85e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_section_request"
            examples:
              successful:
                summary: successful
                value:
                  name: Update section name
                  parent_id: 133
              section_not_found:
                summary: Section Not Found
                value:
                  name: Update section name
                  parent_id: 135
    delete:
      summary: Delete a section
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the section which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - Help Center
      operationId: deleteSection
      description: You can delete a single section by making a DELETE request to `https://api.intercom.io/sections/<id>`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '140'
                    object: section
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_section_object"
        '404':
          description: section Not Found
          content:
            application/json:
              examples:
                section Not Found:
                  value:
                    type: error.list
                    request_id: 0a069bf0-de2b-4ae0-a86d-926926ca32e2
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9644ab3c-897f-4d6a-ae08-12febdbf95c5
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies":
    post:
      summary: Create or Update a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Companies
      operationId: createOrUpdateCompany
      description: "You can create or update a company.\n\n> \U0001F4D8 Companies
        with no users\n>\n> Companies will be only visible in Intercom when there
        is at least one associated user.\n\nCompanies are looked up via `company_id`
        in a `POST` request, if not found via `company_id`, the new company will be
        created, if found, that company will be updated.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: company_remote_id
                    id: 63fe1a91a5664f17f07a6e22
                    app_id: this_is_an_id109_that_should_be_at_least_
                    name: my company
                    remote_created_at: 1374138000
                    created_at: 1677597329
                    updated_at: 1677597329
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes:
                      creation_source: api
              schema:
                "$ref": "#/components/schemas/company"
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    type: error.list
                    request_id: 
                    errors:
                    - code: bad_request
                      message: bad 'test' parameter
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c3be2c04-3b26-44b2-9512-b801282b8d96
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_or_update_company_request"
            examples:
              successful:
                summary: Successful
                value:
                  company_id: company_remote_id
                  name: my company
                  remote_created_at: 1374138000
              bad_request:
                summary: Bad Request
                value:
                  test: invalid
    get:
      summary: Retrieve a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: filter
        in: query
        style: form
        required: true
        schema:
          type: object
          oneOf:
          - description: The `company_id` of the company to filter by.
            title: Filter by company_id
            properties:
              company_id:
                type: string
            required:
            - company_id
            additionalProperties: false
          - description: The `name` of the company to filter by.
            title: Filter by name
            properties:
              name:
                type: string
            required:
            - name
            additionalProperties: false
      tags:
      - Companies
      operationId: retrieveCompany
      description: |
        You can fetch a company by either passing in `company_id` or `name` as a query parameter.

        A company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -
          `https://api.intercom.io/companies?name={name}`
          `https://api.intercom.io/companies?company_id={company_id}`
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 63fe1a95a5664f17f07a6e2c
                    app_id: this_is_an_id115_that_should_be_at_least_
                    name: company2
                    remote_created_at: 1677597333
                    created_at: 1677597333
                    updated_at: 1677597333
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 32847022-c7a1-4ec2-8780-b75bd188f5f3
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 545cfddb-d1e3-4459-a24d-0d663cda860a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}":
    get:
      summary: Retrieve a company by ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: RetrieveACompanyById
      description: You can fetch a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 63fe1a99a5664f17f07a6e37
                    app_id: this_is_an_id121_that_should_be_at_least_
                    name: company4
                    remote_created_at: 1677597337
                    created_at: 1677597337
                    updated_at: 1677597337
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 7118d21d-f2db-465b-a21a-1df583343984
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 52c6d938-63da-42eb-97a6-3ad5f2c35d5b
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: UpdateCompany
      description: You can update a single company
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 63fe1a9da5664f17f07a6e41
                    app_id: this_is_an_id127_that_should_be_at_least_
                    name: company5
                    remote_created_at: 1677597341
                    created_at: 1677597341
                    updated_at: 1677597341
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 562bbe66-6942-4bf2-be3f-d26756de34ce
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 650fed23-7fb8-40ff-8f60-76ca6ddeb4a0
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: deleteCompany
      description: You can delete a single company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 63fe1aa1a5664f17f07a6e4b
                    object: company
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_company_object"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: bbc31a89-57c8-469e-a02a-6ef8825e6e28
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5ee9406a-4825-43f2-81f1-ef470aa1a709
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}/contacts":
    get:
      summary: List attached contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: ListAttachedContacts
      description: You can fetch a list of all contacts that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/company_attached_contacts"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 2bafec67-11aa-47c0-ad1f-1770bf1f787b
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a923f4b6-3e08-4258-b78a-831d4e183e37
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/{id}/segments":
    get:
      summary: List attached segments for companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
        schema:
          type: string
      tags:
      - Companies
      operationId: ListAttachedSegmentsForCompanies
      description: You can fetch a list of all segments that belong to a company.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data: []
              schema:
                "$ref": "#/components/schemas/company_attached_segments"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 234f99f2-49a6-4e45-80bc-d6e3d6b486e5
                    errors:
                    - code: company_not_found
                      message: Company Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e1966ee6-2cf8-408b-8f63-1fe9563e54f1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/list":
    post:
      summary: List all companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: page
        in: query
        required: false
        description: what page of results to fetch. Defaults to first page
        example: first page
        schema:
          type: string
      - name: per_page
        in: query
        required: false
        description: how many results per page. Defaults to 15
        example: '15'
        schema:
          type: string
      - name: order
        in: query
        required: false
        description: "`asc` or `desc`. Return the companies in ascending or descending
          order. Defaults to desc"
        example: desc
        schema:
          type: string
      - name: filter
        in: query
        style: form
        required: true
        schema:
          type: object
          oneOf:
          - description: The `id` of the tag to filter by.
            title: Filter by tag
            properties:
              tag_id:
                type: string
            required:
            - tag_id
            additionalProperties: false
          - description: The `id` of the segment to filter by.
            title: Filter by segment
            properties:
              segment_id:
                type: string
            required:
            - segment_id
            additionalProperties: false
      tags:
      - Companies
      operationId: listAllCompanies
      description: "You can list companies. The company list is sorted by the `last_request_at`
        field and by default is ordered descending, most recently requested first.\n\nNote
        that the API does not include companies who have no associated users in list
        responses.\n\n> \U0001F4D8\n>\n> When using the Companies endpoint and the
        pages object to iterate through the returned companies, there is a limit of
        10,000 Companies that can be returned. If you need to list or iterate on more
        than 10,000 Companies, please use the [Scroll API](https://developers.intercom.com/reference#iterating-over-all-companies).\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: remote_companies_scroll_2
                      id: 63fe1aaca5664f17f07a6e67
                      app_id: this_is_an_id151_that_should_be_at_least_
                      name: IntercomQATest1
                      remote_created_at: 1677597356
                      created_at: 1677597356
                      updated_at: 1677597356
                      monthly_spend: 0
                      session_count: 0
                      user_count: 4
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                      type: pages
                      next: 
                      page: 1
                      per_page: 15
                      total_pages: 1
                    total_count: 1
              schema:
                "$ref": "#/components/schemas/company_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: dde358a9-854e-4fee-96c6-2a12a7206893
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/companies/scroll":
    get:
      summary: Scroll over all companies
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: scroll_param
        in: query
        required: false
        description: ''
        schema:
          type: string
      tags:
      - Companies
      operationId: scrollOverAllCompanies
      description: "      The `list all companies` functionality does not work well
        for huge datasets, and can result in errors and performance problems when
        paging deeply. The Scroll API provides an efficient mechanism for iterating
        over all companies in a dataset.\n\n- Each app can only have 1 scroll open
        at a time. You'll get an error message if you try to have more than one open
        per app.\n- If the scroll isn't used for 1 minute, it expires and calls with
        that scroll param will fail\n- If the end of the scroll is reached, \"companies\"
        will be empty and the scroll parameter will expire\n\n> \U0001F4D8 Scroll
        Parameter\n>\n> You can get the first page of companies by simply sending
        a GET request to the scroll endpoint. For subsequent requests you will need
        to use the scroll parameter from the response.\n\n> ❗️ Scroll network timeouts\n>\n>
        Since scroll is often used on large datasets network errors such as timeouts
        can be encountered. When this occurs you will need to restart your scroll
        query as it is not possible to continue from a specific point when using scroll.\n>\n>
        When this occurs you will see a HTTP 500 error with the following message:\n>
        \"Request failed due to an internal network error. Please restart the scroll
        operation.\"\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: remote_companies_scroll_2
                      id: 63fe1aaea5664f17f07a6e6f
                      app_id: this_is_an_id155_that_should_be_at_least_
                      name: IntercomQATest1
                      remote_created_at: 1677597358
                      created_at: 1677597358
                      updated_at: 1677597358
                      monthly_spend: 0
                      session_count: 0
                      user_count: 4
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages: 
                    total_count: 
                    scroll_param: 0fda78bf-53ac-4332-b9b5-398ab86e7741
              schema:
                "$ref": "#/components/schemas/company_scroll"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 12b1d2ac-bdc1-40fb-908d-bb40ece2ce99
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}/companies":
    post:
      summary: Attach a Contact to a Company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the contact which is given by Intercom
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: attachContactToACompany
      description: You can attach a company to a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 63fe1ab2a5664f17f07a6e78
                    app_id: this_is_an_id159_that_should_be_at_least_
                    name: company9
                    remote_created_at: 1677597362
                    created_at: 1677597362
                    updated_at: 1677597362
                    monthly_spend: 0
                    session_count: 0
                    user_count: 1
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Company Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: a8f6a606-0211-4e93-8c5a-e4caa3204fa4
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: '053068f8-8325-468a-a433-860234a691fc'
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the company which is given
                    by Intercom
                  example: 58a430d35458202d41b1e65b
            examples:
              successful:
                summary: Successful
                value:
                  id: 63fe1ab2a5664f17f07a6e78
              company_not_found:
                summary: Company Not Found
                value:
                  id: 63fe1ab4a5664f17f07a6e7c
  "/contacts/{contact_id}/companies/{id}":
    delete:
      summary: Detach a contact from a company
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        required: true
        description: The unique identifier for the contact which is given by Intercom
        example: 58a430d35458202d41b1e65b
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: The unique identifier for the company which is given by Intercom
        example: 58a430d35458202d41b1e65b
        schema:
          type: string
      tags:
      - Companies
      - Contacts
      operationId: dettachContactFromACompany
      description: You can detach a company from a single contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: company
                    company_id: '1'
                    id: 63fe1ab7a5664f17f07a6e84
                    app_id: this_is_an_id165_that_should_be_at_least_
                    name: company12
                    remote_created_at: 1677597367
                    created_at: 1677597367
                    updated_at: 1677597367
                    monthly_spend: 0
                    session_count: 0
                    user_count: 0
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    plan: {}
                    custom_attributes: {}
              schema:
                "$ref": "#/components/schemas/company"
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Company Not Found:
                  value:
                    type: error.list
                    request_id: 89ce8994-a1b0-4eb7-847e-7f0f288c93a5
                    errors:
                    - code: company_not_found
                      message: Company Not Found
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: 6b1c3add-6c66-4d32-9acf-c3f976179b79
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8193be19-3f54-4ae3-80c8-434fbdfecf83
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/companies":
    get:
      summary: List attached companies for contact
      parameters:
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Companies
      operationId: listCompaniesForAContact
      description: You can fetch a list of companies that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: company
                      company_id: '1'
                      id: 63fe1ac9a5664f17f07a6eaa
                      app_id: this_is_an_id173_that_should_be_at_least_
                      name: company25
                      remote_created_at: 1677597385
                      created_at: 1677597385
                      updated_at: 1677597385
                      last_request_at: 1677424585
                      monthly_spend: 0
                      session_count: 0
                      user_count: 1
                      tags:
                        type: tag.list
                        tags: []
                      segments:
                        type: segment.list
                        segments: []
                      plan: {}
                      custom_attributes: {}
                    pages:
                      type: pages
                      next: 
                      page: 1
                      per_page: 50
                      total_pages: 1
                    total_count: 1
              schema:
                "$ref": "#/components/schemas/contact_attached_companies"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 8784335d-9917-47c7-be9b-245d622e8819
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: cd025782-174f-4b0d-91ea-04d3986fb152
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}/notes":
    get:
      summary: List all notes
      parameters:
      - name: id
        in: path
        required: true
        description: The unique identifier of a contact.
        schema:
          type: integer
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Notes
      - Contacts
      operationId: listNotes
      description: You can fetch a list of notes that are associated to a contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                    - type: note
                      id: '26'
                      created_at: 1676992590
                      contact:
                        type: contact
                        id: 63fe1acea5664f17f07a6eb5
                      author:
                        type: admin
                        id: '991266792'
                        name: Ciaran117 Lee
                        email: admin117@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    - type: note
                      id: '25'
                      created_at: 1676906190
                      contact:
                        type: contact
                        id: 63fe1acea5664f17f07a6eb5
                      author:
                        type: admin
                        id: '991266792'
                        name: Ciaran117 Lee
                        email: admin117@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    - type: note
                      id: '24'
                      created_at: 1676906190
                      contact:
                        type: contact
                        id: 63fe1acea5664f17f07a6eb5
                      author:
                        type: admin
                        id: '991266792'
                        name: Ciaran117 Lee
                        email: admin117@email.com
                        away_mode_enabled: false
                        away_mode_reassign: false
                      body: "<p>This is a note.</p>"
                    total_count: 3
                    pages:
                      type: pages
                      next: 
                      page: 1
                      per_page: 50
                      total_pages: 1
              schema:
                "$ref": "#/components/schemas/note_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 5e6d93fe-0533-421f-a68a-5f60344742ba
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a note
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given contact.
        example: '123'
        schema:
          type: integer
      tags:
      - Notes
      - Contacts
      operationId: createNote
      description: You can add a note to a single contact.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: note
                    id: '31'
                    created_at: 1677597392
                    contact:
                      type: contact
                      id: 63fe1ad0a5664f17f07a6eb7
                    author:
                      type: admin
                      id: '991266794'
                      name: Ciaran119 Lee
                      email: admin119@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: "<p>Hello</p>"
              schema:
                "$ref": "#/components/schemas/note"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Admin not found:
                  value:
                    type: error.list
                    request_id: a4cd9962-e4c2-418c-bbea-336d5824036a
                    errors:
                    - code: not_found
                      message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: c72993ea-790e-4e46-b1d6-74195a4686e3
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - body
              properties:
                body:
                  type: string
                  description: The text of the note.
                  example: New note
                contact_id:
                  type: string
                  description: The unique identifier of a given contact.
                  example: '123'
                admin_id:
                  type: string
                  description: The unique identifier of a given admin.
                  example: '123'
            examples:
              successful_response:
                summary: Successful response
                value:
                  contact_id: 63fe1ad0a5664f17f07a6eb7
                  admin_id: 991266794
                  body: Hello
              admin_not_found:
                summary: Admin not found
                value:
                  contact_id: 63fe1ad1a5664f17f07a6eb8
                  admin_id: 123
                  body: Hello
              contact_not_found:
                summary: Contact not found
                value:
                  contact_id: 123
                  admin_id: 991266796
                  body: Hello
  "/contacts/{contact_id}/segments":
    get:
      summary: List attached segments for contact
      parameters:
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Segments
      operationId: listSegmentsForAContact
      description: You can fetch a list of segments that are associated to a contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: segment
                      id: 63fe1ad2a5664f17f07a6eba
                      name: segment
                      created_at: 1677597394
                      updated_at: 1677597394
                      person_type: user
              schema:
                "$ref": "#/components/schemas/contact_segments"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: b552824b-535a-420d-8f12-8059ab95055b
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 7250691d-6a79-404b-8e12-bef2021cfa34
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/subscriptions":
    get:
      summary: List subscriptions for a contact
      parameters:
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      - Subscription Types
      operationId: listSubscriptionsForAContact
      description: |
        You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type.
        This will return a list of Subscription Type objects that the contact is associated with.

        The data property will show a combined list of:

          1.Opt-out subscription types that the user has opted-out from.
          2.Opt-in subscription types that the user has opted-in to receiving.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: subscription
                      id: '47'
                      state: live
                      consent_type: opt_out
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - email
                    - type: subscription
                      id: '49'
                      state: live
                      consent_type: opt_in
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 5cd50131-7934-43d1-aa82-fa20ccb40e6d
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 484ded85-2afb-444b-ba04-faa2a25dee6f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Add subscription to a contact
      tags:
      - Subscription Types
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: attachSubscriptionTypeToContact
      description: |
        You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:

          1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.

          2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.

        This will return a subscription type model for the subscription type that was added to the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '62'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                    - name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    content_types:
                    - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type"
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 2b883beb-c8bc-442b-8c3f-eafde0e80c5d
                    errors:
                    - code: not_found
                      message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: 8670181e-0ef4-49b8-9fec-9b1710991674
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: ef84b361-8562-4e91-a26c-e0813833a8f5
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - consent_type
              properties:
                id:
                  type: string
                  description: The unique identifier for the subscription which is
                    given by Intercom
                  example: '37846'
                consent_type:
                  type: string
                  description: The consent_type of a subscription, opt_out or opt_in.
                  example: opt_in
            examples:
              successful:
                summary: Successful
                value:
                  id: 62
                  consent_type: opt_in
              contact_not_found:
                summary: Contact not found
                value:
                  id: 66
                  consent_type: opt_in
              resource_not_found:
                summary: Resource not found
                value:
                  id: invalid_id
                  consent_type: opt_in
  "/contacts/{contact_id}/subscriptions/{id}":
    delete:
      summary: Remove subscription from a contact
      tags:
      - Subscription Types
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The unique identifier for the subscription type which is given
          by Intercom
        example: '37846'
        required: true
        schema:
          type: string
      operationId: detachSubscriptionTypeToContact
      description: You can remove a specific subscription from a contact. This will
        return a subscription type model for the subscription type that was removed
        from the contact.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: subscription
                    id: '78'
                    state: live
                    consent_type: opt_in
                    default_translation:
                      name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    translations:
                    - name: Newsletters
                      description: Lorem ipsum dolor sit amet
                      locale: en
                    content_types:
                    - sms_message
              schema:
                "$ref": "#/components/schemas/subscription_type"
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 4623070d-b47f-4064-991b-d686b22f672f
                    errors:
                    - code: not_found
                      message: User Not Found
                Resource not found:
                  value:
                    type: error.list
                    request_id: 675e8e72-1ded-4b4b-809e-59086aec1be6
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: de8c38f7-4274-4933-a74e-90f79cdfbfe2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{contact_id}/tags":
    get:
      summary: List tags attached to a contact
      tags:
      - Contacts
      - Tags
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: listTagsForAContact
      description: You can fetch a list of all tags that are attached to a specific
        contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: tag
                      id: '56'
                      name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag_list"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: c1476bb7-37d3-4356-b16a-fa2202038435
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b4498c61-97c2-4afa-b64e-0aa8b2dc8e15
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Add tag to a contact
      tags:
      - Tags
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      operationId: attachTagToContact
      description: You can tag a specific contact. This will return a tag object for
        the tag that was added to the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '57'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 1980c622-72ab-4fdf-b34e-f7259549fac2
                    errors:
                    - code: not_found
                      message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: c486f8f8-baf0-4f4c-9b39-44744d57e5f2
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4a4de894-86ed-48c3-afde-98f064cb205a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
            examples:
              successful:
                summary: successful
                value:
                  id: 57
              contact_not_found:
                summary: Contact not found
                value:
                  id: 58
              tag_not_found:
                summary: Tag not found
                value:
                  id: '123'
  "/contacts/{contact_id}/tags/{id}":
    delete:
      summary: Remove tag from a contact
      tags:
      - Tags
      - Contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: contact_id
        in: path
        description: The unique identifier for the contact which is given by Intercom
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The unique identifier for the tag which is given by Intercom
        example: '7522907'
        required: true
        schema:
          type: string
      operationId: detachTagFromContact
      description: You can remove tag from a specific contact. This will return a
        tag object for the tag that was removed from the contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '60'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Contact not found:
                  value:
                    type: error.list
                    request_id: 17009683-ff7c-4c6e-8765-49cfc187e987
                    errors:
                    - code: not_found
                      message: User Not Found
                Tag not found:
                  value:
                    type: error.list
                    request_id: 1a7dc2b4-a5e6-467e-b82e-400935e6b39e
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6ecc327b-95a9-4ccc-85b9-599c7cfae308
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/{id}":
    put:
      summary: Update a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: UpdateContact
      description: You can update an existing contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 63fe1ae5a5664f17f07a6ed1
                    workspace_id: this_is_an_id239_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone: 
                    name: Joe Bloggs
                    avatar: 
                    owner_id: 
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1677597413
                    updated_at: 1677597413
                    signed_up_at: 1677597413
                    last_seen_at: 
                    last_replied_at: 
                    last_contacted_at: 
                    last_email_opened_at: 
                    last_email_clicked_at: 
                    language_override: 
                    browser: 
                    browser_version: 
                    browser_language: 
                    os: 
                    location:
                      type: location
                      country: 
                      region: 
                      city: 
                      country_code: 
                      continent_code: 
                    android_app_name: 
                    android_app_version: 
                    android_device: 
                    android_os_version: 
                    android_sdk_version: 
                    android_last_seen_at: 
                    ios_app_name: 
                    ios_app_version: 
                    ios_device: 
                    ios_os_version: 
                    ios_sdk_version: 
                    ios_last_seen_at: 
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae5a5664f17f07a6ed1/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae5a5664f17f07a6ed1/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae5a5664f17f07a6ed1/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae5a5664f17f07a6ed1/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae5a5664f17f07a6ed1/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    referrer: 
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: e34a6b13-8eab-46a9-8e20-c53bca7ac742
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    get:
      summary: Get a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: ShowContact
      description: You can fetch the details of a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 63fe1ae8a5664f17f07a6ed2
                    workspace_id: this_is_an_id243_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone: 
                    name: Joe Bloggs
                    avatar: 
                    owner_id: 
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1677597416
                    updated_at: 1677597416
                    signed_up_at: 1677597416
                    last_seen_at: 
                    last_replied_at: 
                    last_contacted_at: 
                    last_email_opened_at: 
                    last_email_clicked_at: 
                    language_override: 
                    browser: 
                    browser_version: 
                    browser_language: 
                    os: 
                    location:
                      type: location
                      country: 
                      region: 
                      city: 
                      country_code: 
                      continent_code: 
                    android_app_name: 
                    android_app_version: 
                    android_device: 
                    android_os_version: 
                    android_sdk_version: 
                    android_last_seen_at: 
                    ios_app_name: 
                    ios_app_version: 
                    ios_device: 
                    ios_os_version: 
                    ios_sdk_version: 
                    ios_last_seen_at: 
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae8a5664f17f07a6ed2/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae8a5664f17f07a6ed2/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae8a5664f17f07a6ed2/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae8a5664f17f07a6ed2/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1ae8a5664f17f07a6ed2/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    referrer: 
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 06d29d85-9a20-412e-9b98-765e70bcf93a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: DeleteContact
      description: You can delete a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 63fe1aeaa5664f17f07a6ed3
                    object: contact
                    deleted: true
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fb7b4f24-9872-44fb-aefa-a6bbb5b9cc9f
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/contacts/merge":
    post:
      summary: Merge a lead and a user
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: MergeContact
      description: You can merge a contact with a `role` of `lead` into a contact
        with a `role` of `user`.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 63fe1aeca5664f17f07a6ed5
                    workspace_id: this_is_an_id251_that_should_be_at_least_
                    external_id: '70'
                    role: user
                    email: joe@bloggs.com
                    phone: 
                    name: Joe Bloggs
                    avatar: 
                    owner_id: 
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1677597420
                    updated_at: 1677597421
                    signed_up_at: 1677597420
                    last_seen_at: 
                    last_replied_at: 
                    last_contacted_at: 
                    last_email_opened_at: 
                    last_email_clicked_at: 
                    language_override: 
                    browser: 
                    browser_version: 
                    browser_language: 
                    os: 
                    location:
                      type: location
                      country: 
                      region: 
                      city: 
                      country_code: 
                      continent_code: 
                    android_app_name: 
                    android_app_version: 
                    android_device: 
                    android_os_version: 
                    android_sdk_version: 
                    android_last_seen_at: 
                    ios_app_name: 
                    ios_app_version: 
                    ios_device: 
                    ios_os_version: 
                    ios_sdk_version: 
                    ios_last_seen_at: 
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/63fe1aeca5664f17f07a6ed5/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/63fe1aeca5664f17f07a6ed5/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/63fe1aeca5664f17f07a6ed5/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1aeca5664f17f07a6ed5/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1aeca5664f17f07a6ed5/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    referrer: 
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 145f1c1d-978d-4ca0-b477-6ad261e18511
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/merge_contacts_request"
            examples:
              successful:
                summary: successful
                value:
                  from: 63fe1aeca5664f17f07a6ed4
                  into: 63fe1aeca5664f17f07a6ed5
  "/contacts/search":
    post:
      summary: Search contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: SearchContacts
      description: "You can search for multiple contacts by the value of their attributes
        in order to fetch exactly who you want.\n\nTo search for contacts, you need
        to send a POST request to `https://api.intercom.io/contacts/search`. This
        will accept a query object in the body which will define your filters in order
        to search for contacts.\n\n> \U0001F6A7 Why is there a delay when creating
        contacts and searching for them?\n>\n> If a contact has recently been created,
        there is a possibility that it will not yet be available when searching. This
        means that it may not appear in the response. This delay can take a few minutes.
        If you need to be instantly notified then you could use webhooks instead,
        which you'd currently have to iterate on to see if they match your search
        filters.\n\n> \U0001F6A7 Nesting & Limitations\n>\n> You can nest these filters
        in order to get even more granular insights that pinpoint exactly what you
        need. Example: (1 OR 2) AND (3 OR 4).\n> There are some limitations to the
        amount of multiple's there can be:\n> * There's a limit of max 2 nested filters\n>
        * There's a limit of max 15 filters for each AND or OR group\n\n> \U0001F6A7
        Searching for Timestamp Fields\n\n> All timestamp fields (created_at, updated_at
        etc.) are indexed as Dates for Contact Search queries; Datetime queries are
        not currently supported. This means you can only query for timestamp fields
        by day - not hour, minute or second.\n> For example, if you search for all
        Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp
        for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January
        1st, 2020 12:00 AM). The search results will then include Contacts created
        from January 2nd, 2020 12:00 AM onwards.\n> If you'd like to get contacts
        created on January 1st, 2020 you should search with a created_at value equal
        (=) to 1577836800 (January 1st, 2020 12:00 AM).\n> This behaviour applies
        only to timestamps used in search queries. The search results will still contain
        the full UNIX timestamp and be sorted accordingly.\n\n### Accepted Fields\n\nMost
        key listed as part of the Contacts Model are searchable, whether writeable
        or not. The value you search for has to match the accepted type, otherwise
        the query will fail (ie. as `created_at` accepts a date, the `value` cannot
        be a string such as `\"foorbar\"`).\n\n| Field                              |
        Type                           |\n| ---------------------------------- | ------------------------------
        |\n| id                                 | String                         |\n|
        role                               | String<br>Accepts user or lead |\n| name
        \                              | String                         |\n| avatar
        \                            | String                         |\n| owner_id
        \                          | Integer                        |\n| email                              |
        String                         |\n| phone                              | String
        \                        |\n| external_id                        | String
        \                        |\n| created_at                         | Date (UNIX
        Timestamp)          |\n| signed_up_at                       | Date (UNIX Timestamp)
        \         |\n| updated_at                         | Date (UNIX Timestamp)
        \         |\n| last_seen_at                       | Date (UNIX Timestamp)
        \         |\n| last_contacted_at                  | Date (UNIX Timestamp)
        \         |\n| last_replied_at                    | Date (UNIX Timestamp)
        \         |\n| last_email_opened_at               | Date (UNIX Timestamp)
        \         |\n| last_email_clicked_at              | Date (UNIX Timestamp)
        \         |\n| language_override                  | String                         |\n|
        browser                            | String                         |\n| browser_language
        \                  | String                         |\n| os                                 |
        String                         |\n| location.country                   | String
        \                        |\n| location.region                    | String
        \                        |\n| location.city                      | String
        \                        |\n| unsubscribed_from_emails           | Boolean
        \                       |\n| marked_email_as_spam               | Boolean
        \                       |\n| has_hard_bounced                   | Boolean
        \                       |\n| ios_last_seen_at                   | Date (UNIX
        Timestamp)          |\n| ios_app_version                    | String                         |\n|
        ios_device                         | String                         |\n| ios_app_device
        \                    | String                         |\n| ios_os_version
        \                    | String                         |\n| ios_app_name                       |
        String                         |\n| ios_sdk_version                    | String
        \                        |\n| android_last_seen_at               | Date (UNIX
        Timestamp)          |\n| android_app_version                | String                         |\n|
        android_device                     | String                         |\n| android_app_name
        \                  | String                         |\n| andoid_sdk_version
        \                | String                         |\n| segment_id                         |
        String                         |\n| tag_id                             | String
        \                        |\n| custom_attributes.{attribute_name} | String
        \                        |\n\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 50
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/contact_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8133cbec-1403-4864-8531-9ebfe24e6e56
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/search_request"
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                    - field: id
                      operator: "="
                      value: 63fe1aefa5664f17f07a6ed8
                    - operator: OR
                      value:
                      - field: id
                        operator: "="
                        value: 63fe1aefa5664f17f07a6ed8
                      - field: id
                        operator: "="
                        value: 63fe1aefa5664f17f07a6ed8
  "/contacts":
    get:
      summary: List all contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: ListContacts
      description: You can fetch a list of all contacts.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data: []
                    total_count: 0
                    pages:
                      type: pages
                      page: 1
                      per_page: 10
                      total_pages: 0
              schema:
                "$ref": "#/components/schemas/contact_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c2eb94f0-448e-4d09-99ef-782dcd2028c1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Contacts
      operationId: CreateContact
      description: You can create a new contact (ie. user or lead).
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: contact
                    id: 63fe1af5a5664f17f07a6eda
                    workspace_id: this_is_an_id263_that_should_be_at_least_
                    external_id: 
                    role: user
                    email: joebloggs@intercom.io
                    phone: 
                    name: 
                    avatar: 
                    owner_id: 
                    social_profiles:
                      type: list
                      data: []
                    has_hard_bounced: false
                    marked_email_as_spam: false
                    unsubscribed_from_emails: false
                    created_at: 1677597429
                    updated_at: 1677597429
                    signed_up_at: 
                    last_seen_at: 
                    last_replied_at: 
                    last_contacted_at: 
                    last_email_opened_at: 
                    last_email_clicked_at: 
                    language_override: 
                    browser: 
                    browser_version: 
                    browser_language: 
                    os: 
                    location:
                      type: location
                      country: 
                      region: 
                      city: 
                      country_code: 
                      continent_code: 
                    android_app_name: 
                    android_app_version: 
                    android_device: 
                    android_os_version: 
                    android_sdk_version: 
                    android_last_seen_at: 
                    ios_app_name: 
                    ios_app_version: 
                    ios_device: 
                    ios_os_version: 
                    ios_sdk_version: 
                    ios_last_seen_at: 
                    custom_attributes: {}
                    tags:
                      type: list
                      data: []
                      url: "/contacts/63fe1af5a5664f17f07a6eda/tags"
                      total_count: 0
                      has_more: false
                    notes:
                      type: list
                      data: []
                      url: "/contacts/63fe1af5a5664f17f07a6eda/notes"
                      total_count: 0
                      has_more: false
                    companies:
                      type: list
                      data: []
                      url: "/contacts/63fe1af5a5664f17f07a6eda/companies"
                      total_count: 0
                      has_more: false
                    opted_out_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1af5a5664f17f07a6eda/subscriptions"
                      total_count: 0
                      has_more: false
                    opted_in_subscription_types:
                      type: list
                      data: []
                      url: "/contacts/63fe1af5a5664f17f07a6eda/subscriptions"
                      total_count: 0
                      has_more: false
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    referrer: 
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f25d0966-ff24-4fce-817c-5c89c17e0a0d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/create_contact_request"
            examples:
              successful:
                summary: successful
                value:
                  email: joebloggs@intercom.io
  "/contacts/{id}/archive":
    post:
      summary: Archive contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: ArchiveContact
      description: You can archive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 63fe1af7a5664f17f07a6edb
                    object: contact
                    archived: true
              schema:
                "$ref": "#/components/schemas/contact"
  "/contacts/{id}/unarchive":
    post:
      summary: Unarchive contact
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: id
        example: 63a07ddf05a32042dffac965
        required: true
        schema:
          type: string
      tags:
      - Contacts
      operationId: UnarchiveContact
      description: You can unarchive a single contact.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: 63fe1af8a5664f17f07a6edc
                    object: contact
                    archived: false
              schema:
                "$ref": "#/components/schemas/contact"
  "/conversations/{conversation_id}/tags":
    post:
      summary: Add tag to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        description: conversation_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Conversations
      operationId: attachTagToConversation
      description: You can tag a specific conversation. This will return a tag object
        for the tag that was added to the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '62'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Conversation not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: fb971c1f-f8f9-4944-a890-aeb601ebb55f
                    errors:
                    - code: not_found
                      message: Conversation not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: fafe2c33-38b9-48e9-9b5f-6681555bb92e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - admin_id
              properties:
                id:
                  type: string
                  description: The unique identifier for the tag which is given by
                    Intercom
                  example: '7522907'
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '780'
            examples:
              successful:
                summary: successful
                value:
                  id: 62
                  admin_id: 991266827
              conversation_not_found:
                summary: Conversation not found
                value:
                  id: 63
                  admin_id: 991266829
  "/conversations/{conversation_id}/tags/{id}":
    delete:
      summary: Remove tag from a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        description: conversation_id
        example: '64619700005694'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id
        example: '7522907'
        required: true
        schema:
          type: string
      tags:
      - Tags
      - Conversations
      operationId: detachTagFromConversation
      description: You can remove tag from a specific conversation. This will return
        a tag object for the tag that was removed from the conversation.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: tag
                    id: '65'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 02a5d1de-5b42-4077-a521-9c99ac073b21
                    errors:
                    - code: not_found
                      message: Conversation not found
                Tag not found:
                  value:
                    type: error.list
                    request_id: d238e6d5-2074-4cbd-a5e5-b396a29cccbb
                    errors:
                    - code: tag_not_found
                      message: Tag not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3692c60a-df0f-4763-9c3a-5e3b3cd70b45
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - admin_id
              properties:
                admin_id:
                  type: string
                  description: The unique identifier for the admin which is given
                    by Intercom.
                  example: '123'
            examples:
              successful:
                summary: successful
                value:
                  admin_id: 991266831
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991266833
              tag_not_found:
                summary: Tag not found
                value:
                  admin_id: 991266834
  "/conversations":
    get:
      summary: List all conversations
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: per_page
        in: query
        schema:
          type: integer
          default: 20
          maximum: 150
        required: false
        description: How many results per page
      - name: starting_after
        in: query
        required: false
        description: String used to get the next page of conversations.
        schema:
          type: string
      tags:
      - Conversations
      operationId: listConversations
      description: |
        You can fetch a list of all conversations.

        You can optionally request the result page size and the cursor to start after to fetch the result
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 20
                      total_pages: 1
                    total_count: 1
                    conversations:
                    - type: conversation
                      id: '148'
                      created_at: 1677597441
                      updated_at: 1677597441
                      waiting_since: 
                      snoozed_until: 
                      source:
                        type: conversation
                        id: '403918149'
                        delivered_as: admin_initiated
                        subject: ''
                        body: "<p>this is the message body</p>"
                        author:
                          type: admin
                          id: '991266837'
                          name: Ciaran159 Lee
                          email: admin159@email.com
                        attachments: []
                        url: 
                        redacted: false
                      contacts:
                        type: contact.list
                        contacts:
                        - type: contact
                          id: 63fe1b00a5664f17f07a6ee0
                      first_contact_reply: 
                      admin_assignee_id: 
                      team_assignee_id: 
                      open: false
                      state: closed
                      read: false
                      tags:
                        type: tag.list
                        tags: []
                      priority: not_priority
                      sla_applied: 
                      statistics: 
                      conversation_rating: 
                      teammates: 
                      title: 
                      custom_attributes: {}
                      topics: {}
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 47a8c384-7ab6-4a97-94bf-daf5f026e5b3
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 5b986ada-90e3-485c-ba5b-8c3b1d57e016
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: createConversation
      description: "You can create a conversation that has been initiated by a contact
        (ie. user or lead).\nThe conversation can be an in-app message only.\n\n>
        \U0001F4D8 Sending for visitors\n>\n> You can also send a message from a visitor
        by specifying their `user_id` or `id` value in the `from` field, along with
        a `type` field value of `contact`.\n> This visitor will be automatically converted
        to a contact with a lead role once the conversation is created.\n\nThis will
        return the Message model that has been created.\n\n"
      responses:
        '200':
          description: conversation created
          content:
            application/json:
              examples:
                conversation created:
                  value:
                    type: user_message
                    id: '403918159'
                    created_at: 1677597464
                    body: Hello there
                    message_type: inapp
                    conversation_id: '173'
              schema:
                "$ref": "#/components/schemas/message"
        '404':
          description: Contact Not Found
          content:
            application/json:
              examples:
                Contact Not Found:
                  value:
                    type: error.list
                    request_id: 3c0e90c3-5e28-4734-85e8-758f34cf5ad3
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4d042609-fb4e-466f-8f3b-32946af4a4d1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 5424e8a6-800c-4657-8478-400521faf4d5
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_conversation_request"
            examples:
              conversation_created:
                summary: conversation created
                value:
                  from:
                    type: user
                    id: 63fe1b16a5664f17f07a6ef5
                  body: Hello there
              contact_not_found:
                summary: Contact Not Found
                value:
                  from:
                    type: user
                    id: 123_doesnt_exist
                  body: Hello there
  "/conversations/{id}":
    get:
      summary: Retrieve a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The id of the conversation to target
        example: 123
        schema:
          type: integer
      - name: display_as
        in: query
        required: false
        description: Set to plaintext to retrieve conversation messages in plain text.
        example: plaintext
        schema:
          type: string
      tags:
      - Conversations
      operationId: retrieveConversation
      description: "\nYou can fetch the details of a single conversation.\n\nThis
        will return a single Conversation model with all its conversation parts.\n\n>
        \U0001F6A7 Hard limit of 500 parts\n>\n> The maximum number of conversation
        parts that can be returned via the API is 500. If you have more than that
        we will return the 500 most recent conversation parts.\n\n"
      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '177'
                    created_at: 1677597472
                    updated_at: 1677597472
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918163'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266851'
                        name: Ciaran166 Lee
                        email: admin166@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b20a5664f17f07a6ef9
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts: []
                      total_count: 0
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 3ee5f0e8-4d53-4f1a-b19a-57222c278a06
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: afeb6558-35a6-4c0e-a779-03656c1570d8
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: e89ab99b-d91c-4e50-adee-5f29c1eeb626
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The id of the conversation to target
        example: 123
        schema:
          type: integer
      - name: display_as
        in: query
        required: false
        description: Set to plaintext to retrieve conversation messages in plain text.
        example: plaintext
        schema:
          type: string
      tags:
      - Conversations
      operationId: updateConversation
      description: "\nYou can update an existing conversation.\n\n> \U0001F4D8\n>\n>
        If you want to update a conversation with either a reply (or actions such
        as assign, unassign, open, close or snooze) then take a look at their own
        sections respectively as they currently require different endpoints and parameters.\n\n"
      responses:
        '200':
          description: conversation found
          content:
            application/json:
              examples:
                conversation found:
                  value:
                    type: conversation
                    id: '181'
                    created_at: 1677597481
                    updated_at: 1677597483
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918167'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266859'
                        name: Ciaran170 Lee
                        email: admin170@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b29a5664f17f07a6efd
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: false
                    state: closed
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes:
                      issue_type: Billing
                      priority: High
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '28'
                        part_type: conversation_attribute_updated_by_admin
                        body: 
                        created_at: 1677597483
                        updated_at: 1677597483
                        notified_at: 1677597483
                        assigned_to: 
                        author:
                          id: '991266860'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id307_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id: 
                        redacted: false
                      - type: conversation_part
                        id: '29'
                        part_type: conversation_attribute_updated_by_admin
                        body: 
                        created_at: 1677597483
                        updated_at: 1677597483
                        notified_at: 1677597483
                        assigned_to: 
                        author:
                          id: '991266860'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id307_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 2
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 036da089-fb62-4d1d-b75e-4a05ec8ea7b2
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a55bde4d-069d-46ad-abed-a070180fc7d8
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 7c09dd37-ec5f-4449-900e-a5b52f14517c
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_conversation_request"
            examples:
              conversation_found:
                summary: conversation found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              not_found:
                summary: Not found
                value:
                  read: true
                  custom_attributes:
                    issue_type: Billing
                    priority: High
  "/conversations/search":
    post:
      summary: Search conversations
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: searchConversations
      description: "You can search for multiple conversations by the value of their
        attributes in order to fetch exactly which ones you want.\n\nTo search for
        conversations, you need to send a POST request to https://api.intercom.io/conversations/search.
        This will accept a query object in the body which will define your filters
        in order to search for conversations.\n\n> \U0001F6A7 Nesting & Limitations\n>\n>
        You can nest these filters in order to get even more granular insights that
        pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).\n> There are
        some limitations to the amount of multiple's there can be:\n> - There's a
        limit of max 2 nested filters\n> - There's a limit of max 15 filters for each
        AND or OR group\n\n### Accepted Fields\n\nMost keys listed as part of the
        The conversation model is searchable, whether writeable or not. The value
        you search for has to match the accepted type, otherwise the query will fail
        (ie. as `created_at` accepts a date, the `value` cannot be a string such as
        `\"foorbar\"`).\n\n| Field                                     | Type                                                                                     |\n|
        :---------------------------------------- | :---------------------------------------------------------------------------------------
        |\n| id                                        | String                                                                                   |\n|
        created_at                                | Date (UNIX timestamp)                                                                    |\n|
        updated_at                                | Date (UNIX timestamp)                                                                    |\n|
        source.type                               | String                                                                                   |\n|
        source.id                                 | String                                                                                   |\n|
        source.delivered_as                       | String                                                                                   |\n|
        source.subject                            | String                                                                                   |\n|
        source.body                               | String                                                                                   |\n|
        source.author.id                          | String                                                                                   |\n|
        source.author.type                        | String                                                                                   |\n|
        source.author.name                        | String                                                                                   |\n|
        source.author.email                       | String                                                                                   |\n|
        source.url                                | String                                                                                   |\n|
        contact_ids                               | String                                                                                   |\n|
        teammate_ids                              | String                                                                                   |\n|
        admin_assignee_id                         | String                                                                                   |\n|
        team_assignee_id                          | String                                                                                   |\n|
        channel_initiated                         | String<br>Accepted fields are
        `conversation`, `push`, `facebook`, `twitter` and `email`. |\n| open                                      |
        Boolean                                                                                  |\n|
        read                                      | Boolean                                                                                  |\n|
        state                                     | String                                                                                   |\n|
        waiting_since                             | Date (UNIX timestamp)                                                                    |\n|
        snoozed_until                             | Date (UNIX timestamp)                                                                    |\n|
        tag_ids                                   | String                                                                                   |\n|
        priority                                  | String                                                                                   |\n|
        statistics.time_to_assignment             | Integer                                                                                  |\n|
        statistics.time_to_admin_reply            | Integer                                                                                  |\n|
        statistics.time_to_first_close            | Integer                                                                                  |\n|
        statistics.time_to_last_close             | Integer                                                                                  |\n|
        statistics.median_time_to_reply           | Integer                                                                                  |\n|
        statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                    |\n|
        statistics.first_assignment_at            | Date (UNIX timestamp)                                                                    |\n|
        statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                    |\n|
        statistics.first_close_at                 | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_assignment_at             | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_close_at                  | Date (UNIX timestamp)                                                                    |\n|
        statistics.last_closed_by_id              | String                                                                                   |\n|
        statistics.count_reopens                  | Integer                                                                                  |\n|
        statistics.count_assignments              | Integer                                                                                  |\n|
        statistics.count_conversation_parts       | Integer                                                                                  |\n|
        conversation_rating.requested_at          | Date (UNIX timestamp)                                                                    |\n|
        conversation_rating.replied_at            | Date (UNIX timestamp)                                                                    |\n|
        conversation_rating.score                 | Integer                                                                                  |\n|
        conversation_rating.remark                | String                                                                                   |\n|
        conversation_rating.contact_id            | String                                                                                   |\n|
        conversation_rating.admin_d               | String                                                                                   |\n\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: conversation.list
                    pages:
                      type: pages
                      page: 1
                      per_page: 150
                      total_pages: 1
                    total_count: 1
                    conversations:
                    - type: conversation
                      id: '185'
                      created_at: 1677597493
                      updated_at: 1677597493
                      waiting_since: 
                      snoozed_until: 
                      source:
                        type: conversation
                        id: '403918171'
                        delivered_as: admin_initiated
                        subject: ''
                        body: "<p>this is the message body</p>"
                        author:
                          type: admin
                          id: '991266883'
                          name: Ciaran190 Lee
                          email: admin190@email.com
                        attachments: []
                        url: 
                        redacted: false
                      contacts:
                        type: contact.list
                        contacts:
                        - type: contact
                          id: 63fe1b35a5664f17f07a6f01
                      first_contact_reply: 
                      admin_assignee_id: 
                      team_assignee_id: 
                      open: false
                      state: closed
                      read: false
                      tags:
                        type: tag.list
                        tags: []
                      priority: not_priority
                      sla_applied: 
                      statistics: 
                      conversation_rating: 
                      teammates: 
                      title: 
                      custom_attributes: {}
                      topics: {}
              schema:
                "$ref": "#/components/schemas/conversation_list"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/search_request"
            examples:
              successful:
                summary: successful
                value:
                  query:
                    operator: AND
                    value:
                    - field: id
                      operator: "="
                      value: '185'
                    - operator: OR
                      value:
                      - field: id
                        operator: "="
                        value: '185'
                      - field: id
                        operator: "="
                        value: '185'
  "/conversations/{id}/reply":
    post:
      summary: Reply to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        schema:
          oneOf:
          - title: Conversation ID
            type: string
            description: The id of the conversation to target.
            example: '123'
          - title: The most recent conversation
            type: string
            enum:
            - last
            description: You can also reply to the most recent conversation on a workspace
              by specifying `last` as the string.
            example: last
      tags:
      - Conversations
      operationId: replyConversation
      description: You can reply to a conversation with a message from an admin or
        on behalf of a contact, or with a note for admins.
      responses:
        '200':
          description: User last conversation reply
          content:
            application/json:
              examples:
                User reply:
                  value:
                    type: conversation
                    id: '193'
                    created_at: 1677597500
                    updated_at: 1677597502
                    waiting_since: 1677597502
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918174'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266885'
                        name: Ciaran191 Lee
                        email: admin191@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b3ca5664f17f07a6f08
                    first_contact_reply:
                      created_at: 1677597502
                      type: conversation
                      url: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '31'
                        part_type: comment
                        body: "<p>Thanks again :)</p>"
                        created_at: 1677597502
                        updated_at: 1677597502
                        notified_at: 1677597502
                        assigned_to: 
                        author:
                          id: 63fe1b3ca5664f17f07a6f08
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
                Admin note reply:
                  value:
                    type: conversation
                    id: '194'
                    created_at: 1677597504
                    updated_at: 1677597505
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918175'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266887'
                        name: Ciaran192 Lee
                        email: admin192@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b40a5664f17f07a6f09
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '32'
                        part_type: note
                        body: |-
                          <h2>An Unordered HTML List</h2>
                          <ul>
                          <li>Coffee</li>
                          <li>Tea</li>
                          <li>Milk</li>
                          </ul>
                          <h2>An Ordered HTML List</h2>
                          <ol>
                          <li>Coffee</li>
                          <li>Tea</li>
                          <li>Milk</li>
                          </ol>
                        created_at: 1677597505
                        updated_at: 1677597505
                        notified_at: 1677597505
                        assigned_to: 
                        author:
                          id: '991266887'
                          type: admin
                          name: Ciaran192 Lee
                          email: admin192@email.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
                User last conversation reply:
                  value:
                    type: conversation
                    id: '196'
                    created_at: 1677597509
                    updated_at: 1677597510
                    waiting_since: 1677597510
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918177'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266891'
                        name: Ciaran194 Lee
                        email: admin194@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b45a5664f17f07a6f0b
                    first_contact_reply:
                      created_at: 1677597510
                      type: conversation
                      url: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '33'
                        part_type: comment
                        body: "<p>Thanks again :)</p>"
                        created_at: 1677597510
                        updated_at: 1677597510
                        notified_at: 1677597510
                        assigned_to: 
                        author:
                          id: 63fe1b45a5664f17f07a6f0b
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 91fd5b50-4596-491b-95f3-5d3a349d2c8a
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 67778fa7-d5bd-4267-a9e2-6b0b817a97b8
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 05064e66-41c9-43fe-b8ab-baadfc820956
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/reply_conversation_request"
            examples:
              user_reply:
                summary: User reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 63fe1b3ca5664f17f07a6f08
                  body: Thanks again :)
              admin_note_reply:
                summary: Admin note reply
                value:
                  message_type: note
                  type: admin
                  admin_id: 991266887
                  body: "<html> <body>  <h2>An Unordered HTML List</h2>  <ul>   <li>Coffee</li>
                    \  <li>Tea</li>   <li>Milk</li> </ul>    <h2>An Ordered HTML List</h2>
                    \ <ol>   <li>Coffee</li>   <li>Tea</li>   <li>Milk</li> </ol>
                    \  </body> </html>"
              user_last_conversation_reply:
                summary: User last conversation reply
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 63fe1b45a5664f17f07a6f0b
                  body: Thanks again :)
              not_found:
                summary: Not found
                value:
                  message_type: comment
                  type: user
                  intercom_user_id: 63fe1b48a5664f17f07a6f0c
                  body: Thanks again :)
  "/conversations/{id}/parts":
    post:
      summary: Manage a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: manageConversation
      description: |
        You can close a conversation.
        You can snooze a conversation to reopen on a future date.
        You can open a conversation which is `snoozed` or `closed`.
        You can assign a conversation to an admin and/or team.
      responses:
        '200':
          description: Assign a conversation
          content:
            application/json:
              examples:
                Close a conversation:
                  value:
                    type: conversation
                    id: '200'
                    created_at: 1677597519
                    updated_at: 1677597520
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918181'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266899'
                        name: Ciaran198 Lee
                        email: admin198@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b4fa5664f17f07a6f0f
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '34'
                        part_type: close
                        body: "<p>Goodbye :)</p>"
                        created_at: 1677597520
                        updated_at: 1677597520
                        notified_at: 1677597520
                        assigned_to: 
                        author:
                          id: '991266899'
                          type: admin
                          name: Ciaran198 Lee
                          email: admin198@email.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
                Snooze a conversation:
                  value:
                    type: conversation
                    id: '201'
                    created_at: 1677597523
                    updated_at: 1677597524
                    waiting_since: 
                    snoozed_until: 1677601123
                    source:
                      type: conversation
                      id: '403918182'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266901'
                        name: Ciaran199 Lee
                        email: admin199@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b52a5664f17f07a6f10
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: true
                    state: snoozed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '35'
                        part_type: snoozed
                        body: 
                        created_at: 1677597524
                        updated_at: 1677597524
                        notified_at: 1677597524
                        assigned_to: 
                        author:
                          id: '991266901'
                          type: admin
                          name: Ciaran199 Lee
                          email: admin199@email.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
                Open a conversation:
                  value:
                    type: conversation
                    id: '206'
                    created_at: 1677597523
                    updated_at: 1677597531
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918183'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266903'
                        name: Ciaran200 Lee
                        email: admin200@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b58a5664f17f07a6f15
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: ''
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '37'
                        part_type: open
                        body: 
                        created_at: 1677597531
                        updated_at: 1677597531
                        notified_at: 1677597531
                        assigned_to: 
                        author:
                          id: '991266903'
                          type: admin
                          name: Ciaran200 Lee
                          email: admin200@email.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
                Assign a conversation:
                  value:
                    type: conversation
                    id: '210'
                    created_at: 1677597534
                    updated_at: 1677597535
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918186'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266905'
                        name: Ciaran201 Lee
                        email: admin201@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b5da5664f17f07a6f18
                    first_contact_reply: 
                    admin_assignee_id: 991266905
                    team_assignee_id: 
                    open: true
                    state: open
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '38'
                        part_type: assign_and_reopen
                        body: 
                        created_at: 1677597535
                        updated_at: 1677597535
                        notified_at: 1677597535
                        assigned_to:
                          type: admin
                          id: '991266905'
                        author:
                          id: '991266905'
                          type: admin
                          name: Ciaran201 Lee
                          email: admin201@email.com
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 4dd778b9-793b-40ee-af30-b1c5863e9dee
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 48c8fd93-59fa-4a0b-aaf6-bf25e7bffda5
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 3db9eba2-b1a6-40e3-81bd-eee83d39c161
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/close_conversation_request"
              - "$ref": "#/components/schemas/snooze_conversation_request"
              - "$ref": "#/components/schemas/open_conversation_request"
              - "$ref": "#/components/schemas/assign_conversation_request"
            examples:
              close_a_conversation:
                summary: Close a conversation
                value:
                  message_type: close
                  type: admin
                  admin_id: 991266899
                  body: Goodbye :)
              snooze_a_conversation:
                summary: Snooze a conversation
                value:
                  message_type: snoozed
                  admin_id: 991266901
                  snoozed_until: 1677601123
              open_a_conversation:
                summary: Open a conversation
                value:
                  message_type: open
                  admin_id: 991266903
              assign_a_conversation:
                summary: Assign a conversation
                value:
                  message_type: assignment
                  type: admin
                  admin_id: 991266905
                  assignee_id: 991266905
              not_found:
                summary: Not found
                value:
                  message_type: close
                  type: admin
                  admin_id: 991266907
                  body: Goodbye :)
  "/conversations/{id}/run_assignment_rules":
    post:
      summary: Run Assignment Rules on a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: autoAssignConversation
      description: You can let a conversation be automatically assigned following
        assignment rules.
      responses:
        '200':
          description: Assign a conversation using assignment rules
          content:
            application/json:
              examples:
                Assign a conversation using assignment rules:
                  value:
                    type: conversation
                    id: '214'
                    created_at: 1677597543
                    updated_at: 1677597544
                    waiting_since: 
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918190'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266913'
                        name: Ciaran205 Lee
                        email: admin205@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1b67a5664f17f07a6f1c
                    first_contact_reply: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: false
                    state: closed
                    read: false
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '39'
                        part_type: default_assignment
                        body: 
                        created_at: 1677597544
                        updated_at: 1677597544
                        notified_at: 1677597544
                        assigned_to:
                          type: nobody_admin
                          id: 
                        author:
                          id: '991266914'
                          type: bot
                          name: Operator
                          email: operator+this_is_an_id345_that_should_be_at_least_@intercom.io
                        attachments: []
                        external_id: 
                        redacted: false
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 55198c01-5eaf-4c18-b3ed-4e08d712228e
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 360da5ac-d1b7-4c88-bad4-b240ac873d41
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 13f9caef-d459-4cae-8eb8-25d28eec4de0
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
  "/conversations/{id}/customers":
    post:
      summary: Attach a contact to a conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: attachContactToConversation
      description: "You can add participants who are contacts to a conversation, on
        behalf of either another contact or an admin.\n\n> \U0001F6A7 Note about contacts
        without an email\n>\n> If you add a contact via the email parameter and there
        is no user/lead found on that workspace with he given email, then we will
        create a new contact with `role` set to `lead`.\n\n"
      responses:
        '200':
          description: Attach a contact to a conversation
          content:
            application/json:
              examples:
                Attach a contact to a conversation:
                  value:
                    customers:
                    - type: user
                      id: 63fe1b70a5664f17f07a6f20
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: 369235dc-b008-411c-8992-77b336a1b577
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3049eb01-cc72-4ded-802c-1ac8b068832b
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 4009eeeb-9fa7-4042-8665-0fe19ccc8771
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/attach_contact_to_conversation_request"
            examples:
              attach_a_contact_to_a_conversation:
                summary: Attach a contact to a conversation
                value:
                  admin_id: 991266921
                  customer:
                    intercom_user_id: 63fe1b70a5664f17f07a6f20
              not_found:
                summary: Not found
                value:
                  admin_id: 991266923
                  customer:
                    intercom_user_id: 63fe1b73a5664f17f07a6f21
  "/conversations/{conversation_id}/customers/{contact_id}":
    delete:
      summary: Detach a contact from a group conversation
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: conversation_id
        in: path
        required: true
        description: The identifier for the conversation as given by Intercom.
        example: '123'
        schema:
          type: string
      - name: contact_id
        in: path
        required: true
        description: The identifier for the contact as given by Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - Conversations
      operationId: detachContactFromConversation
      description: "You can add participants who are contacts to a conversation, on
        behalf of either another contact or an admin.\n\n> \U0001F6A7 Note about contacts
        without an email\n>\n> If you add a contact via the email parameter and there
        is no user/lead found on that workspace with he given email, then we will
        create a new contact with `role` set to `lead`.\n\n"
      responses:
        '200':
          description: Detach a contact from a group conversation
          content:
            application/json:
              examples:
                Detach a contact from a group conversation:
                  value:
                    customers:
                    - type: user
                      id: 63fe1b7fa5664f17f07a6f2b
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Contact not found
          content:
            application/json:
              examples:
                Conversation not found:
                  value:
                    type: error.list
                    request_id: 25a2b14d-943a-4ebd-9e1f-ec4af14ab8d8
                    errors:
                    - code: not_found
                      message: Resource Not Found
                Contact not found:
                  value:
                    type: error.list
                    request_id: e1384d65-1e52-4f5a-8bc7-d71ca76e9b47
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Last customer
          content:
            application/json:
              examples:
                Last customer:
                  value:
                    type: error.list
                    request_id: bd58c273-cd1e-4e12-b010-4989cdfed4f9
                    errors:
                    - code: parameter_invalid
                      message: Removing the last customer is not allowed
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c3c31def-5db9-47d0-815b-e45f935b2b4a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 7f88e111-5457-400c-bf63-f40b8cc37f75
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/detach_contact_from_conversation_request"
            examples:
              detach_a_contact_from_a_group_conversation:
                summary: Detach a contact from a group conversation
                value:
                  admin_id: 991266929
                  customer:
                    intercom_user_id: 63fe1b79a5664f17f07a6f24
              conversation_not_found:
                summary: Conversation not found
                value:
                  admin_id: 991266931
                  customer:
                    intercom_user_id: 63fe1b82a5664f17f07a6f2c
              contact_not_found:
                summary: Contact not found
                value:
                  admin_id: 991266933
                  customer:
                    intercom_user_id: 63fe1b89a5664f17f07a6f33
              last_customer:
                summary: Last customer
                value:
                  admin_id: 991266935
                  customer:
                    intercom_user_id: 63fe1b90a5664f17f07a6f3a
  "/conversations/redact":
    post:
      summary: Redact a conversation part
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Conversations
      operationId: redactConversation
      description: "You can redact a conversation part or the source message of a
        conversation (as seen in the source object).\n\n> \U0001F4D8 Which parts and
        source messages can I redact?\n>\n> If you are redacting a conversation part,
        it must have a `body`.\n> If you are redacting a source message, it must have
        been created by a contact.\n> We will return a `conversation_part_not_redactable`
        error if these criteria are not met.\n\n"
      responses:
        '200':
          description: Redact a conversation part
          content:
            application/json:
              examples:
                Redact a conversation part:
                  value:
                    type: conversation
                    id: '270'
                    created_at: 1677597606
                    updated_at: 1677597608
                    waiting_since: 1677597607
                    snoozed_until: 
                    source:
                      type: conversation
                      id: '403918216'
                      delivered_as: admin_initiated
                      subject: ''
                      body: "<p>this is the message body</p>"
                      author:
                        type: admin
                        id: '991266941'
                        name: Ciaran219 Lee
                        email: admin219@email.com
                      attachments: []
                      url: 
                      redacted: false
                    contacts:
                      type: contact.list
                      contacts:
                      - type: contact
                        id: 63fe1ba6a5664f17f07a6f4f
                    first_contact_reply:
                      created_at: 1677597607
                      type: conversation
                      url: 
                    admin_assignee_id: 
                    team_assignee_id: 
                    open: true
                    state: open
                    read: true
                    tags:
                      type: tag.list
                      tags: []
                    priority: not_priority
                    sla_applied: 
                    statistics: 
                    conversation_rating: 
                    teammates: 
                    title: 
                    custom_attributes: {}
                    topics: {}
                    conversation_parts:
                      type: conversation_part.list
                      conversation_parts:
                      - type: conversation_part
                        id: '47'
                        part_type: comment
                        body: "<p><i>This message was deleted</i></p>"
                        created_at: 1677597607
                        updated_at: 1677597608
                        notified_at: 1677597607
                        assigned_to: 
                        author:
                          id: 63fe1ba6a5664f17f07a6f4f
                          type: user
                          name: Joe Bloggs
                          email: joe@bloggs.com
                        attachments: []
                        external_id: 
                        redacted: true
                      total_count: 1
              schema:
                "$ref": "#/components/schemas/conversation"
        '404':
          description: Not found
          content:
            application/json:
              examples:
                Not found:
                  value:
                    type: error.list
                    request_id: e67d118f-acba-45dc-a092-f8d1fb2c0077
                    errors:
                    - code: conversation_part_or_message_not_found
                      message: Conversation part or message not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6b373d24-08ba-4a9b-b9c9-e00bdd96f9b9
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/redact_conversation_request"
            examples:
              redact_a_conversation_part:
                summary: Redact a conversation part
                value:
                  type: conversation_part
                  conversation_id: 270
                  conversation_part_id: 47
              not_found:
                summary: Not found
                value:
                  type: conversation_part
                  conversation_id: really_123_doesnt_exist
                  conversation_part_id: really_123_doesnt_exist
  "/data_attributes":
    get:
      summary: List all data attributes
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: model
        in: query
        required: false
        description: Specify the data attribute model to return.
        schema:
          type: string
          enum:
          - contact
          - company
          - conversation
        example: company
      - name: include_archived
        in: query
        required: false
        description: Include archived attributes in the list. By default we return
          only non archived data attributes.
        example: false
        schema:
          type: boolean
      tags:
      - Data Attributes
      operationId: lisDataAttributes
      description: You can fetch a list of all data attributes belonging to a workspace
        for contacts, companies or conversations.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: list
                    data:
                    - type: data_attribute
                      name: name
                      full_name: name
                      label: Company name
                      description: The name of a company
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: company_id
                      full_name: company_id
                      label: Company ID
                      description: A number identifying a company
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: last_request_at
                      full_name: last_request_at
                      label: Company last seen
                      description: The last day anyone from a company visited your
                        site or app
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: remote_created_at
                      full_name: remote_created_at
                      label: Company created at
                      description: The day a company was added to Intercom
                      data_type: date
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: user_count
                      full_name: user_count
                      label: People
                      description: The number of people in a company
                      data_type: integer
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: session_count
                      full_name: session_count
                      label: Company web sessions
                      description: All visits from anyone in a company to your product's
                        site or app
                      data_type: integer
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: name
                      full_name: plan.name
                      label: Plan
                      description: A specific plan or level within your product that
                        companies have signed up to
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: monthly_spend
                      full_name: monthly_spend
                      label: Monthly Spend
                      description: The monthly revenue you receive from a company
                      data_type: float
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: size
                      full_name: size
                      label: Company size
                      description: The number of people employed in this company,
                        expressed as a single number
                      data_type: integer
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: industry
                      full_name: industry
                      label: Company industry
                      description: The category or domain this company belongs to
                        e.g. 'ecommerce' or 'SaaS'
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: website
                      full_name: website
                      label: Company website
                      description: The web address for the company's primary marketing
                        site
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - id: 33
                      type: data_attribute
                      name: The One Ring
                      full_name: custom_attributes.The One Ring
                      label: The One Ring
                      description: One ring to rule them all, one ring to find them,
                        One ring to bring them all and in the darkness bind them.
                      data_type: string
                      api_writable: true
                      ui_writable: false
                      custom: true
                      archived: false
                      admin_id: '991266947'
                      created_at: 1677597614
                      updated_at: 1677597614
                      model: company
                    - type: data_attribute
                      name: id
                      full_name: id
                      label: ID
                      description: The Intercom defined id representing the company
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: created_at
                      full_name: created_at
                      label: Created at
                      description: The time the company was added to Intercom
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: updated_at
                      full_name: updated_at
                      label: Updated at
                      description: The last time the company was updated
                      data_type: date
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: id
                      full_name: plan.id
                      label: Plan ID
                      description: The Intercom defined id representing the plan
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
                    - type: data_attribute
                      name: app_id
                      full_name: app_id
                      label: App ID
                      description: The Intercom defined id representing the app
                      data_type: string
                      api_writable: false
                      ui_writable: false
                      custom: false
                      archived: false
                      model: company
              schema:
                "$ref": "#/components/schemas/data_attribute_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f1904b14-90a8-4c36-9f44-8e38f0b0eb2a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a data attribute
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Attributes
      operationId: createDataAttribute
      description: You can create a data attributes for a `contact` or a `company`.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 36
                    type: data_attribute
                    name: Mithril Shirt
                    full_name: custom_attributes.Mithril Shirt
                    label: Mithril Shirt
                    data_type: string
                    api_writable: true
                    ui_writable: false
                    custom: true
                    archived: false
                    admin_id: '991266949'
                    created_at: 1677597615
                    updated_at: 1677597615
                    model: company
              schema:
                "$ref": "#/components/schemas/data_attribute"
        '400':
          description: Too few options for list
          content:
            application/json:
              examples:
                Same name already exists:
                  value:
                    type: error.list
                    request_id: 8445c2a9-0bd4-4e93-aee6-e3bfc76badd4
                    errors:
                    - code: parameter_invalid
                      message: You already have 'The One Ring' in your company data.
                        To save this as new people data, use a different name.
                Invalid name:
                  value:
                    type: error.list
                    request_id: 83b91463-792a-4a0f-a1f9-5897772922a0
                    errors:
                    - code: parameter_invalid
                      message: Your name for this attribute must only contain alphanumeric
                        characters, currency symbols, and hyphens
                Attribute already exists:
                  value:
                    type: error.list
                    request_id: ceeacbc0-f5e2-498f-bbd0-45fadd73d627
                    errors:
                    - code: parameter_invalid
                      message: You already have 'The One Ring' in your company data.
                        To save this as new company data, use a different name.
                Invalid Data Type:
                  value:
                    type: error.list
                    request_id: 478d3fdb-57f4-43e1-a944-2cd6a61545fb
                    errors:
                    - code: parameter_invalid
                      message: Data Type isn't an option
                Too few options for list:
                  value:
                    type: error.list
                    request_id: d472c72c-a8c5-4964-8522-624bf2582125
                    errors:
                    - code: parameter_invalid
                      message: The Data Attribute model field must be either contact
                        or company
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6417016b-8e44-4f97-b553-26d28a65987e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_attribute_request"
            examples:
              successful:
                summary: Successful
                value:
                  name: Mithril Shirt
                  model: company
                  data_type: string
              same_name_already_exists:
                summary: Same name already exists
                value:
                  name: The One Ring
                  model: contact
                  data_type: integer
              invalid_name:
                summary: Invalid name
                value:
                  name: "!nv@l!d n@me"
                  model: company
                  data_type: string
              attribute_already_exists:
                summary: Attribute already exists
                value:
                  name: The One Ring
                  model: company
                  data_type: string
              invalid_data_type:
                summary: Invalid Data Type
                value:
                  name: The Second Ring
                  model: company
                  data_type: mithril
              too_few_options_for_list:
                summary: Too few options for list
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  archived: false
  "/data_attributes/{id}":
    put:
      summary: Update a data attribute
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The data attribute id
        example: 1
        schema:
          type: integer
      tags:
      - Data Attributes
      operationId: updateDataAttribute
      description: "\nYou can update a data attribute.\n\n> \U0001F6A7 Updating the
        data type is not possible\n>\n> It is currently a dangerous action to execute
        changing a data attribute's type via the API. You will need to update the
        type via the UI instead.\n"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    id: 43
                    type: data_attribute
                    name: The One Ring
                    full_name: custom_attributes.The One Ring
                    label: The One Ring
                    description: Just a plain old ring
                    data_type: string
                    options:
                    - 1-10
                    - 11-20
                    api_writable: true
                    ui_writable: false
                    custom: true
                    archived: false
                    admin_id: '991266956'
                    created_at: 1677597619
                    updated_at: 1677597620
                    model: company
              schema:
                "$ref": "#/components/schemas/data_attribute"
        '400':
          description: Too few options in list
          content:
            application/json:
              examples:
                Too few options in list:
                  value:
                    type: error.list
                    request_id: 900c5747-b8c2-4ccd-a0e8-7f3abada861d
                    errors:
                    - code: parameter_invalid
                      message: Options isn't an array
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Attribute Not Found
          content:
            application/json:
              examples:
                Attribute Not Found:
                  value:
                    type: error.list
                    request_id: 417bb942-cd69-4782-9453-c8012654659f
                    errors:
                    - code: field_not_found
                      message: We couldn't find that data attribute to update
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Has Dependant Object
          content:
            application/json:
              examples:
                Has Dependant Object:
                  value:
                    type: error.list
                    request_id: bc5d47af-6ed9-4384-9067-98ac8f9b5897
                    errors:
                    - code: data_invalid
                      message: The Data Attribute you are trying to archive has a
                        dependant object
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 65698e1b-63e9-4851-9e05-c17eb53a5ff6
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_data_attribute_request"
            examples:
              successful:
                summary: Successful
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  - value: 11-20
                  archived: false
              too_few_options_in_list:
                summary: Too few options in list
                value:
                  description: Too few options
                  options:
                    value: 1-10
                  archived: false
              attribute_not_found:
                summary: Attribute Not Found
                value:
                  description: Just a plain old ring
                  options:
                  - value: 1-10
                  - value: 11-20
                  archived: false
              has_dependant_object:
                summary: Has Dependant Object
                value:
                  description: Trying to archieve
                  archived: true
  "/events":
    post:
      summary: Submit a data event
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Events
      operationId: createDataEvent
      description: "\nYou will need an Access Token that has write permissions to
        send Events. Once you have a key you can submit events via POST to the Events
        resource, which is located at https://api.intercom.io/events, or you can send
        events using one of the client libraries. When working with the HTTP API directly
        a client should send the event with a `Content-Type` of `application/json`.\n\nWhen
        using the JavaScript API, [adding the code to your app](http://docs.intercom.io/configuring-Intercom/tracking-user-events-in-your-app)
        makes the Events API available. Once added, you can submit an event using
        the `trackEvent` method. This will associate the event with the Lead or currently
        logged-in user or logged-out visitor/lead and send it to Intercom. The final
        parameter is a map that can be used to send optional metadata about the event.\n\nWith
        the Ruby client you pass a hash describing the event to `Intercom::Event.create`,
        or call the `track_user` method directly on the current user object (e.g.
        `user.track_event`).\n\n| Type            | Description                                                                                                                                                                                                     |
        Example                                                                           |\n|
        :-------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        | :--------------------------------------------------------------------------------
        |\n| String          | The value is a JSON String                                                                                                                                                                                      |
        `\"source\":\"desktop\"`                                                              |\n|
        Number          | The value is a JSON Number                                                                                                                                                                                      |
        `\"load\": 3.67`                                                                    |\n|
        Date            | The key ends with the String `_date` and the value is a
        [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time), assumed to be in
        the [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone.
        | `\"contact_date\": 1392036272`                                                      |\n|
        Link            | The value is a HTTP or HTTPS URI.                                                                                                                                                                               |
        `\"article\": \"https://example.org/ab1de.html\"`                                     |\n|
        Rich Link       | The value is a JSON object that contains `url` and `value`
        keys.                                                                                                                                                |
        `\"article\": {\"url\": \"https://example.org/ab1de.html\", \"value\":\"the
        dude abides\"}` |\n| Monetary Amount | The value is a JSON object that contains
        `amount` and `currency` keys. The `amount` key is a positive integer representing
        the amount in cents. The price in the example to the right denotes €349.99.
        \         | `\"price\": {\"amount\": 34999, \"currency\": \"eur\"}`                                   |\n\n**NB:
        For the JSON object types, please note that we do not currently support nested
        JSON structure.**\n\n> \U0001F6A7 Lead Events\n>\n> When submitting events
        for Leads, you will need to specify the Lead's `id`.\n\n> \U0001F4D8 Metadata
        behaviour\n>\n> - We currently limit the number of tracked metadata keys to
        10 per event. Once the quota is reached, we ignore any further keys we receive.
        The first 10 metadata keys are determined by the order in which they are sent
        in with the event.\n> - It is not possible to change the metadata keys once
        the event has been sent. A new event will need to be created with the new
        keys and you can archive the old one.\n> - There might be up to 24 hrs delay
        when you send a new metadata for an existing event.\n\n> \U0001F4D8 Event
        de-duplication\n>\n> The API may detect and ignore duplicate events. Each
        event is uniquely identified as a combination of the following data - the
        Workspace identifier, the Contact external identifier, the Data Event name
        and the Data Event created time. As a result, it is **strongly recommended**
        to send a second granularity Unix timestamp in the `created_at` field.\n>\n>
        Duplicated events are responded to using the normal `202 Accepted` code -
        an error is not thrown, however repeat requests will be counted against any
        rate limit that is in place.\n\n### HTTP API Responses\n\n- Successful responses
        to submitted events return `202 Accepted` with an empty body.\n- Unauthorised
        access will be rejected with a `401 Unauthorized` or `403 Forbidden` response
        code.\n- Events sent about users that cannot be found will return a `404 Not
        Found`.\n- Event lists containing duplicate events will have those duplicates
        ignored.\n- Server errors will return a `500` response code and may contain
        an error message in the body.\n\n"
      responses:
        '202':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 82ed3502-d296-4517-a155-54ce42918b83
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_event_request"
    get:
      summary: List all data events
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - in: query
        name: filter
        required: true
        style: form
        explode: true
        schema:
          type: object
          oneOf:
          - title: user_id query parameter
            properties:
              user_id:
                type: string
            required:
            - user_id
            additionalProperties: false
          - title: intercom_user_id query parameter
            properties:
              intercom_user_id:
                type: string
            required:
            - intercom_user_id
            additionalProperties: false
          - title: email query parameter
            properties:
              email:
                type: string
            required:
            - email
            additionalProperties: false
      - name: type
        in: query
        required: true
        description: The value must be user
        schema:
          type: string
      - name: summary
        in: query
        required: false
        description: summary flag
        schema:
          type: boolean
      tags:
      - Data Events
      operationId: lisDataEvents
      description: "\n> \U0001F6A7\n>\n> Please note that you can only 'list' events
        that are less than 90 days old. Event counts and summaries will still include
        your events older than 90 days but you cannot 'list' these events individually
        if they are older than 90 days\n\nThe events belonging to a customer can be
        listed by sending a GET request to `https://api.intercom.io/events` with a
        user or lead identifier along with a `type` parameter. The identifier parameter
        can be one of `user_id`, `email` or `intercom_user_id`. The `type` parameter
        value must be `user`.\n\n- `https://api.intercom.io/events?type=user&user_id={user_id}`\n-
        `https://api.intercom.io/events?type=user&email={email}`\n- `https://api.intercom.io/events?type=user&intercom_user_id={id}`
        (this call can be used to list leads)\n\nThe `email` parameter value should
        be [url encoded](http://en.wikipedia.org/wiki/Percent-encoding) when sending.\n\nYou
        can optionally define the result page size as well with the `per_page` parameter.\n"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: event.summary
                    events: []
                    pages:
                      next: http://api.intercom.test/events?next page
                    email: user24@email.com
                    intercom_user_id: 63fe1bc0a5664f17f07a6f66
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
              schema:
                "$ref": "#/components/schemas/data_event_summary"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a4322ed6-06eb-47c5-b507-5c2c95037174
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/events/summaries":
    post:
      summary: Create event summaries
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Events
      operationId: dataEventSummaries
      description: "Create event summaries for a user. Event summaries are used to
        track the number of times an event has occurred, the first time it occurred
        and the last time it occurred.\n\n"
      responses:
        '200':
          description: successful
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8bd5b820-d97d-4a9b-8340-457c49a5dc35
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_event_summaries_request"
  "/export/content/data":
    post:
      summary: Create content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Data Export
      operationId: create data export
      description: "To create your export job, you need to send a `POST` request to
        the export endpoint `https://api.intercom.io/export/content/data`.\n\nThe
        only parameters you need to provide are the range of dates that you want exported.\n\n>\U0001F6A7
        Limit of one active job\n>\n> You can only have one active job per workspace.
        You will receive a HTTP status code of 429 with the message Exceeded rate
        limit of 1 pending message data export jobs if you attempt to create a second
        concurrent job.\n\n>❗️ Updated_at not included\n>\n> It should be noted that
        the timeframe only includes messages sent during the time period and not messages
        that were only updated during this period. For example, if a message was updated
        yesterday but sent two days ago, you would need to set the created_at_after
        date before the message was sent to include that in your retrieval job.\n\n>\U0001F4D8
        Date ranges are inclusive\n>\n> Requesting data for 2018-06-01 until 2018-06-30
        will get all data for those days including those specified - e.g. 2018-06-01
        00:00:00 until 2018-06-30 23:59:99.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: nvaguw5r1v69q4nz
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_data_exports_request"
            examples:
              successful:
                summary: successful
                value:
                  created_at_after: 1677579635
                  created_at_before: 1677597635
  "/export/content/data/{job_identifier}":
    get:
      summary: Show content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: get data export
      description: "You can view the status of your job by sending a `GET` request
        to the URL\n`https://api.intercom.io/export/content/data/{job_identifier}`
        - the `{job_identifier}` is the value returned in the response when you first
        created the export job. More on it can be seen in the Export Job Model.\n\n>
        \U0001F6A7 Jobs expire after two days\n> All jobs that have completed processing
        (and are thus available to download from the provided URL) will have an expiry
        limit of two days from when the export ob completed. After this, the data
        will no longer be available.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: g96nh558jmbfy3k4
                    status: pending
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
  "/export/cancel/{job_identifier}":
    post:
      summary: Cancel content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: Cancel data export
      description: You can cancel your job
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    job_identifier: vhb3ac2i6mb3apgh
                    status: canceled
                    download_url: ''
                    download_expires_at: ''
              schema:
                "$ref": "#/components/schemas/data_export"
  "/download/content/data/{job_identifier}":
    get:
      summary: Download content data export
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: job_identifier
        in: path
        description: job_identifier
        required: true
        schema:
          type: string
      tags:
      - Data Export
      operationId: Download data export
      description: "When a job has a status of complete, and thus a filled download_url,
        you can download your data by hitting that provided URL, formatted like so:
        https://api.intercom.io/download/content/data/xyz1234.\n\nYour exported message
        data will be streamed continuously back down to you in a gzipped CSV format.\n\n>
        \U0001F4D8 Octet header required\n>\n> You will have to specify the header
        Accept: `application/octet-stream` when hitting this endpoint.\n"
      responses:
        '200':
          description: successful
  "/messages":
    post:
      summary: Create a message
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Messages
      operationId: createMessage
      description: "You can create a message that has been initiated by an admin.
        The conversation can be either an in-app message or an email.\n\n> \U0001F6A7
        Sending for visitors\n>\n> There can be a short delay between when a contact
        is created and when a contact becomes available to be messaged through the
        API. A 404 Not Found error will be returned in this case.\n\nThis will return
        the Message model that has been created.\n\n> \U0001F6A7 Retrieving Associated
        Conversations\n>\n> As this is a message, there will be no conversation present
        until the contact responds. Once they do, you will have to search for a contact's
        conversations with the id of the message.\n"
      responses:
        '200':
          description: admin message created
          content:
            application/json:
              examples:
                user message created:
                  value:
                    type: user_message
                    id: '403918225'
                    created_at: 1677597684
                    body: heyy
                    message_type: inapp
                    conversation_id: '284'
                lead message created:
                  value:
                    type: user_message
                    id: '403918226'
                    created_at: 1677597686
                    body: heyy
                    message_type: inapp
                    conversation_id: '285'
                admin message created:
                  value:
                    type: admin_message
                    id: '8'
                    created_at: 1677597687
                    subject: heyy
                    body: heyy
                    message_type: inapp
                    owner:
                      type: admin
                      id: '991266985'
                      name: Ciaran252 Lee
                      email: admin252@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
              schema:
                "$ref": "#/components/schemas/message"
        '400':
          description: No body supplied for email message
          content:
            application/json:
              examples:
                No body supplied for message:
                  value:
                    type: error.list
                    request_id: 7403051f-db41-45a5-a79d-8ed765944b62
                    errors:
                    - code: parameter_invalid
                      message: Body is required
                No body supplied for email message:
                  value:
                    type: error.list
                    request_id: fc307e75-4269-4a02-ab8c-d783f11a307a
                    errors:
                    - code: parameter_invalid
                      message: Body is required
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: No subject supplied for email message
          content:
            application/json:
              examples:
                No subject supplied for email message:
                  value:
                    type: error.list
                    request_id: cd31b41b-a120-4588-a584-3afe7ba5e9fb
                    errors:
                    - code: parameter_not_found
                      message: No subject supplied for email message
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 32f8a9eb-26b0-485b-91a1-e79fdb95a35c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: API plan restricted
          content:
            application/json:
              examples:
                API plan restricted:
                  value:
                    type: error.list
                    request_id: 51390f14-bf52-4628-93fb-c74d7f48bec3
                    errors:
                    - code: api_plan_restricted
                      message: Active subscription needed.
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_message_request"
            examples:
              user_message_created:
                summary: user message created
                value:
                  from:
                    type: user
                    id: 63fe1bf4a5664f17f07a6fbb
                  body: heyy
                  referer: https://twitter.com/bob
              lead_message_created:
                summary: lead message created
                value:
                  from:
                    type: lead
                    id: 63fe1bf5a5664f17f07a6fbc
                  body: heyy
                  referer: https://twitter.com/bob
              admin_message_created:
                summary: admin message created
                value:
                  from:
                    type: admin
                    id: '991266985'
                  to:
                    type: user
                    id: 63fe1bf7a5664f17f07a6fbd
                  message_type: conversation
                  body: heyy
              no_body_supplied_for_message:
                summary: No body supplied for message
                value:
                  from:
                    type: admin
                    id: '991266986'
                  to:
                    type: user
                    id: 63fe1bf8a5664f17f07a6fbe
                  message_type: inapp
                  body: 
                  subject: heyy
              no_subject_supplied_for_email_message:
                summary: No subject supplied for email message
                value:
                  from:
                    type: admin
                    id: '991266987'
                  to:
                    type: user
                    user_id: '70'
                  message_type: email
                  body: hey there
              no_body_supplied_for_email_message:
                summary: No body supplied for email message
                value:
                  from:
                    type: admin
                    id: '991266988'
                  to:
                    type: user
                    id: 63fe1bf9a5664f17f07a6fc0
                  message_type: email
                  body: 
                  subject: heyy
  "/news/news_items":
    get:
      summary: List all news items
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: listNewsItems
      description: You can fetch a list of all news items
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                    - id: '15'
                      type: news-item
                      workspace_id: this_is_an_id445_that_should_be_at_least_
                      title: We have news
                      body: "<p>Hello there,</p>"
                      sender_id: 991266993
                      state: draft
                      labels: []
                      cover_image_url: 
                      reactions:
                      - 
                      - 
                      - 
                      - 
                      deliver_silently: false
                      created_at: 1677597692
                      updated_at: 1677597692
                      newsfeed_assignments: []
                    - id: '16'
                      type: news-item
                      workspace_id: this_is_an_id445_that_should_be_at_least_
                      title: We have news
                      body: "<p>Hello there,</p>"
                      sender_id: 991266995
                      state: draft
                      labels: []
                      cover_image_url: 
                      reactions:
                      - 
                      - 
                      - 
                      - 
                      deliver_silently: false
                      created_at: 1677597692
                      updated_at: 1677597692
                      newsfeed_assignments: []
                    total_count: 2
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 8ad9a09f-5b14-4fac-936f-7b81b6675dc3
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: createNewsItem
      description: You can create a news item
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '19'
                    type: news-item
                    workspace_id: this_is_an_id449_that_should_be_at_least_
                    title: Halloween is here!
                    body: "<p>New costumes in store for this spooky season</p>"
                    sender_id: 991267002
                    state: live
                    labels:
                    - New
                    - Product
                    - Update
                    cover_image_url: 
                    reactions:
                    - "\U0001F606"
                    - "\U0001F605"
                    deliver_silently: true
                    created_at: 1677597695
                    updated_at: 1677597695
                    newsfeed_assignments:
                    - newsfeed_id: 28
                      published_at: 1664638214
              schema:
                "$ref": "#/components/schemas/news_item"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4140575c-45d6-4e02-a090-0777277522f6
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/news_item_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Halloween is here!
                  body: "<p>New costumes in store for this spooky season</p>"
                  labels:
                  - Product
                  - Update
                  - New
                  sender_id: 991267002
                  deliver_silently: true
                  reactions:
                  - "\U0001F606"
                  - "\U0001F605"
                  state: live
                  newsfeed_assignments:
                  - newsfeed_id: 28
                    published_at: 1664638214
  "/news/news_items/{id}":
    get:
      summary: Retrieve a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: retrieveNewsItem
      description: You can fetch the details of a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '20'
                    type: news-item
                    workspace_id: this_is_an_id453_that_should_be_at_least_
                    title: We have news
                    body: "<p>Hello there,</p>"
                    sender_id: 991267005
                    state: live
                    labels: []
                    cover_image_url: 
                    reactions:
                    - 
                    - 
                    - 
                    - 
                    deliver_silently: false
                    created_at: 1677597697
                    updated_at: 1677597697
                    newsfeed_assignments:
                    - newsfeed_id: 30
                      published_at: 1677597697
              schema:
                "$ref": "#/components/schemas/news_item"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: 51b457b4-fdee-44c4-bcd5-bf0af7611d1d
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: f8c94e3c-f0e4-4b99-8585-70c6ca069f29
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    put:
      summary: Update a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: updateNewsItem
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '23'
                    type: news-item
                    workspace_id: this_is_an_id459_that_should_be_at_least_
                    title: Christmas is here!
                    body: "<p>New gifts in store for the jolly season</p>"
                    sender_id: 991267013
                    state: live
                    labels: []
                    cover_image_url: 
                    reactions:
                    - "\U0001F61D"
                    - "\U0001F602"
                    deliver_silently: false
                    created_at: 1677597699
                    updated_at: 1677597700
                    newsfeed_assignments: []
              schema:
                "$ref": "#/components/schemas/news_item"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: ae8284cf-41d6-41eb-9a53-70e07c93be50
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: aabf11d6-ca62-46fe-9cec-850b63ba3aa7
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/news_item_request"
            examples:
              successful:
                summary: successful
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
                  sender_id: 991267013
                  reactions:
                  - "\U0001F61D"
                  - "\U0001F602"
              news_item_not_found:
                summary: News Item Not Found
                value:
                  title: Christmas is here!
                  body: "<p>New gifts in store for the jolly season</p>"
                  sender_id: 991267016
                  reactions:
                  - "\U0001F61D"
                  - "\U0001F602"
    delete:
      summary: Delete a news item
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news item which is given by Intercom.
        example: 123
        schema:
          type: integer
      tags:
      - News
      operationId: deleteNewsItem
      description: You can delete a single news item.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '26'
                    object: news-item
                    deleted: true
              schema:
                "$ref": "#/components/schemas/deleted_object"
        '404':
          description: News Item Not Found
          content:
            application/json:
              examples:
                News Item Not Found:
                  value:
                    type: error.list
                    request_id: c294fe53-ab90-4ef8-b7a3-2a1d3c161485
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2c369c24-ecff-4312-ae69-486d2a98086a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds/{id}/items":
    get:
      summary: List all live newsfeed items
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news feed item which is given by
          Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - News
      operationId: listLiveNewsfeedItems
      description: You can fetch a list of all news items that are live on a given
        newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 20
                      total_pages: 0
                      type: pages
                    data: []
                    total_count: 0
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: b8107a16-5c0a-4889-8809-129958953a3c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds":
    get:
      summary: List all newsfeeds
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - News
      operationId: listNewsfeeds
      description: You can fetch a list of all newsfeeds
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    pages:
                      page: 1
                      per_page: 10
                      total_pages: 1
                      type: pages
                    data:
                    - id: '43'
                      type: newsfeed
                      name: Visitor Feed
                      created_at: 1677597706
                      updated_at: 1677597706
                    - id: '44'
                      type: newsfeed
                      name: Visitor Feed
                      created_at: 1677597706
                      updated_at: 1677597706
                    total_count: 2
              schema:
                "$ref": "#/components/schemas/paginated_response"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 91ec847b-24cc-40ee-8ba8-8364b0feaf5d
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/news/newsfeeds/{id}":
    get:
      summary: Retrieve a newsfeed
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier for the news feed item which is given by
          Intercom.
        example: '123'
        schema:
          type: string
      tags:
      - News
      operationId: retrieveNewsfeed
      description: You can fetch the details of a single newsfeed
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    id: '47'
                    type: newsfeed
                    name: Visitor Feed
                    created_at: 1677597708
                    updated_at: 1677597708
              schema:
                "$ref": "#/components/schemas/newsfeed"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 4fe0671c-823a-4583-99fe-3b22ee9239db
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/notes/{id}":
    get:
      summary: Retrieve a note
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given note
        example: 1
        schema:
          type: integer
      tags:
      - Notes
      operationId: retrieveNote
      description: You can fetch the details of a single note.
      responses:
        '200':
          description: Note found
          content:
            application/json:
              examples:
                Note found:
                  value:
                    type: note
                    id: '44'
                    created_at: 1676906513
                    contact:
                      type: contact
                      id: 63fe1c11a5664f17f07a6fcb
                    author:
                      type: admin
                      id: '991267032'
                      name: Ciaran299 Lee
                      email: admin299@email.com
                      away_mode_enabled: false
                      away_mode_reassign: false
                    body: "<p>This is a note.</p>"
              schema:
                "$ref": "#/components/schemas/note"
        '404':
          description: Note not found
          content:
            application/json:
              examples:
                Note not found:
                  value:
                    type: error.list
                    request_id: efb1f5fb-c385-4711-b1dc-8dece98da0ec
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 374ed346-b4f9-4f81-86a1-9cc9ea0246f4
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/segments":
    get:
      summary: List all segments
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: include_count
        in: query
        required: false
        description: It includes the count of contacts that belong to each segment.
        example: true
        schema:
          type: boolean
      tags:
      - Segments
      operationId: listSegments
      description: You can fetch a list of all segments.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment.list
                    segments:
                    - type: segment
                      id: 63fe1c17a5664f17f07a6fd3
                      name: Jane segment
                      created_at: 1677597719
                      updated_at: 1677597719
                      person_type: user
                    - type: segment
                      id: 63fe1c17a5664f17f07a6fd2
                      name: John segment
                      created_at: 1677597719
                      updated_at: 1677597719
                      person_type: user
              schema:
                "$ref": "#/components/schemas/segment_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 89a68a51-96ba-4e9f-a1b4-0a6c6f7b50e1
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/segments/{id}":
    get:
      summary: Retrieve a segment
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identified of a given segment.
        example: '123'
        schema:
          type: string
      tags:
      - Segments
      operationId: retrieveSegment
      description: You can fetch the details of a single segment.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Successful response:
                  value:
                    type: segment
                    id: 63fe1c19a5664f17f07a6fd6
                    name: John segment
                    created_at: 1677597721
                    updated_at: 1677597721
                    person_type: user
              schema:
                "$ref": "#/components/schemas/segment"
        '404':
          description: Segment not found
          content:
            application/json:
              examples:
                Segment not found:
                  value:
                    type: error.list
                    request_id: 71631731-ebee-4dd6-a0db-e5228aff40f1
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: c468ec0c-fdee-4bc4-9438-79a769436968
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/subscription_types":
    get:
      summary: List subscription types
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Subscription Types
      operationId: listSubscriptionTypes
      description: You can list all subscription types. A list of subscription type
        objects will be returned.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              examples:
                Successful:
                  value:
                    type: list
                    data:
                    - type: subscription
                      id: '91'
                      state: live
                      consent_type: opt_out
                      default_translation:
                        name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      translations:
                      - name: Newsletters
                        description: Lorem ipsum dolor sit amet
                        locale: en
                      content_types:
                      - email
              schema:
                "$ref": "#/components/schemas/subscription_type_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 9c238add-1b42-4f34-9f80-f1a618081cca
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/phone_call_redirects":
    post:
      summary: Create a phone Switch
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Switch
      operationId: createPhoneSwitch
      description: |
        You can use the API to deflect phone calls to the Intercom Messenger.
        Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.

        If custom attributes are specified, they will be added to the user or lead's custom data attributes.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    url: http://via.intercom.io/msgr/4136961b-5dc9-4701-816d-f5645e02ed3d
                    type: phone_call_redirect
              schema:
                "$ref": "#/components/schemas/phone_switch"
        '400':
          description: bad request - invalid number
          content:
            application/json:
              examples:
                bad request - exception sending sms:
                  value:
                    error_key: sms_failed
                    message: SMS was not sent due to an unknown error
                bad request - invalid number:
                  value:
                    error_key: invalid_phone_number
                    message: Invalid phone number
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                unprocessable entity:
                  value:
                    error_key: some_error
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 14da2b38-0e22-4f97-a092-4caffc12f3f6
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_phone_switch_request"
            examples:
              successful:
                summary: successful
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_exception_sending_sms:
                summary: bad request - exception sending sms
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              bad_request_-_invalid_number:
                summary: bad request - invalid number
                value:
                  phone: "+353832345678"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
              unprocessable_entity:
                summary: unprocessable entity
                value:
                  phone: "+40241100100"
                  custom_attributes:
                    issue_type: Billing
                    priority: High
  "/tags":
    get:
      summary: List all tags
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tags
      operationId: listTags
      description: "You can fetch a list of all tags for a given workspace.\n\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: list
                    data:
                    - type: tag
                      id: '86'
                      name: Manual tag 1
              schema:
                "$ref": "#/components/schemas/tag_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 2a575834-9df0-4363-b9d4-9abaf8cad9f3
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Create or update a tag, Tag or untag companies, Tag contacts
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Tags
      operationId: createTag
      description: |
        You can use this endpoint to perform the following operations:

          **1. Create a new tag:** You can create a new tag by passing in the tag name as specified in "Create or Update Tag Request Payload" described below.

          **2. Update an existing tag:** You can update an existing tag by passing the id of the tag as specified in "Create or Update Tag Request Payload" described below.

          **3. Tag Companies:** You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in "Tag Company Request Payload" described below. Also, if the tag doesn't exist then a new one will be created automatically.

          **4. Untag Companies:** You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in "Untag Company Request Payload" described below.

          **5. Tag Multiple Users:** You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in "Tag Users Request Payload" described below.

        Each operation will return a tag object.
      responses:
        '200':
          description: Action successful
          content:
            application/json:
              examples:
                Action successful:
                  value:
                    type: tag
                    id: '89'
                    name: test
              schema:
                "$ref": "#/components/schemas/tag"
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                Invalid parameters:
                  value:
                    type: error.list
                    request_id: d6af9a15-9df6-450d-8429-3074fe49c70e
                    errors:
                    - code: parameter_invalid
                      message: invalid tag parameters
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: User  not found
          content:
            application/json:
              examples:
                Company not found:
                  value:
                    type: error.list
                    request_id: 37185e86-3be9-4ba5-9366-5140912d0802
                    errors:
                    - code: company_not_found
                      message: Company Not Found
                User  not found:
                  value:
                    type: error.list
                    request_id: fa949377-874e-4c5f-95c1-2444884f3f6a
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 6cf71964-51d2-4edb-abca-858afd47263c
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/create_or_update_tag_request"
              - "$ref": "#/components/schemas/tag_company_request"
              - "$ref": "#/components/schemas/untag_company_request"
              - "$ref": "#/components/schemas/tag_multiple_users_request"
            examples:
              action_successful:
                summary: Action successful
                value:
                  name: test
              invalid_parameters:
                summary: Invalid parameters
                value:
                  test: invalid
              company_not_found:
                summary: Company not found
                value:
                  name: test
                  companies:
                  - company_id: '123'
              user_not_found:
                summary: User  not found
                value:
                  name: test
                  users:
                  - id: '123'
  "/tags/{id}":
    get:
      summary: Find a specific tag
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: The unique identifier of a given tag
        example: '123'
        required: true
        schema:
          type: string
      tags:
      - Tags
      operationId: findTag
      description: |
        You can fetch the details of tags that are on the workspace by their id.
        This will return a tag object.
      responses:
        '200':
          description: Tag found
          content:
            application/json:
              examples:
                Tag found:
                  value:
                    type: tag
                    id: '97'
                    name: Manual tag
              schema:
                "$ref": "#/components/schemas/tag"
        '404':
          description: Tag not found
          content:
            application/json:
              examples:
                Tag not found:
                  value:
                    type: error.list
                    request_id: 301ca1f8-62b2-4717-af67-9bf2b9184dbe
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 266bd683-1640-4a39-87b7-b062134fee90
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete tag
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        description: The unique identifier of a given tag
        example: '123'
        required: true
        schema:
          type: string
      tags:
      - Tags
      operationId: deleteTag
      description: You can delete the details of tags that are on the workspace by
        passing in the id.
      responses:
        '200':
          description: Successful
        '404':
          description: Resource not found
          content:
            application/json:
              examples:
                Resource not found:
                  value:
                    type: error.list
                    request_id: 6e9b270e-0b1f-49a3-9d93-f8abcd86d9a8
                    errors:
                    - code: not_found
                      message: Resource Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '400':
          description: Tag has dependent objects
          content:
            application/json:
              examples:
                Tag has dependent objects:
                  value:
                    type: error.list
                    request_id: fc591532-76e4-4fce-a02d-70d4a70b7960
                    errors:
                    - code: tag_has_dependent_objects
                      message: 'Unable to delete Tag with dependent objects. Segments:
                        Seg 1.'
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 719e6661-b481-42b1-86eb-6008256a01a4
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/teams":
    get:
      summary: List all teams
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Teams
      operationId: listTeams
      description: This will return a list of team objects for the App.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team.list
                    teams: []
              schema:
                "$ref": "#/components/schemas/team_list"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 74508b98-6195-4f90-b44f-73d4974cb04e
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/teams/{id}":
    get:
      summary: Retrieve a team
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: The unique identifier of a given team.
        example: '123'
        schema:
          type: string
      tags:
      - Teams
      operationId: retrieveTeam
      description: You can fetch the details of a single team, containing an array
        of admins that belong to this team.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: team
                    id: '991267076'
                    name: team 1
                    admin_ids: []
              schema:
                "$ref": "#/components/schemas/team"
        '404':
          description: Team not found
          content:
            application/json:
              examples:
                Team not found:
                  value:
                    type: error.list
                    request_id: 5aa745a9-0745-4fb0-b233-f599feae1ac0
                    errors:
                    - code: team_not_found
                      message: Team not found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a1318a19-11d9-4421-a1b4-fbe8357d0ee4
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/visitors":
    put:
      summary: Update a visitor
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Visitors
      operationId: updateVisitor
      description: |
        Sending a PUT request to `/visitors` will result in an update of an existing Visitor.

        **Option 1.** You can update a visitor by passing in the `user_id` of the visitor in the Request body.

        **Option 2.** You can update a visitor by passing in the `id` of the visitor in the Request body.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 63fe1c97a5664f17f07a70ef
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone: 
                    name: Gareth Bale
                    pseudonym: Turquoise Sunshine
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/app/pseudonym_avatars_2019/turquoise-sunshine.png
                    app_id: this_is_an_id561_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at: 
                    created_at: 1677597847
                    remote_created_at: 1677597847
                    signed_up_at: 1677597847
                    updated_at: 1677597847
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id: 
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer: 
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    do_not_track: 
              schema:
                "$ref": "#/components/schemas/visitor"
        '404':
          description: visitor Not Found
          content:
            application/json:
              examples:
                visitor Not Found:
                  value:
                    type: error.list
                    request_id: e6a70676-487b-4f26-b919-13a837d74252
                    errors:
                    - code: not_found
                      message: Visitor Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 5d887cba-c08e-481a-91ee-2279ce33c601
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_visitor_request"
            examples:
              successful:
                summary: successful
                value:
                  id: 63fe1c97a5664f17f07a70ef
                  name: Gareth Bale
              visitor_not_found:
                summary: visitor Not Found
                value:
                  user_id: fail
                  name: Christian Fail
    get:
      summary: Retrieve a visitor with User ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: user_id
        in: query
        description: The user_id of the Visitor you want to retrieve.
        required: true
        schema:
          type: string
      tags:
      - Visitors
      operationId: retrieveVisitorWithUserId
      description: You can fetch the details of a single visitor.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 63fe1c99a5664f17f07a70f2
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone: 
                    name: 
                    pseudonym: 
                    avatar:
                      type: avatar
                      image_url: 
                    app_id: this_is_an_id567_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at: 
                    created_at: 1677597849
                    remote_created_at: 1677597849
                    signed_up_at: 1677597849
                    updated_at: 1677597849
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id: 
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer: 
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    do_not_track: 
              schema:
                "$ref": "#/components/schemas/visitor"
        '404':
          description: Visitor not found
          content:
            application/json:
              examples:
                Visitor not found:
                  value:
                    type: error.list
                    request_id: 0b2c8cb6-de39-4ce3-812a-025af2781c6b
                    errors:
                    - code: not_found
                      message: Visitor Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 3059bcbf-6db8-4afd-9601-61964d0d58a2
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/visitors/{id}":
    get:
      summary: Retrieve a visitor with ID
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: Id provided by Intercom.
        example: 5e1c4c1c-7b1e-4b5d-8c1c-5e1c4c1c7b1e
        schema:
          type: string
      tags:
      - Visitors
      operationId: retrieveVisitor
      description: You can fetch the details of a single visitor.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 63fe1c9ba5664f17f07a70f5
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone: 
                    name: 
                    pseudonym: 
                    avatar:
                      type: avatar
                      image_url: 
                    app_id: this_is_an_id573_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at: 
                    created_at: 1677597851
                    remote_created_at: 1677597851
                    signed_up_at: 1677597851
                    updated_at: 1677597851
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id: 
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer: 
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    do_not_track: 
              schema:
                "$ref": "#/components/schemas/visitor"
        '404':
          description: Visitor not found
          content:
            application/json:
              examples:
                Visitor not found:
                  value:
                    type: error.list
                    request_id: d707b85a-e7fd-44be-b1ba-dc491067b4be
                    errors:
                    - code: not_found
                      message: Visitor Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: a4f3a10b-31cb-4135-bc42-5ee4b3150d5a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Delete a visitor
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      - name: id
        in: path
        required: true
        description: Id provided by Intercom.
        example: 5e1c4c1c-7b1e-4b5d-8c1c-5e1c4c1c7b1e
        schema:
          type: string
      tags:
      - Visitors
      operationId: deleteVisitor
      description: You can delete a single visitor.
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 63fe1c9da5664f17f07a70f8
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone: 
                    name: 
                    pseudonym: 
                    avatar:
                      type: avatar
                      image_url: 
                    app_id: this_is_an_id579_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at: 
                    created_at: 1677597853
                    remote_created_at: 1677597853
                    signed_up_at: 1677597853
                    updated_at: 1677597853
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id: 
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer: 
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    do_not_track: 
              schema:
                "$ref": "#/components/schemas/visitor_deleted_object"
        '404':
          description: Visitor Not Found
          content:
            application/json:
              examples:
                Visitor Not Found:
                  value:
                    type: error.list
                    request_id: 8cb3f43f-36f4-443c-abfa-081075fc5db4
                    errors:
                    - code: not_found
                      message: User Not Found
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: 1e401967-c71c-4045-acff-b5b1bebc5d08
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
  "/visitors/convert":
    post:
      summary: Convert a visitor
      parameters:
      - name: Intercom-Version
        in: header
        schema:
          "$ref": "#/components/schemas/intercom_version"
      tags:
      - Visitors
      operationId: convertVisitor
      description: "You can merge a Visitor to a Contact of role type `lead` or `user`.\n\n>
        \U0001F4D8 What happens upon a visitor being converted?\n>\n> If the User
        exists, then the Visitor will be merged into it, the Visitor deleted and the
        User returned. If the User does not exist, the Visitor will be converted to
        a User, with the User identifiers replacing it's Visitor identifiers.\n"
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                successful:
                  value:
                    type: visitor
                    id: 63fe1c9fa5664f17f07a70fb
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                    anonymous: true
                    email: ''
                    phone: 
                    name: 
                    pseudonym: Rose Dove
                    avatar:
                      type: avatar
                      image_url: https://static.intercomassets.com/app/pseudonym_avatars_2019/rose-dove.png
                    app_id: this_is_an_id585_that_should_be_at_least_
                    companies:
                      type: company.list
                      companies: []
                    location_data: {}
                    last_request_at: 
                    created_at: 1677597855
                    remote_created_at: 1677597856
                    signed_up_at: 1677597856
                    updated_at: 1677597856
                    session_count: 0
                    social_profiles:
                      type: social_profile.list
                      social_profiles: []
                    owner_id: 
                    unsubscribed_from_emails: false
                    marked_email_as_spam: false
                    has_hard_bounced: false
                    tags:
                      type: tag.list
                      tags: []
                    segments:
                      type: segment.list
                      segments: []
                    custom_attributes: {}
                    referrer: 
                    utm_campaign: 
                    utm_content: 
                    utm_medium: 
                    utm_source: 
                    utm_term: 
                    do_not_track: 
              schema:
                "$ref": "#/components/schemas/contact"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    type: error.list
                    request_id: bce7c505-965a-40ca-9c54-927b3c63756a
                    errors:
                    - code: unauthorized
                      message: Access Token Invalid
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/convert_visitor_request"
            examples:
              successful:
                summary: successful
                value:
                  visitor:
                    user_id: 3ecf64d0-9ed1-4e9f-88e1-da7d6e6782f3
                  contact:
                    email: ''
                  type: user
components:
  schemas:
    admin_with_app:
      title: Admin
      type: object
      description: Admins are the teammate accounts that have access to a workspace
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Hoban Washburne
        email:
          type: string
          description: The email of the admin.
          example: wash@serenity.io
        job_title:
          type: string
          description: The job title of the admin.
          example: Philosopher
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This is a list of ids of the teams that this admin is part
            of.
          example:
          - 814865
          items:
            type: integer
        avatar:
          type: object
          description: This object represents the avatar associated with the admin.
          properties:
            type:
              type: string
              description: This is a string that identifies the type of the object.
                It will always have the value `avatar`.
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the admin.
              example: https://example.com/avatar.png
        email_verified:
          type: boolean
          description: Identifies if this admin's email is verified.
          nullable: true
          example: true
        app:
          "$ref": "#/components/schemas/app"
          nullable: true
          description: App that the admin belongs to.
    article_list:
      title: Articles
      type: object
      description: This will return a list of articles for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of articles.
          example: 1
        data:
          type: array
          description: An array of Article objects
          items:
            "$ref": "#/components/schemas/article"
    article_statistics:
      title: Article Statistics
      type: object
      description: The statistics of an article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_statistics`.
          enum:
          - article_statistics
          default: article_statistics
          example: article_statistics
        views:
          type: integer
          description: The number of total views the article has received.
          example: 10
        conversions:
          type: integer
          description: The number of conversations started from the article.
          example: 0
        reactions:
          type: integer
          description: The number of total reactions the article has received.
          example: 10
        happy_reaction_precentage:
          type: integer
          description: The percentage of happy reactions the article has received
            against other types of reaction.
          example: 40
        netural_reaction_precentage:
          type: integer
          description: The percentage of neutral reactions the article has received
            against other types of reaction.
          example: 40
        sad_reaction_precentage:
          type: integer
          description: The percentage of sad reactions the article has received against
            other types of reaction.
          example: 20
    article_translated_content:
      title: Article Translated Content
      type: object
      description: The Translated Content of an Article. The keys are the locale codes
        and the values are the translated content of the article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - article_translated_content.
          enum:
          - 
          - article_translated_content
          example: article_translated_content
        ar:
          description: The content of the article in Arabic
          "$ref": "#/components/schemas/article_content"
        bg:
          description: The content of the article in Bulgarian
          "$ref": "#/components/schemas/article_content"
        bs:
          description: The content of the article in Bosnian
          "$ref": "#/components/schemas/article_content"
        ca:
          description: The content of the article in Catalan
          "$ref": "#/components/schemas/article_content"
        cs:
          description: The content of the article in Czech
          "$ref": "#/components/schemas/article_content"
        da:
          description: The content of the article in Danish
          "$ref": "#/components/schemas/article_content"
        de:
          description: The content of the article in German
          "$ref": "#/components/schemas/article_content"
        el:
          description: The content of the article in Greek
          "$ref": "#/components/schemas/article_content"
        en:
          description: The content of the article in English
          "$ref": "#/components/schemas/article_content"
        es:
          description: The content of the article in Spanish
          "$ref": "#/components/schemas/article_content"
        et:
          description: The content of the article in Estonian
          "$ref": "#/components/schemas/article_content"
        fi:
          description: The content of the article in Finnish
          "$ref": "#/components/schemas/article_content"
        fr:
          description: The content of the article in French
          "$ref": "#/components/schemas/article_content"
        he:
          description: The content of the article in Hebrew
          "$ref": "#/components/schemas/article_content"
        hr:
          description: The content of the article in Croatian
          "$ref": "#/components/schemas/article_content"
        hu:
          description: The content of the article in Hungarian
          "$ref": "#/components/schemas/article_content"
        id:
          description: The content of the article in Indonesian
          "$ref": "#/components/schemas/article_content"
        it:
          description: The content of the article in Italian
          "$ref": "#/components/schemas/article_content"
        ja:
          description: The content of the article in Japanese
          "$ref": "#/components/schemas/article_content"
        ko:
          description: The content of the article in Korean
          "$ref": "#/components/schemas/article_content"
        lt:
          description: The content of the article in Lithuanian
          "$ref": "#/components/schemas/article_content"
        lv:
          description: The content of the article in Latvian
          "$ref": "#/components/schemas/article_content"
        mn:
          description: The content of the article in Mongolian
          "$ref": "#/components/schemas/article_content"
        nb:
          description: The content of the article in Norwegian
          "$ref": "#/components/schemas/article_content"
        nl:
          description: The content of the article in Dutch
          "$ref": "#/components/schemas/article_content"
        pl:
          description: The content of the article in Polish
          "$ref": "#/components/schemas/article_content"
        pt:
          description: The content of the article in Portuguese (Portugal)
          "$ref": "#/components/schemas/article_content"
        ro:
          description: The content of the article in Romanian
          "$ref": "#/components/schemas/article_content"
        ru:
          description: The content of the article in Russian
          "$ref": "#/components/schemas/article_content"
        sl:
          description: The content of the article in Slovenian
          "$ref": "#/components/schemas/article_content"
        sr:
          description: The content of the article in Serbian
          "$ref": "#/components/schemas/article_content"
        sv:
          description: The content of the article in Swedish
          "$ref": "#/components/schemas/article_content"
        tr:
          description: The content of the article in Turkish
          "$ref": "#/components/schemas/article_content"
        vi:
          description: The content of the article in Vietnamese
          "$ref": "#/components/schemas/article_content"
        pt-BR:
          description: The content of the article in Portuguese (Brazil)
          "$ref": "#/components/schemas/article_content"
        zh-CN:
          description: The content of the article in Chinese (China)
          "$ref": "#/components/schemas/article_content"
        zh-TW:
          description: The content of the article in Chinese (Taiwan)
          "$ref": "#/components/schemas/article_content"
    company_attached_contacts:
      title: Company Attached Contacts
      type: object
      description: A list of Contact Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          description: An array containing Contact Objects
          items:
            "$ref": "#/components/schemas/contact"
        total_count:
          type: integer
          description: The total number of contacts
          example: 100
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    company_attached_segments:
      title: Company Attached Segments
      type: object
      description: A list of Segment Objects
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          description: An array containing Segment Objects
          items:
            "$ref": "#/components/schemas/segment"
    company_list:
      title: Companys
      type: object
      description: This will return a list of company for the App.
      properties:
        type:
          type: string
          description: The type of object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: The total number of companies.
          example: 100
        data:
          type: array
          description: An array containing Company Objects.
          items:
            "$ref": "#/components/schemas/company"
    company_scroll:
      title: Company Scroll
      type: object
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `list`
          enum:
          - list
          example: list
        data:
          type: array
          items:
            "$ref": "#/components/schemas/company"
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: The total number of companies
          nullable: true
          example: 100
        scroll_param:
          type: string
          description: The scroll parameter to use in the next request to fetch the
            next page of results.
          example: 25b649f7-4d33-4ef6-88f5-60e5b8244309
    contact_attached_companies:
      title: Contact Attached Companies
      type: object
      description: A list of Company Objects
      properties:
        type:
          type: string
          description: The type of object
          enum:
          - list
          example: list
        companies:
          type: array
          description: An array containing Company Objects
          items:
            "$ref": "#/components/schemas/company"
        total_count:
          type: integer
          description: The total number of companies associated to this contact
          example: 100
        pages:
          "$ref": "#/components/schemas/pages_link"
    article:
      title: Article
      type: object
      description: The Articles API is a central place to gather all information and
        take actions on your articles. Articles can live within collections and sections,
        or alternatively they can stand alone.
      properties:
        type:
          type: string
          description: The type of object - `article`.
          enum:
          - article
          default: article
          example: article
        id:
          type: string
          description: The unique identifier for the article which is given by Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the article belongs to.
          example: hfi1bx4l
        title:
          type: string
          description: The title of the article. For multilingual articles, this will
            be the title of the default language's content.
          example: Default language title
        description:
          type: string
          nullable: true
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Default language description
        body:
          type: string
          nullable: true
          description: The body of the article in HTML. For multilingual articles,
            this will be the body of the default language's content.
          example: Default language body in html
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft`. For multilingual
            articles, this will be the state of the default language's content.
          enum:
          - published
          - draft
          default: draft
          example: published
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created. For multilingual articles,
            this will be the timestamp of creation of the default language's content.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated. For multilingual
            articles, this will be the timestamp of last update of the default language's
            content.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the article. For multilingual articles, this will
            be the URL of the default language's content.
          example: http://intercom.test/help/en/articles/3-default-language
        parent_id:
          type: integer
          nullable: true
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '125685'
        parent_type:
          type: string
          nullable: true
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/article_translated_content"
        statistics:
          nullable: true
          "$ref": "#/components/schemas/article_statistics"
    contact_list:
      title: Contact List
      type: object
      description: Contacts are your users in Intercom.
      properties:
        type:
          type: string
          description: Always list
          enum:
          - list
          example: list
        data:
          type: array
          description: The list of contact objects
          items:
            "$ref": "#/components/schemas/contact"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 100
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    contact_location:
      title: Contact Location
      type: object
      nullable: false
      description: An object containing location meta data about a Intercom contact.
      properties:
        type:
          type: string
          nullable: true
          description: Always location
          example: location
        country:
          type: string
          nullable: true
          description: The country that the contact is located in
          example: Ireland
        region:
          type: string
          nullable: true
          description: The overal region that the contact is located in
          example: Dublin
        city:
          type: string
          nullable: true
          description: The city that the contact is located in
          example: Dublin
    contact_companies:
      title: Contact companies
      type: object
      nullable: false
      description: An object containing companies meta data about the companies that
        a contact has.
      properties:
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/companies"
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_notes:
      title: Contact notes
      type: object
      nullable: false
      description: An object containing notes meta data about the notes that a contact
        has.
      properties:
        data:
          type: array
          description: This object represents the notes attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/notes"
        total_count:
          type: integer
          description: Int representing the total number of companyies attached to
            this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_social_profiles:
      title: Social Profile
      type: object
      nullable: false
      description: An object containing social profiles that a contact has.
      properties:
        data:
          type: array
          description: A list of social profiles objects associated with the contact.
          items:
            "$ref": "#/components/schemas/social_profile"
    contact_subscription_types:
      title: Contact Subscription Types
      type: object
      nullable: false
      description: An object containing Subscription Types meta data about the SubscriptionTypes
        that a contact has.
      properties:
        data:
          type: array
          description: This object represents the subscriptions attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: Url to get more subscription type resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/subscriptions"
        total_count:
          type: integer
          description: Int representing the total number of subscription types attached
            to this contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    contact_segments:
      title: Segments
      type: object
      description: A list of segments objects attached to a specific contact.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: Segment objects associated with the contact.
          items:
            "$ref": "#/components/schemas/segment"
    conversation_contacts:
      title: Contacts
      type: object
      description: The list of contacts (users or leads) involved in this conversation.
        This will only contain one customer unless more were added via the group conversation
        feature.
      properties:
        type:
          type: string
          description: ''
          enum:
          - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts (users or leads) involved in this conversation.
            This will only contain one customer unless more were added via the group
            conversation feature.
          items:
            "$ref": "#/components/schemas/reference"
    conversation_first_contact_reply:
      title: First contact reply
      type: object
      nullable: true
      description: An object containing information on the first users message. For
        a contact initiated message this will represent the users original message.
      properties:
        created_at:
          type: integer
          format: date-time
          description: ''
          example: 1663597223
        type:
          type: string
          description: ''
          example: conversation
        url:
          type: string
          nullable: true
          description: ''
          example: https://developers.intercom.com/
    contact_tags:
      title: Contact Tags
      type: object
      nullable: true
      description: An object containing tags meta data about the tags that a contact
        has.
      properties:
        data:
          type: array
          description: This object represents the tags attached to a contact.
          items:
            "$ref": "#/components/schemas/addressable_list"
        url:
          type: string
          format: uri
          description: url to get more tag resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/tags"
        total_count:
          type: integer
          description: Int representing the total number of tags attached to this
            contact
          example: 100
        has_more:
          type: boolean
          description: Whether there's more Addressable Objects to be viewed. If true,
            use the url to view all
          example: true
    conversation_part_attachment:
      title: Conversation part attachment
      type: object
      description: The file attached to a conversation part
      properties:
        type:
          type: string
          description: The type of attachment
          example: upload
        name:
          type: string
          description: The name of the attachment
          example: example.png
        url:
          type: string
          description: The URL of the attachment
          example: https://picsum.photos/200/300
        content_type:
          type: string
          description: The content type of the attachment
          example: image/png
        filesize:
          type: integer
          description: The size of the attachment
          example: 100
        width:
          type: integer
          description: The width of the attachment
          example: 100
        height:
          type: integer
          description: The height of the attachment
          example: 100
    conversation_part_author:
      title: Conversation part author
      type: object
      description: The object who initiated the conversation, which can be a Contact,
        Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams.
        For Twitter, this will be blank.
      properties:
        type:
          type: string
          description: The type of the author
          example: admin
        id:
          type: string
          description: The id of the author
          example: '274'
        name:
          type: string
          description: The name of the author
          example: Operator
        email:
          type: string
          format: email
          description: The email of the author
          example: operator+abcd1234@intercom.io
    conversation_list:
      title: Conversation List
      type: object
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.list
          enum:
          - conversation.list
          example: conversation.list
        conversations:
          type: array
          description: The list of conversation objects
          items:
            "$ref": "#/components/schemas/conversation"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 12345
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    conversation_statistics:
      title: Conversation statistics
      type: object
      nullable: true
      description: A Statistics object containing all information required for reporting,
        with timestamps and calculated metrics.
      properties:
        type:
          type: string
          description: ''
          example: conversation_statistics
        time_to_assignment:
          type: integer
          description: Duration until last assignment before first admin reply. In
            seconds.
          example: 2310
        time_to_admin_reply:
          type: integer
          description: Duration until first admin reply. Subtracts out of business
            hours. In seconds.
          example: 2310
        time_to_first_close:
          type: integer
          description: Duration until conversation was closed first time. Subtracts
            out of business hours. In seconds.
          example: 2310
        time_to_last_close:
          type: integer
          description: Duration until conversation was closed last time. Subtracts
            out of business hours. In seconds.
          example: 2310
        median_time_to_reply:
          type: integer
          description: Median based on all admin replies after a contact reply. Subtracts
            out of business hours. In seconds.
          example: 2310
        first_contact_reply_at:
          type: integer
          format: date-time
          description: Time of first text conversation part from a contact.
          example: 1663597233
        first_assignment_at:
          type: integer
          format: date-time
          description: Time of first assignment after first_contact_reply_at.
          example: 1663597233
        first_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply after first_contact_reply_at.
          example: 1663597233
        first_close_at:
          type: integer
          format: date-time
          description: Time of first close after first_contact_reply_at.
          example: 1663597233
        last_assignment_at:
          type: integer
          format: date-time
          description: Time of last assignment after first_contact_reply_at.
          example: 1663597233
        last_assignment_admin_reply_at:
          type: integer
          format: date-time
          description: Time of first admin reply since most recent assignment.
          example: 1663597233
        last_contact_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from a contact.
          example: 1663597233
        last_admin_reply_at:
          type: integer
          format: date-time
          description: Time of the last conversation part from an admin.
          example: 1663597233
        last_close_at:
          type: integer
          format: date-time
          description: Time of the last conversation close.
          example: 1663597233
        last_closed_by_id:
          type: string
          description: The last admin who closed the conversation. Returns a reference
            to an Admin object.
          example: c3po
        count_reopens:
          type: integer
          description: Number of reopens after first_contact_reply_at.
          example: 1
        count_assignments:
          type: integer
          description: Number of assignments after first_contact_reply_at.
          example: 1
        count_conversation_parts:
          type: integer
          description: Total number of conversation parts.
          example: 1
    conversation_teammates:
      title: Conversation teammates
      type: object
      nullable: true
      description: The list of teammates who participated in the conversation (wrote
        at least one conversation part).
      properties:
        type:
          type: string
          description: The type of the object - `admin.list`.
          example: admin.list
        teammates:
          type: array
          description: The list of teammates who participated in the conversation
            (wrote at least one conversation part).
          items:
            "$ref": "#/components/schemas/reference"
    cursor_pages:
      title: Cursor based pages
      type: object
      description: |
        Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data.
        A "cursor" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or "pages" as needed.
      nullable: true
      properties:
        type:
          type: string
          description: the type of object `pages`.
          example: pages
          enum:
          - pages
        page:
          type: integer
          description: The current page
          example: 1
        next:
          "$ref": "#/components/schemas/starting_after_paging"
        per_page:
          type: integer
          description: Number of results per page
          example: 2
        total_pages:
          type: integer
          description: Total number of pages
          example: 13
    custom_object_instance:
      title: Custom Object Instance
      type: object
      nullable: true
      description: An instance of a Custom Object Type.
      properties:
        id:
          type: string
          description: The Intercom defined id representing the custom object instance.
          example: 5a7a19e9f59ae20001d1c1e6
        external_id:
          type: string
          description: The id you have defined for the custom object instance.
          example: 0001d1c1e65a7a19e9f59ae2
        type:
          type: string
          description: The identifier of the custom object type that defines the structure
            of the custom object instance.
          example: Order
        custom_attributes:
          type: object
          description: The custom attributes you have set on the custom object instance.
          additionalProperties:
            type: string
    data_attribute_list:
      title: Data Attribute List
      type: object
      description: A list of all data attributes belonging to a workspace for contacts,
        companies or conversations.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of data attributes
          items:
            "$ref": "#/components/schemas/data_attribute"
    conversation_source:
      title: Conversation source
      type: object
      description: The Conversation Part that originated this conversation, which
        can be Contact, Admin, Campaign, Automated or Operator initiated.
      properties:
        type:
          type: string
          description: This includes conversation, push, facebook, twitter and email.
          example: conversation
        id:
          type: string
          description: The id representing the message.
          example: '3'
        delivered_as:
          type: string
          description: The conversation's initiation type. Possible values are customer_initiated,
            campaigns_initiated (legacy campaigns), operator_initiated (Custom bot),
            automated (Series and other outbounds with dynamic audience message) and
            admin_initiated (fixed audience message, ticket initiated by an admin,
            group email).
          example: operator_initiated
        subject:
          type: string
          description: Optional. The message subject. For Twitter, this will show
            a generic message regarding why the subject is obscured.
          example: ''
        body:
          type: string
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: "<p>Hey there!</p>"
        author:
          "$ref": "#/components/schemas/conversation_part_author"
        attachments:
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/conversation_part_attachment"
        url:
          type: string
          nullable: true
          description: The URL where the conversation was started. For Twitter, Email,
            and Bots, this will be blank.
          example: 
        redacted:
          type: boolean
          description: Whether or not the source message has been redacted. Only applicable
            for contact initiated messages.
          example: false
    data_event_list:
      title: Data Event List
      type: object
      description: This will return a list of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event.list
          example: event.list
        events:
          type: array
          description: A list of data events
          items:
            "$ref": "#/components/schemas/data_event"
        pages:
          type: object
          description: Pagination
          properties:
            next:
              type: string
              example: https://api.intercom.io/events?per_page=2&before=1389913941064&intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user"
            since:
              type: string
              example: https://api.intercom.io/events?intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user&since=1389913941065
    data_event_summary:
      title: Data Event Summary
      type: object
      description: This will return a summary of data events for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event.summary
          example: event.summary
        email:
          type: string
          description: The email address of the user
          example: Sam.Sung@example.com
        intercom_user_id:
          type: string
          description: The Intercom user ID of the user
          example: 63a0979a5eeebeaf28dd56ba
        user_id:
          type: string
          description: The user ID of the user
          example: 62b997f288e14803c5006932
        events:
          type: array
          description: A summary of data events
          items:
            "$ref": "#/components/schemas/data_event_summary_item"
    data_event:
      title: Data Event
      type: object
      description: Data events are used to notify Intercom of changes to your data.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - event
          example: event
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: Your identifier for a lead or a user.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        intercom_user_id:
          type: string
          description: The Intercom identifier for the user.
          example: 63a0979a5eeebeaf28dd56ba
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      required:
      - event_name
      - created_at
    data_event_summary_item:
      title: Data Event Summary Item
      type: object
      description: This will return a summary of a data event for the App.
      nullable: true
      properties:
        name:
          type: string
          description: The name of the event
          example: placed-order
        first:
          type: string
          description: The first time the event was sent
          example: '2014-01-16T23:12:21.000+00:00'
        last:
          type: string
          description: The last time the event was sent
          example: '2014-01-16T23:12:21.000+00:00 '
        count:
          type: integer
          description: The number of times the event was sent
          example: 1
        description:
          type: string
          description: The description of the event
          example: A user placed an order
    data_export:
      title: Data Export
      type: object
      description: The data export api is used to view all message sent & viewed in
        a given timeframe.
      properties:
        job_identfier:
          type: string
          description: The identifier for your job.
          example: orzzsbd7hk67xyu
        status:
          type: string
          enum:
          - pending
          - in_progress
          - failed
          - completed
          - no_data
          - canceled
          description: The current state of your job.
          example: pending
        download_expires_at:
          type: string
          description: The time after which you will not be able to access the data.
          example: '1674917488'
        download_url:
          type: string
          description: The location where you can download your data.
          example: https://api.intercom.test/download/messages/data/example
    deleted_article_object:
      title: Deleted Article Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the article which you provided in
            the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - article
          enum:
          - article
          example: article
        deleted:
          type: boolean
          description: Whether the article was deleted successfully or not.
          example: true
    deleted_collection_object:
      title: Deleted Collection Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the collection which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - `collection`
          enum:
          - collection
          example: collection
        deleted:
          type: boolean
          description: Whether the collection was deleted successfully or not.
          example: true
    deleted_company_object:
      title: Deleted Company Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the company which is given by Intercom.
          example: 5b7e8b2f-7a1a-4e6c-8e1b-4f9d4f4c4d4f
        object:
          type: string
          description: The type of object which was deleted. - `company`
          enum:
          - company
          example: company
        deleted:
          type: boolean
          description: Whether the company was deleted successfully or not.
          example: true
    deleted_section_object:
      title: Deleted Section Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the section which you provided in
            the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted. - `section`
          enum:
          - section
          example: section
        deleted:
          type: boolean
          description: Whether the section was deleted successfully or not.
          example: true
    file_attribute:
      title: File
      type: object
      description: The value describing a file upload set for a custom attribute
      properties:
        type:
          type: string
          example: upload
        name:
          type: string
          description: The name of the file
          example: Screenshot.png
        url:
          type: string
          description: The url of the file. This is a temporary URL and will expire
            after 30 minutes.
          example: https://intercom-attachments-1.com/.../Screenshot.png
        content_type:
          type: string
          description: The type of file
          example: image/png
        filesize:
          type: integer
          description: The size of the file in bytes
          example: 11308309
        width:
          type: integer
          description: The width of the file in pixels, if applicable
          example: 3024
        height:
          type: integer
          description: The height of the file in pixels, if applicable
          example: 1964
    contact:
      title: Contact
      type: object
      description: Contact are the objects that represent your leads and users in
        Intercom.
      properties:
        type:
          type: string
          description: The type of object.
          example: contact
        id:
          type: string
          description: The unique identifier for the contact which is given by Intercom.
          example: 5ba682d23d7cf92bef87bfd4
        workspace_id:
          type: string
          description: The id of the workspace which the contact belongs to.
          example: ecahpwf5
        role:
          type: string
          description: The role of the contact.
          example: user
        email:
          type: string
          description: The contacts email.
          example: joe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone.
          example: "+1123456789"
        name:
          type: string
          nullable: true
          description: The contacts name.
          example: John Doe
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact.
          example: 123
        has_hard_bounced:
          type: boolean
          description: Whether the contact has had an email sent to them hard bounce.
          example: true
        marked_email_as_spam:
          type: boolean
          description: Whether the contact has marked an email sent to them as spam.
          example: true
        unsubscribed_from_emails:
          type: boolean
          description: Whether the contact is unsubscribed from emails.
          example: true
        created_at:
          type: integer
          format: date-time
          description: "(UNIX timestamp) The time when the contact was created."
          example: 1571672154
        updated_at:
          type: integer
          format: date-time
          description: "(UNIX timestamp) The time when the contact was last updated."
          example: 1571672154
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time specified for when a contact signed
            up."
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact was last seen (either
            where the Intercom Messenger was installed or when specified manually)."
          example: 1571672154
        last_replied_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last messaged in."
          example: 1571672154
        last_contacted_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact was last messaged."
          example: 1571672154
        last_email_opened_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last opened an
            email."
          example: 1571672154
        last_email_clicked_at:
          type: integer
          format: date-time
          nullable: true
          description: "(UNIX timestamp) The time when the contact last clicked a
            link in an email."
          example: 1571672154
        language_override:
          type: string
          nullable: true
          description: A preferred language setting for the contact, used by the Intercom
            Messenger even if their browser settings change.
          example: en
        browser:
          type: string
          nullable: true
          description: The name of the browser which the contact is using.
          example: Chrome
        browser_version:
          type: string
          nullable: true
          description: The version of the browser which the contact is using.
          example: 80.0.3987.132
        browser_language:
          type: string
          nullable: true
          description: The language set by the browser which the contact is using.
          example: en-US
        os:
          type: string
          nullable: true
          description: The operating system which the contact is using.
          example: Mac OS X
        android_app_name:
          type: string
          nullable: true
          description: The name of the Android app which the contact is using.
          example: Intercom
        android_app_version:
          type: string
          nullable: true
          description: The version of the Android app which the contact is using.
          example: 5.0.0
        android_device:
          type: string
          nullable: true
          description: The Android device which the contact is using.
          example: Pixel 3
        android_os_version:
          type: string
          nullable: true
          description: The version of the Android OS which the contact is using.
          example: '10'
        android_sdk_version:
          type: string
          nullable: true
          description: The version of the Android SDK which the contact is using.
          example: '28'
        android_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: "(UNIX timestamp) The time when the contact was last seen on
            an Android device."
          example: 1571672154
        ios_app_name:
          type: string
          nullable: true
          description: The name of the iOS app which the contact is using.
          example: Intercom
        ios_app_version:
          type: string
          nullable: true
          description: The version of the iOS app which the contact is using.
          example: 5.0.0
        ios_device:
          type: string
          nullable: true
          description: The iOS device which the contact is using.
          example: iPhone 11
        ios_os_version:
          type: string
          nullable: true
          description: The version of iOS which the contact is using.
          example: 13.3.1
        ios_sdk_version:
          type: string
          nullable: true
          description: The version of the iOS SDK which the contact is using.
          example: 13.3.1
        ios_last_seen_at:
          type: integer
          nullable: true
          format: date-time
          description: "(UNIX timestamp) The last time the contact used the iOS app."
          example: 1571672154
        custom_attributes:
          type: object
          description: The custom attributes which are set for the contact.
        avatar:
          type: object
          nullable: true
          properties:
            type:
              type: string
              description: The type of object
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: An image URL containing the avatar of a contact.
              example: https://example.org/128Wash.jpg
        tags:
          "$ref": "#/components/schemas/contact_tags"
        notes:
          "$ref": "#/components/schemas/contact_notes"
        companies:
          "$ref": "#/components/schemas/contact_companies"
        location:
          "$ref": "#/components/schemas/contact_location"
        social_profiles:
          "$ref": "#/components/schemas/contact_social_profiles"
    group_translated_content:
      title: Group Translated Content
      type: object
      description: The Translated Content of an Group. The keys are the locale codes
        and the values are the translated content of the Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - group_translated_content.
          nullable: true
          enum:
          - 
          - group_translated_content
          example: group_translated_content
        ar:
          description: The content of the group in Arabic
          "$ref": "#/components/schemas/group_content"
        bg:
          description: The content of the group in Bulgarian
          "$ref": "#/components/schemas/group_content"
        bs:
          description: The content of the group in Bosnian
          "$ref": "#/components/schemas/group_content"
        ca:
          description: The content of the group in Catalan
          "$ref": "#/components/schemas/group_content"
        cs:
          description: The content of the group in Czech
          "$ref": "#/components/schemas/group_content"
        da:
          description: The content of the group in Danish
          "$ref": "#/components/schemas/group_content"
        de:
          description: The content of the group in German
          "$ref": "#/components/schemas/group_content"
        el:
          description: The content of the group in Greek
          "$ref": "#/components/schemas/group_content"
        en:
          description: The content of the group in English
          "$ref": "#/components/schemas/group_content"
        es:
          description: The content of the group in Spanish
          "$ref": "#/components/schemas/group_content"
        et:
          description: The content of the group in Estonian
          "$ref": "#/components/schemas/group_content"
        fi:
          description: The content of the group in Finnish
          "$ref": "#/components/schemas/group_content"
        fr:
          description: The content of the group in French
          "$ref": "#/components/schemas/group_content"
        he:
          description: The content of the group in Hebrew
          "$ref": "#/components/schemas/group_content"
        hr:
          description: The content of the group in Croatian
          "$ref": "#/components/schemas/group_content"
        hu:
          description: The content of the group in Hungarian
          "$ref": "#/components/schemas/group_content"
        id:
          description: The content of the group in Indonesian
          "$ref": "#/components/schemas/group_content"
        it:
          description: The content of the group in Italian
          "$ref": "#/components/schemas/group_content"
        ja:
          description: The content of the group in Japanese
          "$ref": "#/components/schemas/group_content"
        ko:
          description: The content of the group in Korean
          "$ref": "#/components/schemas/group_content"
        lt:
          description: The content of the group in Lithuanian
          "$ref": "#/components/schemas/group_content"
        lv:
          description: The content of the group in Latvian
          "$ref": "#/components/schemas/group_content"
        mn:
          description: The content of the group in Mongolian
          "$ref": "#/components/schemas/group_content"
        nb:
          description: The content of the group in Norwegian
          "$ref": "#/components/schemas/group_content"
        nl:
          description: The content of the group in Dutch
          "$ref": "#/components/schemas/group_content"
        pl:
          description: The content of the group in Polish
          "$ref": "#/components/schemas/group_content"
        pt:
          description: The content of the group in Portuguese (Portugal)
          "$ref": "#/components/schemas/group_content"
        ro:
          description: The content of the group in Romanian
          "$ref": "#/components/schemas/group_content"
        ru:
          description: The content of the group in Russian
          "$ref": "#/components/schemas/group_content"
        sl:
          description: The content of the group in Slovenian
          "$ref": "#/components/schemas/group_content"
        sr:
          description: The content of the group in Serbian
          "$ref": "#/components/schemas/group_content"
        sv:
          description: The content of the group in Swedish
          "$ref": "#/components/schemas/group_content"
        tr:
          description: The content of the group in Turkish
          "$ref": "#/components/schemas/group_content"
        vi:
          description: The content of the group in Vietnamese
          "$ref": "#/components/schemas/group_content"
        pt-BR:
          description: The content of the group in Portuguese (Brazil)
          "$ref": "#/components/schemas/group_content"
        zh-CN:
          description: The content of the group in Chinese (China)
          "$ref": "#/components/schemas/group_content"
        zh-TW:
          description: The content of the group in Chinese (Taiwan)
          "$ref": "#/components/schemas/group_content"
    note_list:
      title: Paginated Response
      type: object
      description: A paginated list of notes associated with a contact.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `list`.
          example: list
        data:
          type: array
          description: An array of notes.
          items:
            "$ref": "#/components/schemas/note"
        total_count:
          type: integer
          description: A count of the total number of notes.
          example: 1
        pages:
          "$ref": "#/components/schemas/cursor_pages"
    group_content:
      title: Group Content
      type: object
      description: The Content of a Group.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `group_content` .
          enum:
          - 
          - group_content
          example: group_content
        name:
          type: string
          description: The name of the collection or section.
          example: Collection name
        description:
          type: string
          description: The description of the collection. Only available for collections.
          example: " Collection description"
    data_export_csv:
      title: Data Export CSV
      type: object
      description: A CSV output file
      properties:
        user_id:
          type: string
          description: The user_id of the user who was sent the message.
        user_external_id:
          type: string
          description: The external_user_id of the user who was sent the message
        company_id:
          type: string
          description: The company ID of the user in relation to the message that
            was sent. Will return -1 if no company is present.
        email:
          type: string
          description: The users email who was sent the message.
        name:
          type: string
          description: The full name of the user receiving the message
        ruleset_id:
          type: string
          description: The id of the message.
        content_id:
          type: string
          description: The specific content that was received. In an A/B test each
            version has its own Content ID.
        content_type:
          type: string
          description: Email, Chat, Post etc.
        content_title:
          type: string
          description: The title of the content you see in your Intercom workspace.
        ruleset_version_id:
          type: string
          description: As you edit content we record new versions. This ID can help
            you determine which version of a piece of content that was received.
        receipt_id:
          type: string
          description: ID for this receipt. Will be included with any related stats
            in other files to identify this specific delivery of a message.
        received_at:
          type: integer
          description: Timestamp for when the receipt was recorded.
        series_id:
          type: string
          description: The id of the series that this content is part of. Will return
            -1 if not part of a series.
        series_title:
          type: string
          description: The title of the series that this content is part of.
        node_id:
          type: string
          description: The id of the series node that this ruleset is associated with.
            Each block in a series has a corresponding node_id.
        first_reply:
          type: integer
          description: The first time a user replied to this message if the content
            was able to receive replies.
        first_completion:
          type: integer
          description: The first time a user completed this message if the content
            was able to be completed e.g. Tours, Surveys.
        first_series_completion:
          type: integer
          description: The first time the series this message was a part of was completed
            by the user.
        first_series_disengagement:
          type: integer
          description: The first time the series this message was a part of was disengaged
            by the user.
        first_series_exit:
          type: integer
          description: The first time the series this message was a part of was exited
            by the user.
        first_goal_success:
          type: integer
          description: The first time the user met this messages associated goal if
            one exists.
        first_open:
          type: integer
          description: The first time the user opened this message.
        first_click:
          type: integer
          description: The first time the series the user clicked on a link within
            this message.
        first_dismisall:
          type: integer
          description: The first time the series the user dismissed this message.
        first_unsubscribe:
          type: integer
          description: The first time the user unsubscribed from this message.
        first_hard_bounce:
          type: integer
          description: The first time this message hard bounced for this user
    phone_switch:
      title: Phone Switch
      type: object
      description: Phone Switch Response
      nullable: true
      properties:
        type:
          type: string
          description: ''
          enum:
          - phone_call_redirect
          default: phone_call_redirect
          example: phone_call_redirect
        phone:
          type: string
          description: Phone number in E.164 format, that has received the SMS to
            continue the conversation in the Messenger.
          example: "+1 1234567890"
    deleted_object:
      title: Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the news item which you provided
            in the URL.
          example: '6890762'
        object:
          type: string
          description: The type of object which was deleted - news-item.
          enum:
          - news-item
          example: news-item
        deleted:
          type: boolean
          description: Whether the news item was deleted successfully or not.
          example: true
    paginated_response:
      title: Paginated Response
      type: object
      description: Paginated Response
      properties:
        type:
          type: string
          description: The type of object
          enum:
          - list
          - conversation.list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of objects.
          example: 1
        data:
          type: array
          description: An array of Objects
          items:
            anyOf:
            - "$ref": "#/components/schemas/news_item"
            - "$ref": "#/components/schemas/newsfeed"
    segment_list:
      title: Segment List
      type: object
      description: This will return a list of Segment Objects. The result may also
        have a pages object if the response is paginated.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - segment.list
          example: segment.list
        segments:
          type: array
          description: A list of Segment objects
          items:
            "$ref": "#/components/schemas/segment"
        pages:
          type: object
          description: A pagination object, which may be empty, indicating no further
            pages to fetch.
    pages_link:
      title: Pagination Object
      type: object
      description: |
        The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.

        Their responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.
      properties:
        type:
          type: string
          example: pages
          enum:
          - pages
        page:
          type: integer
          example: 1
        next:
          type: string
          format: uri
          description: A link to the next page of results. A response that does not
            contain a next link does not have further data to fetch.
          nullable: true
        per_page:
          type: integer
          example: 50
        total_pages:
          type: integer
          example: 1
    social_profile:
      title: Social Profile
      type: object
      description: A Social Profile allows you to label your contacts, companies,
        and conversations and list them using that Social Profile.
      properties:
        type:
          type: string
          description: value is "social_profile"
          example: social_profile
        name:
          type: string
          description: The name of the Social media profile
          example: Facebook
        url:
          type: string
          format: uri
          description: The name of the Social media profile
          example: http://twitter.com/th1sland
    sla_applied:
      title: Applied SLA
      type: object
      nullable: true
      description: |
        The SLA Applied object contains the details for which SLA has been applied to this conversation.
        Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null.
      properties:
        type:
          type: string
          description: object type
          example: conversation_sla_summary
        sla_name:
          type: string
          description: The name of the SLA as given by the teammate when it was created.
          example: ''
        sla_status:
          type: string
          enum:
          - hit
          - missed
          - cancelled
          - active
          description: |-
            SLA statuses:
                        - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.
                        - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.
                        - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.
          example: hit
    section_list:
      title: Sections
      type: object
      description: This will return a list of Sections for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of sections.
          example: 12
        data:
          type: array
          description: An array of section objects
          items:
            "$ref": "#/components/schemas/section"
    starting_after_paging:
      title: StartingAfterPaging
      type: object
      nullable: true
      properties:
        page:
          type: integer
          example: 2
        starting_after:
          type: string
          example: 1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\nIncfQLD3ouPkZlCwJ86F\n
    subscription_type_list:
      title: Subscription Types
      type: object
      description: A list of subscription type objects.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of subscription type objects associated with the workspace
            .
          items:
            "$ref": "#/components/schemas/subscription_type"
    team_list:
      title: Team List
      type: object
      description: This will return a list of team objects for the App.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - team.list
          example: team.list
        teams:
          type: array
          description: A list of team objects
          items:
            "$ref": "#/components/schemas/team"
    team_priority_level:
      title: Team Priority Level
      type: object
      nullable: true
      description: Admin priority levels for teams
      properties:
        primary_team_ids:
          type: array
          description: The primary team ids for the team
          nullable: true
          example:
          - 814865
          items:
            type: integer
        secondary_team_ids:
          type: array
          description: The secondary team ids for the team
          nullable: true
          example:
          - 493881
          items:
            type: integer
    ticket_contacts:
      title: Contacts
      type: object
      description: The list of contacts (users or leads) affected by a ticket.
      properties:
        type:
          type: string
          description: always contact.list
          enum:
          - contact.list
          example: contact.list
        contacts:
          type: array
          description: The list of contacts (users or leads) affected by this ticket.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of contact (user or lead)
                enum:
                - lead
                - user
                example: user
              id:
                type: string
                description: The unique identifier for the contact which is given
                  by Intercom.
                example: 5ba682d23d7cf92bef87bfd4
    subscription_type:
      title: Subscription Types
      type: object
      description: A subscription type lets customers easily opt out of non-essential
        communications without missing what's important to them.
      properties:
        type:
          type: string
          description: The type of the object - subscription
          example: subscription
        id:
          type: string
          description: The unique identifier representing the subscription type.
          example: '123456'
        state:
          type: string
          description: The state of the subscription type.
          enum:
          - live
          - draft
          - archived
          example: live
        default_translation:
          "$ref": "#/components/schemas/translation"
        translations:
          type: array
          description: An array of translations objects with the localised version
            of the subscription type in each available locale within your translation
            settings.
          items:
            "$ref": "#/components/schemas/translation"
        consent_type:
          type: string
          description: Describes the type of consent.
          enum:
          - opt_out
          - opt_in
          example: opt_in
        content_types:
          type: array
          description: The message types that this subscription supports - can contain
            `email` or `sms_message`.
          items:
            type: string
            enum:
            - email
            - sms_message
            example: email
    ticket_type_attributes:
      title: Ticket Type Attributes
      type: object
      description: Ticket type attributes, used to define each data field to be captured
        in a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attribute`.
          example: ticket_type_attribute
        id:
          type: string
          description: The id representing the ticket type attribute.
          example: '1'
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type attribute belongs
            to.
          example: ecahpwf5
        name:
          type: string
          description: The name of the ticket type attribute
          example: Title
        description:
          type: string
          description: The description of the ticket type attribute
          example: Bug title.
        data_type:
          type: string
          description: The type of the data attribute
          example: string
        input_options:
          type: list
          description: List of input options for the attribute
          example: 'multiline: true'
        order:
          type: integer
          description: The order of the attribute against other attributes
          example: 1
        required:
          type: boolean
          description: Whether the attribute is required or not.
          example: false
        default:
          type: boolean
          description: Whether the attribute is built in or not.
          example: true
        ticket_type_id:
          type: integer
          description: The id of the ticket type that the attribute belongs to.
          example: 42
        archived:
          type: boolean
          description: Whether the ticket type attribute is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type attribute was last updated.
    ticket_type_attributes_list:
      title: TicketTypeAttributes
      type: object
      description: A list of attributes associated with a given ticket type.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type_attributes.list`.
        ticket_type_attributes:
          type: array
          description: A list of ticket_type_attributes associated with a given ticket.
          items:
            "$ref": "#/components/schemas/ticket_type_attributes"
    ticket_custom_attributes:
      title: Custom Attributes
      type: object
      description: An object containing the different custom attributes associated
        to the ticket as key-value pairs. For the default title and description attributes,
        the keys are `_default_title_` and `_default_description_`.
      additionalProperties:
        anyOf:
        - type: string
          nullable: true
        - type: number
        - type: boolean
        - type: array
        - "$ref": "#/components/schemas/file_attribute"
      example:
        name: example
        question: Can I have some help?
    visitor_deleted_object:
      title: Visitor Deleted Object
      type: object
      description: Response returned when an object is deleted
      properties:
        id:
          type: string
          description: The unique identifier for the visitor which is given by Intercom.
          example: 530370b477ad7120001d
        type:
          type: string
          description: The type of object which was deleted
          enum:
          - visitor
          example: visitor
        user_id:
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
    ticket_type_list:
      title: TicketTypes
      type: object
      description: A list of ticket types associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type.list`.
        ticket_types:
          type: array
          description: A list of ticket_types associated with a given workspace.
          items:
            "$ref": "#/components/schemas/ticket_type"
    note:
      title: Note
      type: object
      description: Notes allow you to annotate and comment on your contacts.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `note`.
          example: note
        id:
          type: string
          description: The id of the note.
          example: '17495962'
        created_at:
          type: integer
          format: timestamp
          description: The time the note was created.
          example: 1674589321
        contact:
          type: object
          description: Represents the contact that the note was created about.
          nullable: true
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `contact`.
            id:
              type: string
              description: The id of the contact.
              example: 214656d0c743eafcfde7f248
        author:
          "$ref": "#/components/schemas/admin"
          description: Optional. Represents the Admin that created the note.
        body:
          type: string
          description: The body text of the note.
          example: "<p>Text for the note.</p>"
    app:
      title: App
      type: object
      description: App is a workspace on Intercom
      nullable: true
      properties:
        type:
          type: string
          description: ''
          default: app
          example: app
        id_code:
          type: string
          description: The id of the app.
          example: xyz789
        name:
          type: string
          description: The name of the app.
          example: ACME
        region:
          type: string
          description: The Intercom region the app is located in.
          example: US
        timezone:
          type: string
          description: The timezone of the region where the app is located.
          example: America/Los_Angeles
        created_at:
          type: integer
          description: When the app was created.
          example: 1671465577
        identity_verification:
          type: boolean
          description: Whether or not the app uses identity verification.
          example: false
    segment:
      title: Segment
      type: object
      description: A segment is a group of your contacts defined by the rules that
        you set.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
          - segment
          example: segment
        id:
          type: string
          description: The unique identifier representing the segment.
          example: 56203d253cba154d39010062
        name:
          type: string
          description: The name of the segment.
          example: Active
        created_at:
          type: integer
          description: The time the segment was created.
          example: 1394621988
        updated_at:
          type: integer
          description: The time the segment was updated.
          example: 1394622004
        person_type:
          type: string
          description: 'Type of the contact: contact (lead) or user.'
          enum:
          - contact
          - user
          example: contact
        count:
          type: integer
          description: The number of items in the user segment. It's returned when
            `include_count=true` is included in the request.
          example: 3
          nullable: true
    section:
      title: Section
      type: object
      description: Sections are subdivisions of a collection, with a collection potentially
        having multiple sections.
      properties:
        type:
          type: string
          description: The type of object - `section`.
          enum:
          - section
          default: section
          example: section
        id:
          type: string
          description: The unique identifier for the section which is given by Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the section belongs to.
          example: hfi1bx4l
        name:
          type: string
          description: The name of the section. For multilingual sections, this will
            be the name of the default language's content.
          example: Default language name
        created_at:
          type: integer
          format: date-time
          description: The time when the section was created. For multilingual sections,
            this will be the timestamp of creation of the default language's content.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the section was last updated. For multilingual
            sections, this will be the timestamp of last update of the default language's
            content.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the section. For multilingual help centers, this
            will be the URL of the section for the default language.
          example: http://intercom.test/help/section/name
        icon:
          type: string
          nullable: true
          description: The icon of the section.
          example: book-bookmark
        order:
          type: integer
          description: The order of the section in relation to others sections within
            a collection. Values go from `0`` upwards. `0`` is the default if there's
            no order.
          example: '1'
        parent_id:
          oneOf:
          - type: integer
            title: Integer
          - type: string
            title: String
          description: The id of the parent section.
          example: 6871119
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
    visitor:
      title: Visitor
      type: object
      description: Visitors are useful for representing anonymous people that have
        not yet been identified. They usually represent website visitors. Visitors
        are not visible in Intercom platform. The Visitors resource provides methods
        to fetch, update, convert and delete.
      nullable: true
      properties:
        type:
          type: string
          description: Value is 'visitor'
          default: visitor
          example: visitor
        id:
          type: string
          description: The Intercom defined id representing the Visitor.
          example: 530370b477ad7120001d
        user_id:
          type: string
          description: Automatically generated identifier for the Visitor.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        anonymous:
          type: boolean
          description: Identifies if this visitor is anonymous.
          example: false
        email:
          type: string
          format: email
          description: The email of the visitor.
          example: jane.doe@example.com
        phone:
          type: string
          nullable: true
          description: The phone number of the visitor.
          example: 555-555-5555
        name:
          type: string
          nullable: true
          description: The name of the visitor.
          example: Jane Doe
        pseudonym:
          type: string
          nullable: true
          description: The pseudonym of the visitor.
          example: Red Duck from Dublin
        avatar:
          type: object
          properties:
            type:
              type: string
              description: ''
              default: avatar
              example: avatar
            image_url:
              type: string
              format: uri
              nullable: true
              description: This object represents the avatar associated with the visitor.
              example: https://example.com/avatar.png
        app_id:
          type: string
          description: The id of the app the visitor is associated with.
          example: hfi1bx4l
        companies:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - company.list
              example: company.list
            companies:
              type: array
              items:
                "$ref": "#/components/schemas/company"
        location_data:
          type: object
          properties:
            type:
              type: string
              description: ''
              default: location_data
              example: location_data
            city_name:
              type: string
              description: The city name of the visitor.
              example: Dublin
            continent_code:
              type: string
              description: The continent code of the visitor.
              example: EU
            country_code:
              type: string
              description: The country code of the visitor.
              example: IRL
            country_name:
              type: string
              description: The country name of the visitor.
              example: Ireland
            postal_code:
              type: string
              description: The postal code of the visitor.
              example: D02 N960
            region_name:
              type: string
              description: The region name of the visitor.
              example: Leinster
            timezone:
              type: string
              description: The timezone of the visitor.
              example: Europe/Dublin
        las_request_at:
          type: integer
          description: The time the Lead last recorded making a request.
          example: 1663597260
        created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        remote_created_at:
          type: integer
          description: The time the Visitor was added to Intercom.
          example: 1663597223
        signed_up_at:
          type: integer
          description: The time the Visitor signed up for your product.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the Visitor was updated.
          example: 1663597260
        session_count:
          type: integer
          description: The number of sessions the Visitor has had.
          example: 1
        social_profiles:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - social_profile.list
              example: social_profile.list
            social_profiles:
              type: array
              items:
                type: string
        owner_id:
          type: string
          nullable: true
          description: The id of the admin that owns the Visitor.
          example: '5169261'
        unsubscribed_from_emails:
          type: boolean
          description: Whether the Visitor is unsubscribed from emails.
          example: false
        marked_email_as_spam:
          type: boolean
          description: Identifies if this visitor has marked an email as spam.
          example: false
        has_hard_bounced:
          type: boolean
          description: Identifies if this visitor has had a hard bounce.
          example: false
        tags:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - tag.list
              example: tag.list
            tags:
              type: array
              items:
                properties:
                  type:
                    type: string
                    description: The type of the object
                    enum:
                    - tag
                    example: tag
                  id:
                    type: string
                    description: The id of the tag.
                    example: '8482'
                  name:
                    type: string
                    description: The name of the tag.
                    example: tag_name
        segments:
          type: object
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - segment.list
              example: segment.list
            segments:
              type: array
              items:
                type: string
        custom_attributes:
          type: object
          description: The custom attributes you have set on the Visitor.
          additionalProperties:
            type: string
        referrer:
          type: string
          nullable: true
          description: The referer of the visitor.
          example: https://www.google.com/
        utm_campaign:
          type: string
          nullable: true
          description: The utm_campaign of the visitor.
          example: intercom-link
        utm_content:
          type: string
          nullable: true
          description: The utm_content of the visitor.
          example: banner
        utm_medium:
          type: string
          nullable: true
          description: The utm_medium of the visitor.
          example: email
        utm_source:
          type: string
          nullable: true
          description: The utm_source of the visitor.
          example: Intercom
        utm_term:
          type: string
          nullable: true
          description: The utm_term of the visitor.
          example: messenger
        do_not_track:
          type: boolean
          nullable: true
          description: Identifies if this visitor has do not track enabled.
          example: false
    conversation_part:
      title: Conversation Part
      type: object
      description: A Conversation Part represents a message in the conversation.
      properties:
        type:
          type: string
          description: Always conversation_part
          example: conversation_part
        id:
          type: string
          description: The id representing the conversation part.
          example: '3'
        part_type:
          type: string
          description: The type of conversation part.
          example: comment
        body:
          type: string
          nullable: true
          description: The message body, which may contain HTML. For Twitter, this
            will show a generic message regarding why the body is obscured.
          example: "<p>Okay!</p>"
        created_at:
          type: integer
          format: date-time
          description: The time the conversation part was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation part was updated.
          example: 1663597260
        notified_at:
          type: integer
          format: date-time
          description: The time the user was notified with the conversation part.
          example: 1663597260
        assigned_to:
          "$ref": "#/components/schemas/reference"
          nullable: true
          description: The id of the admin that was assigned the conversation by this
            conversation_part (null if there has been no change in assignment.)
        author:
          "$ref": "#/components/schemas/conversation_part_author"
        attachments:
          title: Conversation part attachments
          type: array
          description: A list of attachments for the part.
          items:
            "$ref": "#/components/schemas/conversation_part_attachment"
        external_id:
          type: string
          nullable: true
          description: The external id of the conversation part
          example: abcd1234
        redacted:
          type: boolean
          description: Whether or not the conversation part has been redacted.
          example: false
    ticket_type:
      title: Ticket Type
      type: object
      description: A ticket type, used to define the data fields to be captured in
        a ticket.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `ticket_type`.
          example: ticket_type
        id:
          type: string
          description: The id representing the ticket type.
          example: '1295'
        name:
          type: string
          description: The name of the ticket type
          example: Bug
        description:
          type: string
          description: The description of the ticket type
          example: A bug that has been reported.
        icon:
          type: string
          description: The icon of the ticket type
          example: "\U0001F41E"
        workspace_id:
          type: string
          description: The id of the workspace that the ticket type belongs to.
          example: ecahpwf5
        archived:
          type: boolean
          description: Whether the ticket type is archived or not.
          example: false
        created_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was created.
        updated_at:
          type: integer
          format: timestamp
          description: The date and time the ticket type was last updated.
    news_item:
      title: News Item
      type: object
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      properties:
        type:
          type: string
          description: The type of object.
          enum:
          - news-item
          example: news-item
        id:
          type: string
          description: The unique identifier for the news item which is given by Intercom.
          example: '141'
        workspace_id:
          type: string
          description: The id of the workspace which the news item belongs to.
          example: t74hdn32
        title:
          type: string
          description: The title of the news item.
          example: 'New feature: News Items'
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: We are excited to announce the launch of News Items, a new content
            type in Intercom enabling you to announce product updates, company news,
            promotions, events and more with your customers.
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
          - draft
          - live
          example: live
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            "$ref": "#/components/schemas/newsfeed_assignment"
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
            nullable: true
            description: The label name.
            example: Product Update
        cover_image_url:
          type: string
          format: uri
          nullable: true
          description: URL of the image used as cover. Must have .jpg or .png extension.
          example: https://example.com/cover.jpg
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
            description: The emoji reaction to the news item.
            example: "\U0001F44D"
        deliver_silently:
          type: boolean
          description: When set to true, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was created.
          example: 1610589632
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the news item was last updated.
          example: 1610589632
    company:
      title: Company
      type: object
      description: Companies allow you to represent organizations using your product.
        Each company will have its own description and be associated with contacts.
        You can fetch, create, update and list companies.
      properties:
        type:
          type: string
          description: Value is `company`
          enum:
          - company
          example: company
        id:
          type: string
          description: The Intercom defined id representing the company.
          example: 531ee472cce572a6ec000006
        name:
          type: string
          description: The name of the company.
          example: Blue Sun
        app_id:
          type: string
          description: The Intercom defined code of the workspace the company is associated
            to.
          example: ecahpwf5
        plan:
          type: object
          properties:
            type:
              type: string
              description: Value is always "plan"
              example: plan
            id:
              type: string
              description: The id of the plan
              example: '269315'
            name:
              type: string
              description: The name of the plan
              example: Pro
        company_id:
          type: string
          description: The company id you have defined for the company.
          example: '6'
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1663597223
        created_at:
          type: integer
          description: The time the company was added in Intercom.
          example: 1663597223
        updated_at:
          type: integer
          description: The last time the company was updated.
          example: 1663597223
        last_request_at:
          type: integer
          description: The time the company last recorded making a request.
          example: 1663597223
        size:
          type: integer
          description: The number of employees in the company.
          example: 100
        website:
          type: string
          description: The URL for the company website.
          example: https://www.intercom.com
        industry:
          type: string
          description: The industry that the company operates in.
          example: Software
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business.
          example: 100
        session_count:
          type: integer
          description: How many sessions the company has recorded.
          example: 100
        user_count:
          type: integer
          description: The number of users in the company.
          example: 100
        custom_attributes:
          type: object
          description: The custom attributes you have set on the company.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        tags:
          type: object
          description: The list of tags associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - tag.list
            tags:
              type: array
              items:
                items:
                  "$ref": "#/components/schemas/tag"
        segments:
          type: object
          description: The list of segments associated with the company
          properties:
            type:
              type: string
              description: The type of the object
              enum:
              - segment.list
            segments:
              type: array
              items:
                "$ref": "#/components/schemas/segment"
    newsfeed_assignment:
      title: Newsfeed Assignment
      type: object
      description: Assigns a news item to a newsfeed.
      properties:
        newsfeed_id:
          type: integer
          description: The unique identifier for the newsfeed which is given by Intercom.
            Publish dates cannot be in the future, to schedule news items use the
            dedicated feature in app (see this article).
          example: 198313
        published_at:
          type: integer
          format: timestamp
          description: Publish date of the news item on the newsfeed, use this field
            if you want to set a publish date in the past (e.g. when importing existing
            news items). On write, this field will be ignored if the news item state
            is "draft".
          example: 1674917488
    message:
      type: object
      title: Message
      description: Message are how you reach out to contacts in Intercom. They are
        created when an admin sends an outbound message to a contact.
      properties:
        type:
          type: string
          description: The type of the message
          example: user_message
        id:
          type: string
          description: The id representing the message.
          example: '1488971108'
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1667560812
        subject:
          type: string
          description: 'The subject of the message. Only present if message_type:
            email.'
          example: Greetings
        body:
          type: string
          description: The message body, which may contain HTML.
          example: Hello
        message_type:
          type: string
          enum:
          - email
          - inapp
          - facebook
          - twitter
          description: The type of message that was sent. Can be email, inapp, facebook
            or twitter.
          example: inapp
        conversation_id:
          type: string
          description: The associated conversation_id
          example: '64619700005570'
      required:
      - type
      - id
      - created_at
      - body
      - message_type
    newsfeed:
      title: Newsfeed
      type: object
      description: |
        A newsfeed is a collection of news items, targeted to a specific audience.

        Newsfeeds currently cannot be edited through the API, please refer to [this article](https://www.intercom.com/help/en/articles/6362267-getting-started-with-news) to set up your newsfeeds in Intercom.
      properties:
        id:
          type: string
          description: The unique identifier for the newsfeed which is given by Intercom.
          example: '12312'
        type:
          type: string
          description: The type of object.
          enum:
          - newsfeed
          example: newsfeed
        name:
          type: string
          description: The name of the newsfeed. This name will never be visible to
            your users.
          example: My Newsfeed
        created_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was created.
          example: 1674917488
        updated_at:
          type: integer
          format: timestamp
          description: Timestamp for when the newsfeed was last updated.
          example: 1674917488
    tags:
      title: Tags
      type: object
      description: A list of tags objects associated with a conversation
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - tag.list
          example: tag.list
        tags:
          type: array
          description: A list of tags objects associated with the conversation.
          items:
            "$ref": "#/components/schemas/tag"
    conversation:
      title: Conversation
      type: object
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      properties:
        type:
          type: string
          description: Always conversation.
          example: conversation
        id:
          type: string
          description: The id representing the conversation.
          example: '1295'
        title:
          type: string
          nullable: true
          description: The title given to the conversation.
          example: Conversation Title
        created_at:
          type: integer
          format: date-time
          description: The time the conversation was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The last time the conversation was updated.
          example: 1663597260
        waiting_since:
          type: integer
          format: date-time
          nullable: true
          description: The last time a Contact responded to an Admin. In other words,
            the time a customer started waiting for a response. Set to null if last
            reply is from an Admin.
          example: 1663597260
        snoozed_until:
          type: integer
          format: date-time
          nullable: true
          description: If set this is the time in the future when this conversation
            will be marked as open. i.e. it will be in a snoozed state until this
            time. i.e. it will be in a snoozed state until this time.
          example: 1663597260
        open:
          type: boolean
          description: Indicates whether a conversation is open (true) or closed (false).
          example: true
        state:
          type: string
          enum:
          - open
          - closed
          - snoozed
          description: Can be set to "open", "closed" or "snoozed".
          example: open
        read:
          type: boolean
          description: Indicates whether a conversation has been read.
          example: true
        priority:
          type: string
          enum:
          - priority
          - not_priority
          description: If marked as priority, it will return priority or else not_priority.
          example: priority
        admin_assignee_id:
          type: integer
          nullable: true
          description: The id of the admin assigned to the conversation. If it's not
            assigned to an admin it will return null.
          example: 0
        team_assignee_id:
          type: string
          nullable: true
          description: The id of the team assigned to the conversation. If it's not
            assigned to a team it will return null.
          example: '5017691'
        tags:
          "$ref": "#/components/schemas/tags"
        conversation_rating:
          "$ref": "#/components/schemas/conversation_rating"
        source:
          "$ref": "#/components/schemas/conversation_source"
        contacts:
          "$ref": "#/components/schemas/conversation_contacts"
        teammates:
          "$ref": "#/components/schemas/conversation_teammates"
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
        first_contact_reply:
          "$ref": "#/components/schemas/conversation_first_contact_reply"
        sla_applied:
          "$ref": "#/components/schemas/sla_applied"
        statistics:
          "$ref": "#/components/schemas/conversation_statistics"
        conversation_parts:
          "$ref": "#/components/schemas/conversation_parts"
    team:
      title: Team
      type: object
      description: Teams are groups of admins in Intercom.
      properties:
        type:
          type: string
          description: Value is always "team"
          example: team
        id:
          type: string
          description: The id of the team
          example: '814865'
        name:
          type: string
          description: The name of the team
          example: Example Team
        admin_ids:
          type: array
          description: The list of admin IDs that are a part of the team.
          example:
          - 493881
          items:
            type: integer
        admin_priority_level:
          "$ref": "#/components/schemas/admin_priority_level"
    article_content:
      title: Article Content
      type: object
      description: The Content of an Article.
      nullable: true
      properties:
        type:
          type: string
          description: The type of object - `article_content` .
          enum:
          - 
          - article_content
          example: article_content
        title:
          type: string
          description: The title of the article.
          example: How to create a new article
        description:
          type: string
          description: The description of the article.
          example: This article will show you how to create a new article.
        body:
          type: string
          description: The body of the article.
          example: This is the body of the article.
        author_id:
          type: integer
          description: The ID of the author of the article.
          example: '5017691'
        state:
          type: string
          description: Whether the article is `published` or is a `draft` .
          enum:
          - published
          - draft
          example: draft
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created.
          example: 1663597223
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated.
          example: 1663597260
        url:
          type: string
          description: The URL of the article.
          example: http://intercom.test/help/en/articles/3-default-language
    collection:
      title: Collection
      type: object
      description: Collections are top level containers for Articles within the Help
        Center.
      properties:
        id:
          type: string
          description: The unique identifier for the collection which is given by
            Intercom.
          example: '6871119'
        workspace_id:
          type: string
          description: The id of the workspace which the collection belongs to.
          example: hfi1bx4l
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: Default language name
        description:
          type: string
          nullable: true
          description: The description of the collection. For multilingual help centers,
            this will be the description of the collection for the default language.
          example: Default language description
        created_at:
          type: integer
          format: date-time
          description: The time when the article was created. For multilingual articles,
            this will be the timestamp of creation of the default language's content.
          example: 1672928359
        updated_at:
          type: integer
          format: date-time
          description: The time when the article was last updated. For multilingual
            articles, this will be the timestamp of last update of the default language's
            content.
          example: 1672928610
        url:
          type: string
          nullable: true
          description: The URL of the collection. For multilingual help centers, this
            will be the URL of the collection for the default language.
          example: http://intercom.test/help/collection/name
        icon:
          type: string
          nullable: true
          description: The icon of the collection.
          example: book-bookmark
        order:
          type: integer
          description: The order of the section in relation to others sections within
            a collection. Values go from `0`` upwards. `0`` is the default if there's
            no order.
          example: '1'
        default_locale:
          type: string
          description: The default locale of the help center. This field is only returned
            for multilingual help centers.
          example: en
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
        type:
          type: string
          description: The type of object - `collection`.
          enum:
          - collection
          default: collection
          example: collection
    data_attribute:
      title: Data Attribute
      type: object
      description: Data Attributes are metadata used to describe your contact, company
        and conversation models. These include standard and custom attributes. By
        using the data attributes endpoint, you can get the global list of attributes
        for your workspace, as well as create and archive custom attributes.
      properties:
        type:
          type: string
          description: Value is `data_attribute`.
          enum:
          - data_attribute
          example: data_attribute
        id:
          type: integer
          description: The unique identifier for the data attribute which is given
            by Intercom. Only available for custom attributes.
          example: 12878
        model:
          type: string
          description: Value is `contact` for user/lead attributes, `company` for
            company attributes and `conversation` for conversation attributes..
          enum:
          - contact
          - company
          - conversation
          example: contact
        name:
          type: string
          description: Name of the attribute.
          example: paid_subscriber
        full_name:
          type: string
          description: Full name of the attribute. Should match the name unless it's
            a nested attribute. We can split full_name on `.` to access nested user
            object values.
          example: custom_attributes.paid_subscriber
        label:
          type: string
          description: Readable name of the attribute (i.e. name you see in the UI)
          example: Paid Subscriber
        description:
          type: string
          description: Readable description of the attribute.
          example: Whether the user is a paid subscriber.
        data_type:
          type: string
          description: The data type of the attribute.
          enum:
          - string
          - integer
          - float
          - boolean
          - date
          example: boolean
        options:
          type: array
          description: List of predefined options for attribute value.
          items:
            type: string
          example:
          - 'true'
          - 'false'
        api_writable:
          type: boolean
          description: Can this attribute be updated through API
          example: true
        ui_writable:
          type: boolean
          description: Can this attribute be updated in the UI
          example: true
        custom:
          type: boolean
          description: Set to true if this is a CDA
          example: true
        archived:
          type: boolean
          description: Is this attribute archived. (Only applicable to CDAs)
          example: false
        created_at:
          type: integer
          format: date-time
          description: The time the attribute was created as a UTC Unix timestamp
          example: 1671028894
        updated_at:
          type: integer
          format: date-time
          description: The time the attribute was last updated as a UTC Unix timestamp
          example: 1671028894
        admin_id:
          type: string
          description: Teammate who created the attribute. Only applicable to CDAs
          example: '5712945'
    conversation_rating:
      title: Conversation Rating
      type: object
      nullable: true
      description: The Conversation Rating object which contains information on the
        rating and/or remark added by a Contact and the Admin assigned to the conversation.
      properties:
        rating:
          type: integer
          description: The rating, between 1 and 5, for the conversation.
          example: 5
        remark:
          type: string
          description: An optional field to add a remark to correspond to the number
            rating
          example: ''
        created_at:
          type: integer
          format: date-time
          description: The time the rating was requested in the conversation being
            rated.
          example: 1671028894
        contact:
          "$ref": "#/components/schemas/reference"
        teammate:
          "$ref": "#/components/schemas/reference"
    translation:
      title: Translation
      type: object
      description: A translation object contains the localised details of a subscription
        type.
      properties:
        name:
          type: string
          description: The localised name of the subscription type.
          example: Announcements
        description:
          type: string
          description: The localised description of the subscription type.
          example: Offers, product and feature announcements
        locale:
          type: string
          description: The two character identifier for the language of the translation
            object.
          example: en
    collection_list:
      title: Collections
      type: object
      description: This will return a list of Collections for the App.
      properties:
        type:
          type: string
          description: The type of the object - `list`.
          enum:
          - list
          example: list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        total_count:
          type: integer
          description: A count of the total number of collections.
          example: 1
        data:
          type: array
          description: An array of collection objects
          items:
            "$ref": "#/components/schemas/collection"
    tag_list:
      title: Tags
      type: object
      description: A list of tags objects in the workspace.
      properties:
        type:
          type: string
          description: The type of the object
          enum:
          - list
          example: list
        data:
          type: array
          description: A list of tags objects associated with the workspace .
          items:
            "$ref": "#/components/schemas/tag"
    custom_attributes:
      title: Custom Attributes
      type: object
      description: An object containing the different custom attributes associated
        to the conversation as key-value pairs. For relationship attributes the value
        will be a list of custom object instance models.
      additionalProperties:
        anyOf:
        - type: string
        - "$ref": "#/components/schemas/custom_object_instance"
    admin:
      title: Admin
      type: object
      description: Admins are teammate accounts that have access to a workspace.
      nullable: true
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin`.
          example: admin
        id:
          type: string
          description: The id representing the admin.
          example: '1295'
        name:
          type: string
          description: The name of the admin.
          example: Hoban Washburne
        email:
          type: string
          description: The email of the admin.
          example: wash@serenity.io
        job_title:
          type: string
          description: The job title of the admin.
          example: Philosopher
        away_mode_enabled:
          type: boolean
          description: Identifies if this admin is currently set in away mode.
          example: false
        away_mode_reassign:
          type: boolean
          description: Identifies if this admin is set to automatically reassign new
            conversations to the apps default inbox.
          example: false
        has_inbox_seat:
          type: boolean
          description: Identifies if this admin has a paid inbox seat to restrict/allow
            features that require them.
          example: true
        team_ids:
          type: array
          description: This object represents the avatar associated with the admin.
          example:
          - 814865
          items:
            type: integer
        avatar:
          type: string
          format: uri
          nullable: true
          description: Image for the associated team or teammate
          example: https://picsum.photos/200/300
        team_priority_level:
          "$ref": "#/components/schemas/team_priority_level"
    reference:
      title: Reference
      type: object
      description: reference to another object
      properties:
        type:
          type: string
          description: ''
          example: contact
        id:
          type: string
          nullable: true
          description: ''
          example: 1a2b3c
    error:
      type: object
      title: Error
      description: The API will return an Error List for a failed request, which will
        contain one or more Error objects.
      properties:
        type:
          type: string
          description: The type is error.list
          example: error.list
        request_id:
          type: string
          nullable: true
          format: uuid
          description: ''
          example: f93ecfa8-d08a-4325-8694-89aeb89c8f85
        errors:
          type: array
          description: An array of one or more error objects
          items:
            properties:
              code:
                type: string
                description: A string indicating the kind of error, used to further
                  qualify the HTTP response code
                example: unauthorized
              message:
                type: string
                nullable: true
                description: Optional. Human readable description of the error.
                example: Access Token Invalid
              field:
                type: string
                nullable: true
                description: Optional. Used to identify a particular field or query
                  parameter that was in error.
                example: email
            required:
            - code
      required:
      - type
      - errors
    tag:
      title: Tag
      type: object
      description: A tag allows you to label your contacts, companies, and conversations
        and list them using that tag.
      properties:
        type:
          type: string
          description: value is "tag"
          example: tag
        id:
          type: string
          description: The id of the tag
          example: '123456'
        name:
          type: string
          description: The name of the tag
          example: Test tag
        applied_at:
          type: integer
          format: date-time
          description: The time when the tag was applied to the object
          example: 1663597223
        applied_by:
          "$ref": "#/components/schemas/reference"
    conversation_parts:
      title: Conversation Parts
      type: object
      description: A list of Conversation Part objects for each part message in the
        conversation. This is only returned when Retrieving a Conversation, and ignored
        when Listing all Conversations. There is a limit of 500 parts.
      properties:
        type:
          type: string
          description: ''
          enum:
          - conversation_part.list
          example: conversation_part.list
        conversation_parts:
          title: Conversation Parts
          type: array
          description: A list of Conversation Part objects for each part message in
            the conversation. This is only returned when Retrieving a Conversation,
            and ignored when Listing all Conversations. There is a limit of 500 parts.
          items:
            "$ref": "#/components/schemas/conversation_part"
        total_count:
          type: integer
          description: ''
          example: 2
    activity_log:
      title: Activity Log
      type: object
      description: Activities performed by admins.
      nullable: true
      properties:
        id:
          type: string
          description: The id representing the activity.
          example: '6'
        performed_by:
          type: object
          description: An object representing the admin who performed the activity.
          properties:
            type:
              type: string
              description: String representing the object's type. Always has the value
                `admin`.
              example: admin
            id:
              type: string
              description: The id representing the admin.
              example: '1295'
            email:
              type: string
              description: The email of the admin.
              example: john@example.com
            ip:
              type: string
              description: The IP address of the admin.
              example: 198.51.100.255
        metadata:
          type: object
        created_at:
          type: integer
          format: date-time
          description: The time the activity was created.
          example: 1671028894
        activity_type:
          type: string
          enum:
          - admin_assignment_limit_change
          - admin_away_mode_change
          - admin_deletion
          - admin_deprovisioned
          - admin_impersonation_end
          - admin_impersonation_start
          - admin_invite_change
          - admin_invite_creation
          - admin_invite_deletion
          - admin_login_failure
          - admin_login_success
          - admin_logout
          - admin_password_reset_request
          - admin_password_reset_success
          - admin_permission_change
          - admin_provisioned
          - admin_two_factor_auth_change
          - admin_unauthorized_sign_in_method
          - app_admin_join
          - app_authentication_method_change
          - app_data_deletion
          - app_data_export
          - app_google_sso_domain_change
          - app_identity_verification_change
          - app_name_change
          - app_outbound_address_change
          - app_package_installation
          - app_package_token_regeneration
          - app_package_uninstallation
          - app_team_creation
          - app_team_deletion
          - app_team_membership_modification
          - app_timezone_change
          - app_webhook_creation
          - app_webhook_deletion
          - articles_in_messenger_enabled_change
          - bulk_delete
          - bulk_export
          - campaign_deletion
          - campaign_state_change
          - conversation_part_deletion
          - conversation_topic_change
          - conversation_topic_creation
          - conversation_topic_deletion
          - help_center_settings_change
          - inbound_conversations_change
          - inbox_access_change
          - message_deletion
          - message_state_change
          - messenger_look_and_feel_change
          - messenger_search_required_change
          - messenger_spaces_change
          - office_hours_change
          - role_change
          - role_creation
          - role_deletion
          - ruleset_activation_title_preview
          - ruleset_creation
          - ruleset_deletion
          - search_browse_enabled_change
          - search_browse_required_change
          - seat_change
          - seat_revoke
          - security_settings_change
          - temporary_expectation_change
          - upfront_email_collection_change
          - welcome_message_change
          example: app_name_change
        activity_description:
          type: string
          description: A sentence or two describing the activity.
          example: Admin updated the app's name to "My App".
    activity_log_list:
      title: Paginated Response
      type: object
      description: A paginated list of activity logs.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `activity_log.list`.
          example: activity_log.list
        pages:
          "$ref": "#/components/schemas/cursor_pages"
        activity_logs:
          type: array
          description: An array of activity logs
          items:
            "$ref": "#/components/schemas/activity_log"
    addressable_list:
      title: Addressable List
      type: object
      nullable: false
      description: A list used to access other resources from a parent model.
      properties:
        type:
          type: string
          format: uri
          description: The addressable object type
          example: note
        id:
          type: string
          description: The id of the addressable object
          example: '123'
        url:
          type: string
          format: uri
          description: Url to get more company resources for this contact
          example: "/contacts/5ba682d23d7cf92bef87bfd4/notes"
    admin_list:
      title: Admins
      type: object
      description: A list of admins associated with a given workspace.
      properties:
        type:
          type: string
          description: String representing the object's type. Always has the value
            `admin.list`.
          example: admin.list
        admins:
          type: array
          description: A list of admins associated with a given workspace.
          items:
            "$ref": "#/components/schemas/admin"
    admin_priority_level:
      title: Admin Priority Level
      type: object
      nullable: true
      description: Admin priority levels for the team
      properties:
        primary_admin_ids:
          type: array
          description: The primary admin ids for the team
          nullable: true
          example:
          - 493881
          items:
            type: integer
        secondary_admin_ids:
          type: array
          description: The secondary admin ids for the team
          nullable: true
          example:
          - 814865
          items:
            type: integer
    intercom_version:
      description: Intercom API version.</br>By default, it's equal to the version
        set in the app package.
      type: string
      example: Unstable
      default: '2.8'
      enum:
      - '1.0'
      - '1.1'
      - '1.2'
      - '1.3'
      - '1.4'
      - '2.0'
      - '2.1'
      - '2.2'
      - '2.3'
      - '2.4'
      - '2.5'
      - '2.6'
      - '2.7'
      - '2.8'
      - Unstable
    reply_conversation_request:
      oneOf:
      - "$ref": "#/components/schemas/contact_reply_conversation_request"
      - "$ref": "#/components/schemas/admin_reply_conversation_request"
    single_filter_search_request:
      type: object
      properties:
        field:
          type: string
          description: The Intercom defined id representing the company.
          example: custom_attributes.social_network
        operator:
          type: string
          enum:
          - "="
          - "!="
          - IN
          - NIN
          - "<"
          - ">"
          - "~"
          - "!~"
          - "^"
          - "$"
          description: The Intercom defined id representing the company.
          example: "="
        value:
          type: string
          description: The Intercom defined id representing the company.
          example: facebook
    snooze_conversation_request:
      title: Snooze Conversation Request
      type: object
      description: Payload of the request to snooze a conversation
      properties:
        message_type:
          type: string
          enum:
          - snoozed
          example: snoozed
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017691'
        snoozed_until:
          type: integer
          format: timestamp
          description: The time you want the conversation to reopen.
          example: 1673609604
      required:
      - message_type
      - admin_id
      - snoozed_until
    tag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Tag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
      - name
      - companies
    tag_multiple_users_request:
      description: You can tag a list of users.
      type: object
      title: Tag Users Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found.
          example: Independent
        users:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the user.
                example: 5f7f0d217289f8d2f4262080
      required:
      - name
      - users
    ticket_request_custom_attributes:
      title: Custom Attributes
      type: object
      description: The custom attributes set on the ticket. For the default title
        and description attributes, the keys are `_default_title_` and `_default_description_`.
      additionalProperties:
        anyOf:
        - type: string
          nullable: true
        - type: number
        - type: boolean
        - type: array
      example:
        name: example
        question: Can I have some help?
    untag_company_request:
      description: You can tag a single company or a list of companies.
      type: object
      title: Untag Company Request Payload
      properties:
        name:
          type: string
          description: The name of the tag which will be untagged from the company
          example: Independent
        companies:
          type: array
          items:
            properties:
              id:
                type: string
                description: The Intercom defined id representing the company.
                example: 531ee472cce572a6ec000006
              company_id:
                type: string
                description: The company id you have defined for the company.
                example: '6'
              untag:
                type: boolean
                description: Always set to true
                example: 'true'
          description: The id or company_id of the company can be passed as input
            parameters.
      required:
      - name
      - companies
    update_article_request:
      description: You can Update an Article
      type: object
      title: Update Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: "<p>This is the body in html</p>"
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
          - published
          - draft
          example: draft
        parent_id:
          type: string
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: '18'
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          "$ref": "#/components/schemas/article_translated_content"
    update_collection_request:
      description: You can update a collection
      type: object
      title: Update Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
    update_conversation_request:
      title: Update Conversation Request
      type: object
      description: Payload of the request to update a conversation
      properties:
        read:
          type: boolean
          description: Mark a conversation as read within Intercom.
          example: true
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
    update_data_attribute_request:
      description: ''
      type: object
      title: Update Data Attribute Request
      properties:
        archived:
          type: boolean
          description: Whether the attribute is to be archived or not.
          example: false
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
          - option1
          - option2
    update_section_request:
      description: You can update a Section
      type: object
      title: Update Section Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: Section 51
        parent_id:
          type: integer
          description: The id for the collection this section will be within.
          example: 18
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
    search_request:
      description: Search using Intercoms Search APIs.
      type: object
      title: Search data
      properties:
        query:
          oneOf:
          - "$ref": "#/components/schemas/single_filter_search_request"
            title: Single filter search request
          - "$ref": "#/components/schemas/multiple_filter_search_request"
            title: multiple filter search request
        pagination:
          "$ref": "#/components/schemas/starting_after_paging"
      required:
      - query
    update_ticket_request:
      description: You can update a Ticket
      type: object
      title: Update Ticket Request Payload
      properties:
        custom_attributes:
          type: object
          description: The custom attributes set on the ticket.
          example:
            title: example
            description: having a problem
        state:
          type: string
          enum:
          - in_progress
          - waiting_on_customer
          - resolved
          description: The state of the ticket.
          example: submitted
        assignment:
          type: object
          properties:
            admin_id:
              type: string
              description: The ID of the admin performing the action.
              example: '123'
            assignee_id:
              type: string
              description: The ID of the admin or team to which the ticket is assigned.
                Set this 0 to unassign it.
              example: '123'
    update_visitor_request:
      description: Update an existing visitor.
      type: object
      title: Update Visitor Request Payload
      properties:
        id:
          type: string
          description: A unique identified for the visitor which is given by Intercom.
          example: 8a88a590-e
        user_id:
          type: string
          description: A unique identified for the visitor which is given by you.
          example: '123'
        name:
          type: string
          description: The visitor's name.
          example: Christian Bale
        custom_attributes:
          type: object
          description: The custom attributes which are set for the visitor.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
      anyOf:
      - required:
        - id
      - required:
        - user_id
    admin_reply_conversation_request:
      title: Admin Reply
      type: object
      description: Payload of the request to reply on behalf of an admin
      properties:
        message_type:
          type: string
          enum:
          - comment
          - note
        type:
          type: string
          enum:
          - admin
          example: admin
        body:
          type: string
          description: The text body of the reply.\nNotes accept some HTML formatting.\nMust
            be present for comment and note message types.
          example: Hello there!
        admin_id:
          type: string
          description: The id of the admin who is authoring the comment.
          example: '3156780'
        attachment_urls:
          type: array
          description: A list of image URLs that will be added as attachments. You
            can include up to 5 URLs.
          items:
            type: string
            format: uri
          maxItems: 5
      required:
      - message_type
      - type
      - admin_id
    assign_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        message_type:
          type: string
          enum:
          - assignment
          example: assignment
        type:
          type: string
          enum:
          - admin
          - team
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        assignee_id:
          type: string
          description: The `id`` of the `admin` or `team` which will be assigned the
            conversation.\nA conversation can be assigned both an admin and a team.\nSet
            `0` if you want this assign to no admin or team (ie. Unassigned).
          example: '4324241'
        body:
          type: string
          description: Optionally you can leave a note in the conversation for additional
            context to other teammates.
          example: Please take a look at this conversation.
      required:
      - message_type
      - type
      - admin_id
      - assignee_id
    attach_contact_to_conversation_request:
      title: Assign Conversation Request
      type: object
      description: Payload of the request to assign a conversation
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is adding the new participant.
          example: '12345'
        customer:
          type: object
          oneOf:
          - title: Intercom User ID
            properties:
              intercom_user_id:
                type: string
                description: The identifier for the contact as given by Intercom.
                example: 6329bd9ffe4e2e91dac76188
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - intercom_user_id
          - title: User ID
            properties:
              user_id:
                type: string
                description: The external_id you have defined for the contact who
                  is being added as a participant.
                example: 6329bd9ffe4e2e91dac76188
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - user_id
          - title: Email
            properties:
              email:
                type: string
                description: The email you have defined for the contact who is being
                  added as a participant.
                example: winstonsmith@truth.org
              customer:
                "$ref": "#/components/schemas/customer_request"
            required:
            - email
    close_conversation_request:
      title: Close Conversation Request
      type: object
      description: Payload of the request to close a conversation
      properties:
        message_type:
          type: string
          enum:
          - close
          example: close
        type:
          type: string
          enum:
          - admin
          example: admin
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '12345'
        body:
          type: string
          description: Optionally you can leave a message in the conversation to provide
            additional context to the user and other teammates.
          example: " This conversation is now closed!"
      required:
      - message_type
      - type
      - admin_id
    contact_reply_conversation_request:
      title: Contact Reply
      oneOf:
      - title: Intercom User ID
        type: object
        description: Payload of the request to reply on behalf of a contact using
          their `intercom_user_id`
        properties:
          message_type:
            type: string
            enum:
            - comment
          type:
            type: string
            enum:
            - user
          body:
            type: string
            description: The text body of the comment.
          intercom_user_id:
            type: string
            description: The identifier for the contact as given by Intercom.
          attachment_urls:
            type: array
            description: A list of image URLs that will be added as attachments. You
              can include up to 5 URLs.
            items:
              type: string
              format: uri
            maxItems: 5
        required:
        - message_type
        - type
        - body
        - intercom_user_id
      - title: User ID
        type: object
        description: Payload of the request to reply on behalf of a contact using
          their `user_id`
        properties:
          message_type:
            type: string
            enum:
            - comment
          type:
            type: string
            enum:
            - user
          body:
            type: string
            description: The text body of the comment.
          user_id:
            type: string
            description: The external_id you have defined for the contact.
          attachment_urls:
            type: array
            description: A list of image URLs that will be added as attachments. You
              can include up to 5 URLs.
            items:
              type: string
              format: uri
            maxItems: 5
        required:
        - message_type
        - type
        - body
        - user_id
      - title: Email
        type: object
        description: Payload of the request to reply on behalf of a contact using
          their `email`
        properties:
          message_type:
            type: string
            enum:
            - comment
          type:
            type: string
            enum:
            - user
          body:
            type: string
            description: The text body of the comment.
          email:
            type: string
            description: The email you have defined for the user.
          attachment_urls:
            type: array
            description: A list of image URLs that will be added as attachments. You
              can include up to 5 URLs.
            items:
              type: string
              format: uri
            maxItems: 5
        required:
        - message_type
        - type
        - body
        - email
    convert_visitor_request:
      description: You can merge a Visitor to a Contact of role type lead or user.
      type: object
      title: Convert Visitor Request Payload
      properties:
        type:
          type: string
          description: Represents the role of the Contact model. Accepts `lead` or
            `user`.
          example: user
        user:
          type: object
          description: The unique identifiers retained after converting or merging.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom,
                which will be represented as external_id.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The contact's email, retained by default if one is present.
              example: winstonsmith@truth.org
          anyOf:
          - required:
            - id
          - required:
            - user_id
        visitor:
          type: object
          description: The unique identifiers to convert a single Visitor.
          properties:
            id:
              type: string
              description: The unique identifier for the contact which is given by
                Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            user_id:
              type: string
              description: A unique identifier for the contact which is given to Intercom.
              example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
            email:
              type: string
              description: The visitor's email.
              example: winstonsmith@truth.org
          anyOf:
          - required:
            - id
          - required:
            - user_id
          - required:
            - email
      required:
      - type
      - user
      - visitor
    create_article_request:
      description: You can create an Article
      type: object
      title: Create Article Request Payload
      nullable: true
      properties:
        title:
          type: string
          description: The title of the article.For multilingual articles, this will
            be the title of the default language's content.
          example: Thanks for everything
        description:
          type: string
          description: The description of the article. For multilingual articles,
            this will be the description of the default language's content.
          example: Description of the Article
        body:
          type: string
          description: The content of the article. For multilingual articles, this
            will be the body of the default language's content.
          example: "<p>This is the body in html</p>"
        author_id:
          type: integer
          description: The id of the author of the article. For multilingual articles,
            this will be the id of the author of the default language's content. Must
            be a teammate on the help center's workspace.
          example: 1295
        state:
          type: string
          description: Whether the article will be `published` or will be a `draft`.
            Defaults to draft. For multilingual articles, this will be the state of
            the default language's content.
          enum:
          - published
          - draft
          example: draft
        parent_id:
          type: integer
          description: The id of the article's parent collection or section. An article
            without this field stands alone.
          example: 18
        parent_type:
          type: string
          description: The type of parent, which can either be a `collection` or `section`.
          example: collection
        translated_content:
          "$ref": "#/components/schemas/article_translated_content"
      required:
      - title
      - author_id
    create_collection_request:
      description: You can create a collection
      type: object
      title: Create Collection Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: collection 51
        description:
          type: string
          description: The description of the collection. For multilingual collections,
            this will be the description of the default language's content.
          example: English description
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
      required:
      - name
    create_contact_request:
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      type: object
      title: Create Conversation Request Payload
      properties:
        role:
          type: string
          description: The role of the contact.
        external_id:
          type: string
          description: A unique identifier for the contact which is given to Intercom
        email:
          type: string
          description: The contacts email
          example: jdoe@example.com
        phone:
          type: string
          nullable: true
          description: The contacts phone
          example: "+353871234567"
        name:
          type: string
          nullable: true
          description: The contacts name
          example: John Doe
        avatar:
          type: string
          nullable: true
          description: An image URL containing the avatar of a contact
          example: https://www.example.com/avatar_image.jpg
        signed_up_at:
          type: integer
          format: date-time
          nullable: true
          description: The time specified for when a contact signed up
          example: 1571672154
        last_seen_at:
          type: integer
          format: date-time
          nullable: true
          description: The time when the contact was last seen (either where the Intercom
            Messenger was installed or when specified manually)
          example: 1571672154
        owner_id:
          type: integer
          nullable: true
          description: The id of an admin that has been assigned account ownership
            of the contact
          example: 123
        unsubscribed_from_emails:
          type: boolean
          nullable: true
          description: Whether the contact is unsubscribed from emails
          example: true
        custom_attributes:
          type: object
          nullable: true
          description: The custom attributes which are set for the contact
      anyOf:
      - required:
        - email
        title: Create contact with email
      - required:
        - external_id
        title: Create contact with external_id
      - required:
        - role
        title: Create contact with role
    create_conversation_request:
      description: Conversations are how you can communicate with users in Intercom.
        They are created when a contact replies to an outbound message, or when one
        admin directly sends a message to a single contact.
      type: object
      title: Create Conversation Request Payload
      properties:
        from:
          type: object
          properties:
            type:
              type: string
              enum:
              - lead
              - user
              - contact
              description: The role associated to the contact - user or lead.
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              format: uuid
              minLength: 24
              maxLength: 24
              example: 536e564f316c83104c000020
          required:
          - type
          - id
        body:
          type: string
          description: The content of the message. HTML is not supported.
          example: Hello
      required:
      - from
      - body
    create_data_attribute_request:
      description: ''
      type: object
      title: Create Data Attribute Request
      properties:
        name:
          type: string
          description: The name of the data attribute.
          example: My Data Attribute
        model:
          type: string
          description: The model that the data attribute belongs to.
          enum:
          - contact
          - company
          - conversation
          example: contact
        data_type:
          type: string
          description: The type of data stored for this attribute.
          enum:
          - string
          - integer
          - float
          - boolean
          - datetime
          - date
          example: string
        description:
          type: string
          description: The readable description you see in the UI for the attribute.
          example: My Data Attribute Description
        options:
          type: array
          description: To create list attributes. Provide a set of hashes with `value`
            as the key of the options you want to make. `data_type` must be `string`.
          items:
            type: string
          example:
          - option1
          - option2
      required:
      - name
      - model
      - data_type
    create_data_event_request:
      description: ''
      type: object
      title: Create Data Event Request
      properties:
        event_name:
          type: string
          description: The name of the event that occurred. This is presented to your
            App's admins when filtering and creating segments - a good event name
            is typically a past tense 'verb-noun' combination, to improve readability,
            for example `updated-plan`.
          example: invited-friend
        created_at:
          type: integer
          format: date-time
          description: The time the event occurred as a UTC Unix timestamp
          example: 1671028894
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        id:
          type: string
          description: Your identifier for a lead or a user.
          example: 8a88a590-e1c3-41e2-a502-e0649dbf721c
        email:
          type: string
          description: An email address for your user. An email should only be used
            where your application uses email to uniquely identify users.
          example: frodo.baggins@example.com
        metadata:
          type: object
          description: Optional metadata about the event.
          additionalProperties:
            type: string
          example:
            invite_code: ADDAFRIEND
      anyOf:
      - title: id required
        required:
        - event_name
        - created_at
        - id
      - title: user_id required
        required:
        - event_name
        - created_at
        - user_id
      - title: email required
        required:
        - event_name
        - created_at
        - email
    create_data_event_summaries_request:
      description: You can send a list of event summaries for a user. Each event summary
        should contain the event name, the time the event occurred, and the number
        of times the event occurred. The event name should be a past tense "verb-noun"
        combination, to improve readability, for example `updated-plan`.
      type: object
      title: Create Data Event Summaries Request
      properties:
        user_id:
          type: string
          description: Your identifier for the user.
          example: '314159'
        event_summaries:
          type: object
          description: A list of event summaries for the user. Each event summary
            should contain the event name, the time the event occurred, and the number
            of times the event occurred. The event name should be a past tense 'verb-noun'
            combination, to improve readability, for example `updated-plan`.
          properties:
            event_name:
              type: string
              description: The name of the event that occurred. A good event name
                is typically a past tense 'verb-noun' combination, to improve readability,
                for example `updated-plan`.
              example: invited-friend
            count:
              type: integer
              description: The number of times the event occurred.
              example: 1
            first:
              type: integer
              format: date-time
              description: The first time the event was sent
              example: 1671028894
            last:
              type: integer
              format: date-time
              description: The last time the event was sent
              example: 1671028894
    create_data_exports_request:
      description: Request for creating a data export
      type: object
      title: Create Data Export Request
      properties:
        created_at_after:
          type: integer
          description: The start date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
        created_at_before:
          type: integer
          description: The end date that you request data for. It must be formatted
            as a unix timestamp.
          example: 1527811200
      required:
      - created_at_after
      - created_at_before
    create_message_request:
      description: You can create a message
      type: object
      title: Create Message Request Payload
      nullable: true
      properties:
        message_type:
          type: string
          description: 'The kind of message being created. Values: `in_app` or `email`.'
          enum:
          - in_app
          - email
          example: in_app
        subject:
          type: string
          description: The title of the email.
          example: Thanks for everything
        body:
          type: string
          description: The content of the message. HTML and plaintext are supported.
          example: Hello there
        template:
          type: string
          description: The style of the outgoing message. Possible values `plain`
            or `personal`.
          example: plain
        from:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: Always `admin`.
              enum:
              - admin
              example: admin
            id:
              type: integer
              description: The identifier for the admin which is given by Intercom.
              example: 394051
          required:
          - type
          - id
        to:
          type: object
          description: The sender of the message. If not provided, the default sender
            will be used.
          properties:
            type:
              type: string
              description: The role associated to the contact - `user` or `lead`.
              enum:
              - user
              - lead
              example: user
            id:
              type: string
              description: The identifier for the contact which is given by Intercom.
              example: 536e564f316c83104c000020
          required:
          - type
          - id
        create_conversation_without_contact_reply:
          type: boolean
          description: Whether a conversation should be opened in the inbox for the
            message without the contact replying. Defaults to false if not provided.
          default: false
          example: true
      anyOf:
      - title: 'message_type: `email`.'
        required:
        - message_type
        - subject
        - body
        - template
        - from
        - to
      - title: 'message_type: `inapp`.'
        required:
        - message_type
        - body
        - from
        - to
    create_or_update_company_request:
      type: object
      title: Create Or Update Company Request Payload
      description: You can create or update a Company
      nullable: true
      properties:
        name:
          type: string
          description: The name of the Company
          example: Intercom
        company_id:
          type: string
          description: The company id you have defined for the company. Can't be updated
          example: 625e90fc55ab113b6d92175f
        plan:
          type: string
          description: The name of the plan you have associated with the company.
          example: Enterprise
        size:
          type: integer
          description: The number of employees in this company.
          example: '100'
        website:
          type: string
          description: The URL for this company's website. Please note that the value
            specified here is not validated. Accepts any string.
          example: https://www.example.com
        industry:
          type: string
          description: The industry that this company operates in.
          example: Manufacturing
        custom_attributes:
          type: object
          description: A hash of key/value pairs containing any other data about the
            company you want Intercom to store.
          additionalProperties:
            type: string
          example:
            paid_subscriber: true
            monthly_spend: 155.5
            team_mates: 9
        remote_created_at:
          type: integer
          description: The time the company was created by you.
          example: 1394531169
        monthly_spend:
          type: integer
          description: How much revenue the company generates for your business. Note
            that this will truncate floats. i.e. it only allow for whole integers,
            155.98 will be truncated to 155. Note that this has an upper limit of
            2**31-1 or 2147483647..
          example: 1000
    create_or_update_tag_request:
      description: You can create or update an existing tag.
      type: object
      title: Create or Update Tag Request Payload
      properties:
        name:
          type: string
          description: The name of the tag, which will be created if not found, or
            the new name for the tag if this is an update request. Names are case
            insensitive.
          example: Independent
        id:
          type: string
          description: The id of tag to updates.
          example: '656452352'
      required:
      - name
    create_phone_switch_request:
      description: You can create an phone switch
      type: object
      title: Create Phone Switch Request Payload
      nullable: true
      properties:
        phone:
          type: string
          description: Phone number in E.164 format, that will receive the SMS to
            continue the conversation in the Messenger.
          example: "+1 1234567890"
        custom_attributes:
          "$ref": "#/components/schemas/custom_attributes"
      required:
      - phone
    create_section_request:
      description: You can create a Section
      type: object
      title: Create Section Request Payload
      properties:
        name:
          type: string
          description: The name of the collection. For multilingual collections, this
            will be the name of the default language's content.
          example: Section 51
        parent_id:
          type: integer
          description: The id for the collection this section will be within.
          example: 18
        translated_content:
          nullable: true
          "$ref": "#/components/schemas/group_translated_content"
      required:
      - name
      - parent_id
    create_ticket_request:
      description: You can create a Ticket
      type: object
      title: Create Ticket Request Payload
      properties:
        ticket_type_id:
          type: string
          description: The ID of the type of ticket you want to create
          example: '1234'
        contacts:
          type: array
          description: The list of contacts (users or leads) affected by this ticket.
            Currently only one is allowed
          items:
            type: object
            oneOf:
            - title: ID
              properties:
                id:
                  type: string
                  description: The identifier for the contact as given by Intercom.
              required:
              - id
            - title: External ID
              properties:
                external_id:
                  type: string
                  description: The external_id you have defined for the contact who
                    is being added as a participant.
              required:
              - external_id
            - title: Email
              properties:
                email:
                  type: string
                  description: The email you have defined for the contact who is being
                    added as a participant. If a contact with this email does not
                    exist, one will be created.
              required:
              - email
          example:
          - id: '1234'
        custom_attributes:
          "$ref": "#/components/schemas/ticket_request_custom_attributes"
      required:
      - ticket_type_id
      - contacts
    customer_request:
      type: object
      nullable: true
      oneOf:
      - title: Intercom User ID
        properties:
          intercom_user_id:
            type: string
            description: The identifier for the contact as given by Intercom.
            example: 6329bd9ffe4e2e91dac76188
        required:
        - intercom_user_id
      - title: User ID
        properties:
          user_id:
            type: string
            description: The external_id you have defined for the contact who is being
              added as a participant.
            example: 2e91dac761886329bd9ffe4e
        required:
        - user_id
      - title: Email
        properties:
          email:
            type: string
            description: The email you have defined for the contact who is being added
              as a participant.
            example: sam.sung@example.com
        required:
        - email
    detach_contact_from_conversation_request:
      properties:
        admin_id:
          type: string
          description: The `id` of the admin who is performing the action.
          example: '5017690'
      required:
      - admin_id
    merge_contacts_request:
      description: Merge contact data.
      type: object
      title: Merge contact data
      properties:
        from:
          type: string
          description: The unique identifier for the contact to merge away from. Must
            be a lead.
          example: 5d70dd30de4efd54f42fd526
        into:
          type: string
          description: The unique identifier for the contact to merge into. Must be
            a user.
          example: 5ba682d23d7cf92bef87bfd4
    multiple_filter_search_request:
      type: object
      properties:
        operator:
          type: string
          enum:
          - AND
          - OR
          description: An operator to allow boolean inspection between multiple fields.
          example: AND
        value:
          oneOf:
          - type: array
            description: Add mutiple filters.
            title: multiple filter search request
            items:
              "$ref": "#/components/schemas/multiple_filter_search_request"
          - type: array
            description: Add a single filter field.
            title: single filter search request
            items:
              "$ref": "#/components/schemas/single_filter_search_request"
    news_item_request:
      description: A News Item is a content type in Intercom enabling you to announce
        product updates, company news, promotions, events and more with your customers.
      type: object
      title: Create News Item Request
      properties:
        title:
          type: string
          description: The title of the news item.
          example: Halloween is here!
        body:
          type: string
          description: The news item body, which may contain HTML.
          example: "<p>New costumes in store for this spooky season</p>"
        sender_id:
          type: integer
          description: The id of the sender of the news item. Must be a teammate on
            the workspace.
          example: 123
        state:
          type: string
          description: News items will not be visible to your users in the assigned
            newsfeeds until they are set live.
          enum:
          - draft
          - live
          example: live
        deliver_silently:
          type: boolean
          description: When set to `true`, the news item will appear in the messenger
            newsfeed without showing a notification badge.
          example: true
        labels:
          type: array
          description: Label names displayed to users to categorize the news item.
          items:
            type: string
          example:
          - Product
          - Update
          - New
        reactions:
          type: array
          description: Ordered list of emoji reactions to the news item. When empty,
            reactions are disabled.
          items:
            type: string
            nullable: true
          example:
          - "\U0001F606"
          - "\U0001F605"
        newsfeed_assignments:
          type: array
          description: A list of newsfeed_assignments to assign to the specified newsfeed.
          items:
            "$ref": "#/components/schemas/newsfeed_assignment"
      required:
      - title
      - sender_id
    open_conversation_request:
      title: Open Conversation Request
      type: object
      description: Payload of the request to open a conversation
      properties:
        message_type:
          type: string
          enum:
          - open
          example: open
        admin_id:
          type: string
          description: The id of the admin who is performing the action.
          example: '5017690'
      required:
      - message_type
      - admin_id
    redact_conversation_request:
      oneOf:
      - title: Redact Conversation Part Request
        type: object
        description: Payload of the request to redact a conversation part
        properties:
          type:
            type: string
            enum:
            - conversation_part
            description: The type of resource being redacted.
            example: conversation_part
          conversation_id:
            type: string
            description: The id of the conversation.
            example: '19894788788'
          conversation_part_id:
            type: string
            description: The id of the conversation_part.
            example: '19381789428'
        required:
        - type
        - conversation_id
        - conversation_part_id
      - title: Redact Conversation Source Request
        type: object
        description: Payload of the request to redact a conversation source
        properties:
          type:
            type: string
            enum:
            - source
            description: The type of resource being redacted.
            example: source
          conversation_id:
            type: string
            description: The id of the conversation.
            example: '19894788788'
          source_id:
            type: string
            description: The id of the source.
            example: '19894781231'
        required:
        - type
        - conversation_id
        - source_id
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
servers:
- url: https://api.intercom.io
  description: The production API server
- url: https://api.eu.intercom.io
  description: The european API server
- url: https://api.au.intercom.io
  description: The australian API server
security:
- bearerAuth: []
tags:
- name: Data Export
  description: Everything about your Data Exports
- name: Data Events
  description: Everything about your Data Events
- name: Subscription Types
  description: Everything about subscription types
- name: Notes
  description: Everything about your Notes
- name: Admins
  description: Everything about your Admins
- name: Articles
  description: Everything about your Articles
- name: Visitors
  description: Everything about your Visitors
- name: Data Attributes
  description: Everything about your Data Attributes
- name: Messages
  description: Everything about your messages
- name: Ticket Types
  description: Everything about your ticket types
- name: Switch
  description: Everything about Switch
  externalDocs:
    description: 'Meet Switch: from on hold to messaging in just a few taps'
    url: https://www.intercom.com/switch
- name: News
  description: Everything about your News
  externalDocs:
    description: News explained
    url: https://www.intercom.com/help/en/articles/6362251-news-explained
- name: Teams
  description: Everything about your Teams
- name: Help Center
  description: Everything about your Help Center
- name: Contacts
  description: Everything about your contacts
- name: Ticket Type Attributes
  description: Everything about your ticket type attributes
- name: Companies
  description: Everything about your Companies
- name: Conversations
  description: Everything about your Conversations
  externalDocs:
    description: What is a conversation?
    url: https://www.intercom.com/help/en/articles/4323904-what-is-a-conversation
- name: Segments
  description: Everything about your Segments
- name: Tags
  description: Everything about tags
